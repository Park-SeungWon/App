<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Aspose.Note</name>
  </assembly>
  <members>
    <member name="T:Aspose.Note.AttachedFile">
      <summary>
            Represents an attached file.
            </summary>
      <example>Shows how to get content of an attached file.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Attachments();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Sample1.one");

// Get a list of attached file nodes
IList&lt;AttachedFile&gt; nodes = oneFile.GetChildNodes&lt;AttachedFile&gt;();

// Iterate through all nodes
foreach (AttachedFile file in nodes)
{
    // Load attached file to a stream object
    using (Stream outputStream = new MemoryStream(file.Bytes))
    {
        // Create a local file
        using (Stream fileStream = System.IO.File.OpenWrite(String.Format(dataDir + file.FileName)))
        {
            // Copy file stream
            CopyStream(outputStream, fileStream);
        }
    }
}</code></example>
      <example>Shows how to add a file to a document by using filepath.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Attachments();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Initialize AttachedFile class object
AttachedFile attachedFile = new AttachedFile(doc,  dataDir + "attachment.txt");

// Add attached file
outlineElem.AppendChildLast(attachedFile);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

dataDir = dataDir + "AttachFileByPath_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to add a file from a stream to a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Attachments();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

using (var stream = File.OpenRead(dataDir + "icon.jpg"))
{
    // Initialize AttachedFile class object and also pass its icon path
    AttachedFile attachedFile = new AttachedFile(doc, dataDir + "attachment.txt", stream, ImageFormat.Jpeg);

    // Add attached file
    outlineElem.AppendChildLast(attachedFile);
}

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

dataDir = dataDir + "AttachFileAndSetIcon_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="M:Aspose.Note.AttachedFile.#ctor(Aspose.Note.Document,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.AttachedFile" /> class.
            </summary>
      <param name="document">
            A parent document of the attached file.
            </param>
      <param name="path">
            A string that contains the path to the file from which to create the <see cref="T:Aspose.Note.AttachedFile" />.
            </param>
    </member>
    <member name="M:Aspose.Note.AttachedFile.#ctor(Aspose.Note.Document,System.String,System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.AttachedFile" /> class.
            </summary>
      <param name="document">
            A parent document of the attached file.
            </param>
      <param name="path">
            A string that contains the path to the file from which to create the <see cref="T:Aspose.Note.AttachedFile" />.
            </param>
      <param name="icon">
            An icon for the attached file.
            </param>
      <param name="iconFormat">
            A format of the attached file icon.
            </param>
    </member>
    <member name="M:Aspose.Note.AttachedFile.#ctor(System.String,System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.AttachedFile" /> class.
            </summary>
      <param name="path">
            A string that contains the path to the file from which to create the <see cref="T:Aspose.Note.AttachedFile" />.
            </param>
      <param name="icon">
            An icon for the attached file.
            </param>
      <param name="iconFormat">
            A format of the attached file icon.
            </param>
    </member>
    <member name="M:Aspose.Note.AttachedFile.#ctor(Aspose.Note.Document,System.String,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.AttachedFile" /> class.
            </summary>
      <param name="document">
            A parent document of the attached file.
            </param>
      <param name="fileName">
            A name of the attached file.
            </param>
      <param name="attachedFileStream">
            A stream which contains the attached file bytes.
            </param>
    </member>
    <member name="M:Aspose.Note.AttachedFile.#ctor(System.String,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.AttachedFile" /> class.
            </summary>
      <param name="fileName">
            A name of the attached file.
            </param>
      <param name="attachedFileStream">
            A stream which contains the attached file bytes.
            </param>
    </member>
    <member name="M:Aspose.Note.AttachedFile.#ctor(Aspose.Note.Document,System.String,System.IO.Stream,System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.AttachedFile" /> class.
            </summary>
      <param name="document">
            A parent document of the attached file.
            </param>
      <param name="fileName">
            A name of the attached file.
            </param>
      <param name="attachedFileStream">
            A stream which contains the attached file bytes.
            </param>
      <param name="icon">
            An icon for the attached file.
            </param>
      <param name="iconFormat">
            A format of the attached file icon.
            </param>
    </member>
    <member name="M:Aspose.Note.AttachedFile.#ctor(System.String,System.IO.Stream,System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.AttachedFile" /> class.
            </summary>
      <param name="fileName">
            A name of the attached file.
            </param>
      <param name="attachedFileStream">
            A stream which contains the attached file bytes.
            </param>
      <param name="icon">
            An icon for the attached file.
            </param>
      <param name="iconFormat">
            A format of the attached file icon.
            </param>
    </member>
    <member name="M:Aspose.Note.AttachedFile.#ctor(Aspose.Note.Document)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.AttachedFile" /> class.
            </summary>
      <param name="document">
            The document of the composite node.
            </param>
    </member>
    <member name="M:Aspose.Note.AttachedFile.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.AttachedFile" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.LastModifiedTime">
      <summary>
            Gets or sets the last modified time.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.MaxWidth">
      <summary>
            Gets or sets the maximum width to display the embedded file icon.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.MaxHeight">
      <summary>
            Gets or sets the maximum height to display the embedded file icon.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.IsSizeSetByUser">
      <summary>
            Gets or sets a value indicating whether the value of the size of the icon was explicitly updated by the user.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.Text">
      <summary>
            Gets or sets the text representation of the embedded file. The string MUST NOT contain any characters of the value 10 (line feed) or 13 (carriage return).
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.AlternativeTextTitle">
      <summary>
            Gets or sets a title of alternative text for the icon of the attached file.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.AlternativeTextDescription">
      <summary>
            Gets or sets a body an alternative text for the icon of the attached file.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.Alignment">
      <summary>
            Gets or sets the alignment.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.FileName">
      <summary>
            Gets the name of the embedded file.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.FilePath">
      <summary>
            Gets the path to the original file.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.Width">
      <summary>
            Gets the original width of the embedded file icon.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.Height">
      <summary>
            Gets the original height of the embedded file icon.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.HorizontalOffset">
      <summary>
            Gets or sets the horizontal offset.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.VerticalOffset">
      <summary>
            Gets or sets the vertical offset.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.Icon">
      <summary>
            Gets the binary data for the icon that is associated with the embedded file.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.IconExtension">
      <summary>
            Gets the extension of the icon.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.Bytes">
      <summary>
            Gets the binary data for an embedded file.
            </summary>
      <example>Shows how to get content of an attached file.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Attachments();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Sample1.one");

// Get a list of attached file nodes
IList&lt;AttachedFile&gt; nodes = oneFile.GetChildNodes&lt;AttachedFile&gt;();

// Iterate through all nodes
foreach (AttachedFile file in nodes)
{
    // Load attached file to a stream object
    using (Stream outputStream = new MemoryStream(file.Bytes))
    {
        // Create a local file
        using (Stream fileStream = System.IO.File.OpenWrite(String.Format(dataDir + file.FileName)))
        {
            // Copy file stream
            CopyStream(outputStream, fileStream);
        }
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.AttachedFile.Extension">
      <summary>
            Gets the extension of an embedded file.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.IsPrintout">
      <summary>
            Gets or sets a value indicating whether the view of the file is printout.
            </summary>
    </member>
    <member name="P:Aspose.Note.AttachedFile.Tags">
      <summary>
            Gets the list of all tags of a paragraph.
            </summary>
    </member>
    <member name="M:Aspose.Note.AttachedFile.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="T:Aspose.Note.CompositeNode`1">
      <summary>
            The base generic class for nodes that can contain other nodes.
            </summary>
      <typeparam name="T">
            The type of elements in the composite node.
            </typeparam>
    </member>
    <member name="M:Aspose.Note.CompositeNode`1.#ctor(Aspose.Note.NodeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.CompositeNode`1" /> class.
            </summary>
      <param name="nodeType">
            The type of the node.
            </param>
    </member>
    <member name="M:Aspose.Note.CompositeNode`1.#ctor(Aspose.Note.Document,Aspose.Note.NodeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.CompositeNode`1" /> class.
            The class protected constructor.
            </summary>
      <param name="document">
            Parent document for the node.
            </param>
      <param name="nodeType">
            Type of the node.
            </param>
    </member>
    <member name="P:Aspose.Note.CompositeNode`1.IsComposite">
      <summary>
            Checks whether the node is composite. If true then the node can have child nodes.
            </summary>
    </member>
    <member name="P:Aspose.Note.CompositeNode`1.FirstChild">
      <summary>
            Gets the first child node of this node.
            </summary>
      <example>Shows how to check if a page is a conflict page(i.e. it has changes that OneNote couldn't automatically merge).<code>
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document doc = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

var history = doc.GetPageHistory(doc.FirstChild);
for (int i = 0; i &lt; history.Count; i++)
{
    var historyPage = history[i];
    Console.Write("    {0}. Author: {1}, {2:dd.MM.yyyy hh.mm.ss}",
                    i,
                    historyPage.PageContentRevisionSummary.AuthorMostRecent,
                    historyPage.PageContentRevisionSummary.LastModifiedTime);
    Console.WriteLine(historyPage.IsConflictPage ? ", IsConflict: true" : string.Empty);

    // By default conflict pages are just skipped on saving.
    // If mark it as non-conflict then it will be saved as usual one in the history.
    if (historyPage.IsConflictPage)
        historyPage.IsConflictPage = false;
}

doc.Save(dataDir + "ConflictPageManipulation_out.one", SaveFormat.One);</code></example>
    </member>
    <member name="P:Aspose.Note.CompositeNode`1.LastChild">
      <summary>
            Gets the last child node of this node.
            </summary>
    </member>
    <member name="P:Aspose.Note.CompositeNode`1.Children">
      <summary>
            Gets all child nodes of this node as an enumerable collection.
            </summary>
    </member>
    <member name="M:Aspose.Note.CompositeNode`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through child nodes of the <see cref="T:Aspose.Note.CompositeNode`1" />.
            </summary>
      <returns>
            A <see cref="T:IEnumerator`1" /> for the <see cref="T:Aspose.Note.CompositeNode`1" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.CompositeNode`1.InsertChild``1(System.Int32,``0)">
      <summary>
            Inserts the node to the specified position in the list of child nodes for this node.
            </summary>
      <typeparam name="T1">
            The exact type of inserted node.
            </typeparam>
      <param name="i">
            Position to insert
            </param>
      <param name="newChild">
            The node to insert.
            </param>
      <returns>
            The added node.
            </returns>
    </member>
    <member name="M:Aspose.Note.CompositeNode`1.InsertChildrenRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Inserts the node's sequence starting from specified position in the list of child nodes for this node.
            </summary>
      <param name="i">
            Position to insert
            </param>
      <param name="newChildren">
            The sequence of nodes to be inserted.
            </param>
    </member>
    <member name="M:Aspose.Note.CompositeNode`1.InsertChildrenRange(System.Int32,`0[])">
      <summary>
            Inserts the node's sequence starting from specified position in the list of child nodes for this node.
            </summary>
      <param name="i">
            Position to insert
            </param>
      <param name="newChildren">
            The sequence of nodes to be inserted.
            </param>
    </member>
    <member name="M:Aspose.Note.CompositeNode`1.AppendChildFirst``1(``0)">
      <summary>
            Adds the node to the front of the list of child nodes for this node.
            </summary>
      <typeparam name="T1">
            The exact type of appended node.
            </typeparam>
      <param name="newChild">
            The node to add.
            </param>
      <returns>
            The added node.
            </returns>
    </member>
    <member name="M:Aspose.Note.CompositeNode`1.AppendChildLast``1(``0)">
      <summary>
            Adds the node to the end of the list of child nodes for this node.
            </summary>
      <typeparam name="T1">
            The exact type of appended node.
            </typeparam>
      <param name="newChild">
            The node to add.
            </param>
      <returns>
            The added node.
            </returns>
    </member>
    <member name="M:Aspose.Note.CompositeNode`1.RemoveChild``1(``0)">
      <summary>
            Removes the child node.
            </summary>
      <typeparam name="T1">
            The exact type of removed node.
            </typeparam>
      <param name="oldChild">
            The node to remove.
            </param>
      <returns>
            The removed node.
            </returns>
    </member>
    <member name="M:Aspose.Note.CompositeNode`1.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="M:Aspose.Note.CompositeNode`1.GetChildNodes(Aspose.Note.NodeType)">
      <summary>
            Get all child nodes by node type.
            </summary>
      <param name="type">
            The node type.
            </param>
      <returns>
            A list of child nodes.
            </returns>
    </member>
    <member name="M:Aspose.Note.CompositeNode`1.GetChildNodes``1">
      <summary>
            Get all child nodes by the node type.
            </summary>
      <typeparam name="T1">The type of elements in the returned list.</typeparam>
      <returns>A list of child nodes.</returns>
      <example>Shows how to get an image from a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all Image nodes
IList&lt;Aspose.Note.Image&gt; nodes = oneFile.GetChildNodes&lt;Aspose.Note.Image&gt;();

foreach (Aspose.Note.Image image in nodes)
{
    using (MemoryStream stream = new MemoryStream(image.Bytes))
    {
        using (Bitmap bitMap = new Bitmap(stream))
        {
            // Save image bytes to a file
            bitMap.Save(String.Format(dataDir + "{0}", Path.GetFileName(image.FileName)));
        }
    }
}</code></example>
      <example>Shows how to get image's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all Image nodes
IList&lt;Aspose.Note.Image&gt; images = oneFile.GetChildNodes&lt;Aspose.Note.Image&gt;();

foreach (Aspose.Note.Image image in images)
{
    Console.WriteLine("Width: {0}", image.Width);
    Console.WriteLine("Height: {0}", image.Height);
    Console.WriteLine("OriginalWidth: {0}", image.OriginalWidth);
    Console.WriteLine("OriginalHeight: {0}", image.OriginalHeight);
    Console.WriteLine("FileName: {0}", image.FileName);
    Console.WriteLine("LastModifiedTime: {0}", image.LastModifiedTime);
    Console.WriteLine();
}</code></example>
    </member>
    <member name="T:Aspose.Note.CompositeNodeBase">
      <summary>
            The non-generic class for nodes that can contain other nodes.
            </summary>
    </member>
    <member name="M:Aspose.Note.CompositeNodeBase.#ctor(Aspose.Note.NodeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.CompositeNodeBase" /> class.
            </summary>
      <param name="nodeType">
            The type of the node.
            </param>
    </member>
    <member name="M:Aspose.Note.CompositeNodeBase.#ctor(Aspose.Note.Document,Aspose.Note.NodeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.CompositeNodeBase" /> class.
            The class protected constructor.
            </summary>
      <param name="document">
            Parent document for the node.
            </param>
      <param name="nodeType">
            Type of the node.
            </param>
    </member>
    <member name="M:Aspose.Note.CompositeNodeBase.GetChildNodes(Aspose.Note.NodeType)">
      <summary>
            Get all child nodes by node type.
            </summary>
      <param name="type">
            The node type.
            </param>
      <returns>
            A list of child nodes.
            </returns>
    </member>
    <member name="M:Aspose.Note.CompositeNodeBase.GetChildNodes``1">
      <summary>
            Get all child nodes by the node type.
            </summary>
      <typeparam name="T1">The type of elements in the returned list.</typeparam>
      <returns>A list of child nodes.</returns>
    </member>
    <member name="M:Aspose.Note.CompositeNodeBase.CheckDocument(Aspose.Note.Node)">
      <summary>
            Checks Document field of a new node
            </summary>
      <param name="node">
            New node to be inserted
            </param>
    </member>
    <member name="T:Aspose.Note.DocumentVisitor">
      <summary>
            The abstract class for iterating through subtree with root at the specified node.
            </summary>
      <example>Shows how to access content of a document using visitor.<code>
public static void Run()
{
    // The path to the documents directory.
    string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

    // Open the document we want to convert.
    Document doc = new Document(dataDir + "Aspose.one");

    // Create an object that inherits from the DocumentVisitor class.
    MyOneNoteToTxtWriter myConverter = new MyOneNoteToTxtWriter();

    // This is the well known Visitor pattern. Get the model to accept a visitor.
    // The model will iterate through itself by calling the corresponding methods
    // on the visitor object (this is called visiting).
    //
    // Note that every node in the object model has the Accept method so the visiting
    // can be executed not only for the whole document, but for any node in the document.
    doc.Accept(myConverter);

    // Once the visiting is complete, we can retrieve the result of the operation,
    // that in this example, has accumulated in the visitor.
    Console.WriteLine(myConverter.GetText());
    Console.WriteLine(myConverter.NodeCount);            
}

/// &lt;summary&gt;
/// Simple implementation of saving a document in the plain text format. Implemented as a Visitor.
/// &lt;/summary&gt;
public class MyOneNoteToTxtWriter : DocumentVisitor
{
    public MyOneNoteToTxtWriter()
    {
        nodecount = 0;
        mIsSkipText = false;
        mBuilder = new StringBuilder();
    }

    /// &lt;summary&gt;
    /// Gets the plain text of the document that was accumulated by the visitor.
    /// &lt;/summary&gt;
    public string GetText()
    {
        return mBuilder.ToString();
    }

    /// &lt;summary&gt;
    /// Adds text to the current output. Honors the enabled/disabled output flag.
    /// &lt;/summary&gt;
    private void AppendText(string text)
    {
        if (!mIsSkipText)
        {
            mBuilder.AppendLine(text);
        }
    }

    /// &lt;summary&gt;
    /// Called when a RichText node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitRichTextStart(RichText run)
    {
        ++nodecount;
        AppendText(run.Text);
    }

    /// &lt;summary&gt;
    /// Called when a Document node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitDocumentStart(Document document)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a Page node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitPageStart(Page page)
    {
        ++nodecount;
        this.AppendText($"*** Page '{page.Title?.TitleText?.Text ?? "(no title)"}' ***");
    }

    /// &lt;summary&gt;
    /// Called when processing of a Page node is finished.
    /// &lt;/summary&gt;
    public override void VisitPageEnd(Page page)
    {
        this.AppendText(string.Empty);
    }

    /// &lt;summary&gt;
    /// Called when a Title node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitTitleStart(Title title)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a Image node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitImageStart(Image image)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a OutlineGroup node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitOutlineGroupStart(OutlineGroup outlineGroup)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a Outline node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitOutlineStart(Outline outline)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a OutlineElement node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitOutlineElementStart(OutlineElement outlineElement)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Gets the total count of nodes by the Visitor
    /// &lt;/summary&gt;
    public Int32 NodeCount
    {
        get { return this.nodecount; }
    }

    private readonly StringBuilder mBuilder;
    private bool mIsSkipText;
    private Int32 nodecount;
}</code></example>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitDocumentStart(Aspose.Note.Document)">
      <summary>
            Start to visit the <see cref="T:Aspose.Note.Document" /> node.
            </summary>
      <param name="document">
            The <see cref="T:Aspose.Note.Document" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitDocumentEnd(Aspose.Note.Document)">
      <summary>
            End to visit the <see cref="T:Aspose.Note.Document" /> node.
            </summary>
      <param name="document">
            The <see cref="T:Aspose.Note.Document" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitImageStart(Aspose.Note.Image)">
      <summary>
            Start to visit the <see cref="T:Aspose.Note.Image" /> node.
            </summary>
      <param name="image">
            The <see cref="T:Aspose.Note.Image" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitImageEnd(Aspose.Note.Image)">
      <summary>
            End to visit the <see cref="T:Aspose.Note.Image" /> node.
            </summary>
      <param name="image">
            The <see cref="T:Aspose.Note.Image" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitOutlineStart(Aspose.Note.Outline)">
      <summary>
            Start to visit the <see cref="T:Aspose.Note.Outline" /> node.
            </summary>
      <param name="outline">
            The <see cref="T:Aspose.Note.Outline" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitOutlineEnd(Aspose.Note.Outline)">
      <summary>
            End to visit the <see cref="T:Aspose.Note.Outline" /> node.
            </summary>
      <param name="outline">
            The <see cref="T:Aspose.Note.Outline" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitOutlineElementStart(Aspose.Note.OutlineElement)">
      <summary>
            Start to visit the <see cref="T:Aspose.Note.OutlineElement" /> node.
            </summary>
      <param name="outlineElement">
            The <see cref="T:Aspose.Note.OutlineElement" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitOutlineElementEnd(Aspose.Note.OutlineElement)">
      <summary>
            End to visit the <see cref="T:Aspose.Note.OutlineElement" /> node.
            </summary>
      <param name="outlineElement">
            The <see cref="T:Aspose.Note.OutlineElement" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitOutlineGroupStart(Aspose.Note.OutlineGroup)">
      <summary>
            Start to visit the <see cref="T:Aspose.Note.OutlineGroup" /> node.
            </summary>
      <param name="outlineGroup">
            The <see cref="T:Aspose.Note.OutlineGroup" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitOutlineGroupEnd(Aspose.Note.OutlineGroup)">
      <summary>
            End to visit the <see cref="T:Aspose.Note.OutlineGroup" /> node.
            </summary>
      <param name="outlineGroup">
            The <see cref="T:Aspose.Note.OutlineGroup" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitPageStart(Aspose.Note.Page)">
      <summary>
            Start to visit the <see cref="T:Aspose.Note.Page" /> node.
            </summary>
      <param name="page">
            The <see cref="T:Aspose.Note.Page" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitPageEnd(Aspose.Note.Page)">
      <summary>
            End to visit the <see cref="T:Aspose.Note.Page" /> node.
            </summary>
      <param name="page">
            The <see cref="T:Aspose.Note.Page" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitRichTextStart(Aspose.Note.RichText)">
      <summary>
            Start to visit the <see cref="T:Aspose.Note.RichText" /> node.
            </summary>
      <param name="richText">
            The <see cref="T:Aspose.Note.RichText" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitRichTextEnd(Aspose.Note.RichText)">
      <summary>
            End to visit the <see cref="T:Aspose.Note.RichText" /> node.
            </summary>
      <param name="richText">
            The <see cref="T:Aspose.Note.RichText" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitTitleStart(Aspose.Note.Title)">
      <summary>
            Start to visit the <see cref="T:Aspose.Note.Title" /> node.
            </summary>
      <param name="title">
            The <see cref="T:Aspose.Note.Title" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitTitleEnd(Aspose.Note.Title)">
      <summary>
            End to visit the <see cref="T:Aspose.Note.Title" /> node.
            </summary>
      <param name="title">
            The <see cref="T:Aspose.Note.Title" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitAttachedFileStart(Aspose.Note.AttachedFile)">
      <summary>
            Start to visit the <see cref="T:Aspose.Note.AttachedFile" /> node.
            </summary>
      <param name="attachedFile">
            The <see cref="T:Aspose.Note.AttachedFile" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitAttachedFileEnd(Aspose.Note.AttachedFile)">
      <summary>
            End to visit the <see cref="T:Aspose.Note.AttachedFile" /> node.
            </summary>
      <param name="attachedFile">
            The <see cref="T:Aspose.Note.AttachedFile" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitTableStart(Aspose.Note.Table)">
      <summary>
            Start to visit the <see cref="T:Aspose.Note.Table" /> node.
            </summary>
      <param name="table">
            The <see cref="T:Aspose.Note.Table" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitTableEnd(Aspose.Note.Table)">
      <summary>
            End to visit the <see cref="T:Aspose.Note.Table" /> node.
            </summary>
      <param name="table">
            The <see cref="T:Aspose.Note.Table" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitTableCellStart(Aspose.Note.TableCell)">
      <summary>
            Start to visit the <see cref="T:Aspose.Note.TableCell" /> node.
            </summary>
      <param name="tableCell">
            The <see cref="T:Aspose.Note.TableCell" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitTableCellEnd(Aspose.Note.TableCell)">
      <summary>
            End to visit the <see cref="T:Aspose.Note.TableCell" /> node.
            </summary>
      <param name="tableCell">
            The <see cref="T:Aspose.Note.TableCell" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitTableRowStart(Aspose.Note.TableRow)">
      <summary>
            Start to visit the <see cref="T:Aspose.Note.TableRow" /> node.
            </summary>
      <param name="tableRow">
            The <see cref="T:Aspose.Note.TableRow" /> node.
            </param>
    </member>
    <member name="M:Aspose.Note.DocumentVisitor.VisitTableRowEnd(Aspose.Note.TableRow)">
      <summary>
            End to visit the <see cref="T:Aspose.Note.TableRow" /> node.
            </summary>
      <param name="tableRow">
            The <see cref="T:Aspose.Note.TableRow" /> node.
            </param>
    </member>
    <member name="T:Aspose.Note.ICompositeNode">
      <summary>
            The interface for nodes that can contain other nodes.
            </summary>
    </member>
    <member name="M:Aspose.Note.ICompositeNode.GetChildNodes(Aspose.Note.NodeType)">
      <summary>
            Get all child nodes by node type.
            </summary>
      <param name="type">
            The node type.
            </param>
      <returns>
            A list of child nodes.
            </returns>
    </member>
    <member name="M:Aspose.Note.ICompositeNode.GetChildNodes``1">
      <summary>
            Get all child nodes by the node type.
            </summary>
      <typeparam name="T1">The type of elements in the returned list.</typeparam>
      <returns>A list of child nodes.</returns>
    </member>
    <member name="T:Aspose.Note.ICompositeNode`1">
      <summary>
            The interface for nodes that can contain other nodes.
            </summary>
      <typeparam name="T">
            Type of child nodes
            </typeparam>
    </member>
    <member name="T:Aspose.Note.INode">
      <summary>
            The interface for all nodes of an Aspose.Note document.
            </summary>
    </member>
    <member name="P:Aspose.Note.INode.PreviousSibling">
      <summary>
            Gets the previous node at the same node tree level.
            </summary>
      <value>
            The previous sibling.
            </value>
    </member>
    <member name="P:Aspose.Note.INode.NextSibling">
      <summary>
            Gets the next node at the same node tree level.
            </summary>
      <value>
            The next sibling.
            </value>
    </member>
    <member name="M:Aspose.Note.INode.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="T:Aspose.Note.IOutlineChildNode">
      <summary>
            The interface for all child nodes of an outline node.
            </summary>
    </member>
    <member name="T:Aspose.Note.IOutlineElementChildNode">
      <summary>
            The interface for all child nodes of an outline element node.
            </summary>
    </member>
    <member name="T:Aspose.Note.IPageChildNode">
      <summary>
            The interface for all child nodes of a page node.
            </summary>
    </member>
    <member name="P:Aspose.Note.IPageChildNode.HorizontalOffset">
      <summary>
            Gets or sets the horizontal offset.
            </summary>
    </member>
    <member name="P:Aspose.Note.IPageChildNode.VerticalOffset">
      <summary>
            Gets or sets the vertical offset.
            </summary>
    </member>
    <member name="T:Aspose.Note.Node">
      <summary>
            The base class for all nodes of an Aspose.Note document.
            </summary>
    </member>
    <member name="M:Aspose.Note.Node.#ctor(Aspose.Note.NodeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Node" /> class.
            </summary>
      <param name="nodeType">
            The type of the node.
            </param>
    </member>
    <member name="M:Aspose.Note.Node.#ctor(Aspose.Note.Document,Aspose.Note.NodeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Node" /> class.
            The class protected constructor.
            </summary>
      <param name="document">
            Parent document for the node.
            </param>
      <param name="nodeType">
            Type of the node.
            </param>
    </member>
    <member name="P:Aspose.Note.Node.Document">
      <summary>
            Gets the document of the node.
            </summary>
      <value>
            The document.
            </value>
    </member>
    <member name="P:Aspose.Note.Node.IsComposite">
      <summary>
            Gets a value indicating whether this node is composite. If true the node can have child nodes.
            </summary>
    </member>
    <member name="P:Aspose.Note.Node.NodeType">
      <summary>
            Gets the node type.
            </summary>
    </member>
    <member name="P:Aspose.Note.Node.ParentNode">
      <summary>
            Gets the parent node.
            </summary>
    </member>
    <member name="P:Aspose.Note.Node.PreviousSibling">
      <summary>
            Gets the previous node at the same node tree level.
            </summary>
      <value>
            The previous sibling.
            </value>
    </member>
    <member name="P:Aspose.Note.Node.NextSibling">
      <summary>
            Gets the next node at the same node tree level.
            </summary>
      <value>
            The next sibling.
            </value>
    </member>
    <member name="M:Aspose.Note.Node.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="T:Aspose.Note.CheckBox">
      <summary>
            The base class for tags that can toggle their state between complete and incomplete.
            </summary>
      <example>Shows how to generate a pdf containing all pages related to 'Project A'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "ProjectNotes.one"));

var report = new Document();
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.Any(x =&gt; x.Label.Contains("Project A"))))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "ProjectA_Report.pdf"));</code></example>
      <example>Shows how to make completed all checkbox items related to 'Project C'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "ProjectNotes.one"));

foreach (var node in oneFile.GetChildNodes&lt;ITaggable&gt;())
{
    foreach (var checkBox in node.Tags.OfType&lt;CheckBox&gt;())
    {
        if (checkBox.Label.Contains("Project C") &amp;&amp; !checkBox.Checked)
        {
            checkBox.SetCompleted();
        }
    }
}

oneFile.Save(Path.Combine(dataDir, ClosedProjectCNotesFileName));</code></example>
      <example>Shows how to make open all checkbox items related to 'Project C'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, ClosedProjectCNotesFileName));

foreach (var node in oneFile.GetChildNodes&lt;ITaggable&gt;())
{
    foreach (var checkBox in node.Tags.OfType&lt;CheckBox&gt;())
    {
        if (checkBox.Label.Contains("Project C") &amp;&amp; checkBox.Checked)
        {
            checkBox.SetOpen();
        }
    }
}

oneFile.Save(Path.Combine(dataDir, "ProjectNoteWithOpenProjectC.one"));</code></example>
      <example>Shows how to generate a pdf containing pages with items marked by incomplete checkboxes and created during last week.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "TagFile.one"));

var report = new Document();
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.OfType&lt;CheckBox&gt;().Any(x =&gt; !x.Checked &amp;&amp; DateTime.UtcNow.Subtract(TimeSpan.FromDays(7)) &lt;= x.CreationTime)))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "IncompleteLastWeekReport.pdf"));</code></example>
      <example>Shows how to generate a pdf containing pages with Outlook incomplete tasks to complete on this week.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "TagFile.one"));

var report = new Document();
var endOfWeek = DateTime.Today.AddDays(5 - (int)DateTime.Today.DayOfWeek);
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.OfType&lt;NoteTask&gt;().Any(x =&gt; !x.Checked &amp;&amp; DateTime.UtcNow.Subtract(TimeSpan.FromDays(7)) &lt;= x.CreationTime &amp;&amp; x.DueDate &lt;= endOfWeek)))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "IncompleteTasksForThisWeekReport.pdf"));</code></example>
    </member>
    <member name="M:Aspose.Note.CheckBox.#ctor(Aspose.Note.TagIcon)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.CheckBox" /> class.
            </summary>
      <param name="icon">
            The icon of tag.
            </param>
    </member>
    <member name="P:Aspose.Note.CheckBox.CreationTime">
      <summary>
            Gets or sets the creation time.
            </summary>
      <value>
            The <see cref="T:System.DateTime" />.
            </value>
    </member>
    <member name="P:Aspose.Note.CheckBox.CompletedTime">
      <summary>
            Gets or sets the completed time.
            </summary>
      <value>
            The <see cref="T:System.Nullable`1" />.
            </value>
    </member>
    <member name="P:Aspose.Note.CheckBox.Status">
      <summary>
            Gets or sets the status.
            </summary>
      <value>
            The <see cref="T:Aspose.Note.TagStatus" />.
            </value>
    </member>
    <member name="P:Aspose.Note.CheckBox.Icon">
      <summary>
            Gets or sets the icon.
            </summary>
      <value>
            The <see cref="T:Aspose.Note.TagIcon" />.
            </value>
    </member>
    <member name="P:Aspose.Note.CheckBox.Label">
      <summary>
            Gets the label text.
            </summary>
    </member>
    <member name="P:Aspose.Note.CheckBox.Checked">
      <summary>
            Gets a value indicating whether the CheckBox is in the checked state.
            </summary>
      <example>Shows how to generate a pdf containing all pages related to 'Project A'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "ProjectNotes.one"));

var report = new Document();
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.Any(x =&gt; x.Label.Contains("Project A"))))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "ProjectA_Report.pdf"));</code></example>
      <example>Shows how to make completed all checkbox items related to 'Project C'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "ProjectNotes.one"));

foreach (var node in oneFile.GetChildNodes&lt;ITaggable&gt;())
{
    foreach (var checkBox in node.Tags.OfType&lt;CheckBox&gt;())
    {
        if (checkBox.Label.Contains("Project C") &amp;&amp; !checkBox.Checked)
        {
            checkBox.SetCompleted();
        }
    }
}

oneFile.Save(Path.Combine(dataDir, ClosedProjectCNotesFileName));</code></example>
      <example>Shows how to make open all checkbox items related to 'Project C'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, ClosedProjectCNotesFileName));

foreach (var node in oneFile.GetChildNodes&lt;ITaggable&gt;())
{
    foreach (var checkBox in node.Tags.OfType&lt;CheckBox&gt;())
    {
        if (checkBox.Label.Contains("Project C") &amp;&amp; checkBox.Checked)
        {
            checkBox.SetOpen();
        }
    }
}

oneFile.Save(Path.Combine(dataDir, "ProjectNoteWithOpenProjectC.one"));</code></example>
      <example>Shows how to generate a pdf containing pages with items marked by incomplete checkboxes and created during last week.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "TagFile.one"));

var report = new Document();
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.OfType&lt;CheckBox&gt;().Any(x =&gt; !x.Checked &amp;&amp; DateTime.UtcNow.Subtract(TimeSpan.FromDays(7)) &lt;= x.CreationTime)))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "IncompleteLastWeekReport.pdf"));</code></example>
      <example>Shows how to generate a pdf containing pages with Outlook incomplete tasks to complete on this week.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "TagFile.one"));

var report = new Document();
var endOfWeek = DateTime.Today.AddDays(5 - (int)DateTime.Today.DayOfWeek);
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.OfType&lt;NoteTask&gt;().Any(x =&gt; !x.Checked &amp;&amp; DateTime.UtcNow.Subtract(TimeSpan.FromDays(7)) &lt;= x.CreationTime &amp;&amp; x.DueDate &lt;= endOfWeek)))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "IncompleteTasksForThisWeekReport.pdf"));</code></example>
    </member>
    <member name="M:Aspose.Note.CheckBox.SetCompleted(System.DateTime)">
      <summary>
            Sets the tag to completed state.
            </summary>
      <param name="completedTime">
            The completed time.
            </param>
    </member>
    <member name="M:Aspose.Note.CheckBox.SetCompleted">
      <summary>
            Sets the tag to completed state using current time as completed time.
            </summary>
      <example>Shows how to make completed all checkbox items related to 'Project C'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "ProjectNotes.one"));

foreach (var node in oneFile.GetChildNodes&lt;ITaggable&gt;())
{
    foreach (var checkBox in node.Tags.OfType&lt;CheckBox&gt;())
    {
        if (checkBox.Label.Contains("Project C") &amp;&amp; !checkBox.Checked)
        {
            checkBox.SetCompleted();
        }
    }
}

oneFile.Save(Path.Combine(dataDir, ClosedProjectCNotesFileName));</code></example>
    </member>
    <member name="M:Aspose.Note.CheckBox.SetOpen">
      <summary>
            Sets the tag to open state.
            </summary>
      <example>Shows how to make open all checkbox items related to 'Project C'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, ClosedProjectCNotesFileName));

foreach (var node in oneFile.GetChildNodes&lt;ITaggable&gt;())
{
    foreach (var checkBox in node.Tags.OfType&lt;CheckBox&gt;())
    {
        if (checkBox.Label.Contains("Project C") &amp;&amp; checkBox.Checked)
        {
            checkBox.SetOpen();
        }
    }
}

oneFile.Save(Path.Combine(dataDir, "ProjectNoteWithOpenProjectC.one"));</code></example>
    </member>
    <member name="T:Aspose.Note.INoteTag">
      <summary>
            The interface for note tags(i.e. tags that are not associated with Outlook tasks).
            </summary>
      <example>Shows how to access details of a tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "TagFile.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tags = richText.Tags.OfType&lt;NoteTag&gt;();
    if (tags.Any())
    {
        Console.WriteLine($"Text: {richText.Text}");
        foreach (var noteTag in tags)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTag.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTag.CreationTime}");
            Console.WriteLine($"    Font Color: {noteTag.FontColor}");
            Console.WriteLine($"    Status: {noteTag.Status}");
            Console.WriteLine($"    Label: {noteTag.Label}");
            Console.WriteLine($"    Icon: {noteTag.Icon}");
            Console.WriteLine($"    High Light: {noteTag.Highlight}");
        }
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.INoteTag.Label">
      <summary>
            Gets or sets the label text.
            </summary>
    </member>
    <member name="P:Aspose.Note.INoteTag.FontColor">
      <summary>
            Gets or sets the font color.
            </summary>
      <example>Shows how to access details of a tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "TagFile.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tags = richText.Tags.OfType&lt;NoteTag&gt;();
    if (tags.Any())
    {
        Console.WriteLine($"Text: {richText.Text}");
        foreach (var noteTag in tags)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTag.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTag.CreationTime}");
            Console.WriteLine($"    Font Color: {noteTag.FontColor}");
            Console.WriteLine($"    Status: {noteTag.Status}");
            Console.WriteLine($"    Label: {noteTag.Label}");
            Console.WriteLine($"    Icon: {noteTag.Icon}");
            Console.WriteLine($"    High Light: {noteTag.Highlight}");
        }
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.INoteTag.Highlight">
      <summary>
            Gets or sets the highlight color.
            </summary>
      <example>Shows how to access details of a tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "TagFile.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tags = richText.Tags.OfType&lt;NoteTag&gt;();
    if (tags.Any())
    {
        Console.WriteLine($"Text: {richText.Text}");
        foreach (var noteTag in tags)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTag.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTag.CreationTime}");
            Console.WriteLine($"    Font Color: {noteTag.FontColor}");
            Console.WriteLine($"    Status: {noteTag.Status}");
            Console.WriteLine($"    Label: {noteTag.Label}");
            Console.WriteLine($"    Icon: {noteTag.Icon}");
            Console.WriteLine($"    High Light: {noteTag.Highlight}");
        }
    }
}</code></example>
    </member>
    <member name="T:Aspose.Note.ITag">
      <summary>
            The interface for tags of all kinds.
            </summary>
      <example>Shows how to generate a pdf containing all pages related to 'Project A'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "ProjectNotes.one"));

var report = new Document();
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.Any(x =&gt; x.Label.Contains("Project A"))))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "ProjectA_Report.pdf"));</code></example>
      <example>Shows how to make completed all checkbox items related to 'Project C'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "ProjectNotes.one"));

foreach (var node in oneFile.GetChildNodes&lt;ITaggable&gt;())
{
    foreach (var checkBox in node.Tags.OfType&lt;CheckBox&gt;())
    {
        if (checkBox.Label.Contains("Project C") &amp;&amp; !checkBox.Checked)
        {
            checkBox.SetCompleted();
        }
    }
}

oneFile.Save(Path.Combine(dataDir, ClosedProjectCNotesFileName));</code></example>
      <example>Shows how to make open all checkbox items related to 'Project C'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, ClosedProjectCNotesFileName));

foreach (var node in oneFile.GetChildNodes&lt;ITaggable&gt;())
{
    foreach (var checkBox in node.Tags.OfType&lt;CheckBox&gt;())
    {
        if (checkBox.Label.Contains("Project C") &amp;&amp; checkBox.Checked)
        {
            checkBox.SetOpen();
        }
    }
}

oneFile.Save(Path.Combine(dataDir, "ProjectNoteWithOpenProjectC.one"));</code></example>
      <example>Shows how to generate a pdf containing pages with items marked by incomplete checkboxes and created during last week.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "TagFile.one"));

var report = new Document();
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.OfType&lt;CheckBox&gt;().Any(x =&gt; !x.Checked &amp;&amp; DateTime.UtcNow.Subtract(TimeSpan.FromDays(7)) &lt;= x.CreationTime)))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "IncompleteLastWeekReport.pdf"));</code></example>
      <example>Shows how to generate a pdf containing pages with Outlook incomplete tasks to complete on this week.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "TagFile.one"));

var report = new Document();
var endOfWeek = DateTime.Today.AddDays(5 - (int)DateTime.Today.DayOfWeek);
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.OfType&lt;NoteTask&gt;().Any(x =&gt; !x.Checked &amp;&amp; DateTime.UtcNow.Subtract(TimeSpan.FromDays(7)) &lt;= x.CreationTime &amp;&amp; x.DueDate &lt;= endOfWeek)))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "IncompleteTasksForThisWeekReport.pdf"));</code></example>
      <example>Shows how to access details of outlook's tasks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tasks = richText.Tags.OfType&lt;NoteTask&gt;();
    if (tasks.Any())
    {
        Console.WriteLine($"Task: {richText.Text}");
        foreach (var noteTask in tasks)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTask.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTask.CreationTime}");
            Console.WriteLine($"    Due Date: {noteTask.DueDate}");
            Console.WriteLine($"    Status: {noteTask.Status}");
            Console.WriteLine($"    Icon: {noteTask.Icon}");
        }
    }
}</code></example>
      <example>Shows how to access details of a tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "TagFile.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tags = richText.Tags.OfType&lt;NoteTag&gt;();
    if (tags.Any())
    {
        Console.WriteLine($"Text: {richText.Text}");
        foreach (var noteTag in tags)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTag.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTag.CreationTime}");
            Console.WriteLine($"    Font Color: {noteTag.FontColor}");
            Console.WriteLine($"    Status: {noteTag.Status}");
            Console.WriteLine($"    Label: {noteTag.Label}");
            Console.WriteLine($"    Icon: {noteTag.Icon}");
            Console.WriteLine($"    High Light: {noteTag.Highlight}");
        }
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.ITag.CreationTime">
      <summary>
            Gets or sets the creation time.
            </summary>
      <value>
            The <see cref="T:System.DateTime" />.
            </value>
      <example>Shows how to generate a pdf containing all pages related to 'Project A'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "ProjectNotes.one"));

var report = new Document();
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.Any(x =&gt; x.Label.Contains("Project A"))))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "ProjectA_Report.pdf"));</code></example>
      <example>Shows how to generate a pdf containing pages with items marked by incomplete checkboxes and created during last week.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "TagFile.one"));

var report = new Document();
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.OfType&lt;CheckBox&gt;().Any(x =&gt; !x.Checked &amp;&amp; DateTime.UtcNow.Subtract(TimeSpan.FromDays(7)) &lt;= x.CreationTime)))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "IncompleteLastWeekReport.pdf"));</code></example>
      <example>Shows how to generate a pdf containing pages with Outlook incomplete tasks to complete on this week.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "TagFile.one"));

var report = new Document();
var endOfWeek = DateTime.Today.AddDays(5 - (int)DateTime.Today.DayOfWeek);
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.OfType&lt;NoteTask&gt;().Any(x =&gt; !x.Checked &amp;&amp; DateTime.UtcNow.Subtract(TimeSpan.FromDays(7)) &lt;= x.CreationTime &amp;&amp; x.DueDate &lt;= endOfWeek)))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "IncompleteTasksForThisWeekReport.pdf"));</code></example>
      <example>Shows how to access details of outlook's tasks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tasks = richText.Tags.OfType&lt;NoteTask&gt;();
    if (tasks.Any())
    {
        Console.WriteLine($"Task: {richText.Text}");
        foreach (var noteTask in tasks)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTask.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTask.CreationTime}");
            Console.WriteLine($"    Due Date: {noteTask.DueDate}");
            Console.WriteLine($"    Status: {noteTask.Status}");
            Console.WriteLine($"    Icon: {noteTask.Icon}");
        }
    }
}</code></example>
      <example>Shows how to access details of a tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "TagFile.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tags = richText.Tags.OfType&lt;NoteTag&gt;();
    if (tags.Any())
    {
        Console.WriteLine($"Text: {richText.Text}");
        foreach (var noteTag in tags)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTag.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTag.CreationTime}");
            Console.WriteLine($"    Font Color: {noteTag.FontColor}");
            Console.WriteLine($"    Status: {noteTag.Status}");
            Console.WriteLine($"    Label: {noteTag.Label}");
            Console.WriteLine($"    Icon: {noteTag.Icon}");
            Console.WriteLine($"    High Light: {noteTag.Highlight}");
        }
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.ITag.CompletedTime">
      <summary>
            Gets or sets the completed time.
            </summary>
      <value>
            The <see cref="T:System.Nullable`1" />.
            </value>
      <example>Shows how to access details of outlook's tasks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tasks = richText.Tags.OfType&lt;NoteTask&gt;();
    if (tasks.Any())
    {
        Console.WriteLine($"Task: {richText.Text}");
        foreach (var noteTask in tasks)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTask.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTask.CreationTime}");
            Console.WriteLine($"    Due Date: {noteTask.DueDate}");
            Console.WriteLine($"    Status: {noteTask.Status}");
            Console.WriteLine($"    Icon: {noteTask.Icon}");
        }
    }
}</code></example>
      <example>Shows how to access details of a tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "TagFile.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tags = richText.Tags.OfType&lt;NoteTag&gt;();
    if (tags.Any())
    {
        Console.WriteLine($"Text: {richText.Text}");
        foreach (var noteTag in tags)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTag.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTag.CreationTime}");
            Console.WriteLine($"    Font Color: {noteTag.FontColor}");
            Console.WriteLine($"    Status: {noteTag.Status}");
            Console.WriteLine($"    Label: {noteTag.Label}");
            Console.WriteLine($"    Icon: {noteTag.Icon}");
            Console.WriteLine($"    High Light: {noteTag.Highlight}");
        }
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.ITag.Status">
      <summary>
            Gets or sets the status.
            </summary>
      <value>
            The <see cref="T:Aspose.Note.TagStatus" />.
            </value>
      <example>Shows how to access details of outlook's tasks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tasks = richText.Tags.OfType&lt;NoteTask&gt;();
    if (tasks.Any())
    {
        Console.WriteLine($"Task: {richText.Text}");
        foreach (var noteTask in tasks)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTask.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTask.CreationTime}");
            Console.WriteLine($"    Due Date: {noteTask.DueDate}");
            Console.WriteLine($"    Status: {noteTask.Status}");
            Console.WriteLine($"    Icon: {noteTask.Icon}");
        }
    }
}</code></example>
      <example>Shows how to access details of a tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "TagFile.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tags = richText.Tags.OfType&lt;NoteTag&gt;();
    if (tags.Any())
    {
        Console.WriteLine($"Text: {richText.Text}");
        foreach (var noteTag in tags)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTag.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTag.CreationTime}");
            Console.WriteLine($"    Font Color: {noteTag.FontColor}");
            Console.WriteLine($"    Status: {noteTag.Status}");
            Console.WriteLine($"    Label: {noteTag.Label}");
            Console.WriteLine($"    Icon: {noteTag.Icon}");
            Console.WriteLine($"    High Light: {noteTag.Highlight}");
        }
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.ITag.Icon">
      <summary>
            Gets or sets the icon.
            </summary>
      <value>
            The <see cref="T:Aspose.Note.TagIcon" />.
            </value>
      <example>Shows how to access details of outlook's tasks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tasks = richText.Tags.OfType&lt;NoteTask&gt;();
    if (tasks.Any())
    {
        Console.WriteLine($"Task: {richText.Text}");
        foreach (var noteTask in tasks)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTask.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTask.CreationTime}");
            Console.WriteLine($"    Due Date: {noteTask.DueDate}");
            Console.WriteLine($"    Status: {noteTask.Status}");
            Console.WriteLine($"    Icon: {noteTask.Icon}");
        }
    }
}</code></example>
      <example>Shows how to access details of a tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "TagFile.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tags = richText.Tags.OfType&lt;NoteTag&gt;();
    if (tags.Any())
    {
        Console.WriteLine($"Text: {richText.Text}");
        foreach (var noteTag in tags)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTag.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTag.CreationTime}");
            Console.WriteLine($"    Font Color: {noteTag.FontColor}");
            Console.WriteLine($"    Status: {noteTag.Status}");
            Console.WriteLine($"    Label: {noteTag.Label}");
            Console.WriteLine($"    Icon: {noteTag.Icon}");
            Console.WriteLine($"    High Light: {noteTag.Highlight}");
        }
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.ITag.Label">
      <summary>
            Gets the label text.
            </summary>
      <example>Shows how to make completed all checkbox items related to 'Project C'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "ProjectNotes.one"));

foreach (var node in oneFile.GetChildNodes&lt;ITaggable&gt;())
{
    foreach (var checkBox in node.Tags.OfType&lt;CheckBox&gt;())
    {
        if (checkBox.Label.Contains("Project C") &amp;&amp; !checkBox.Checked)
        {
            checkBox.SetCompleted();
        }
    }
}

oneFile.Save(Path.Combine(dataDir, ClosedProjectCNotesFileName));</code></example>
      <example>Shows how to make open all checkbox items related to 'Project C'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, ClosedProjectCNotesFileName));

foreach (var node in oneFile.GetChildNodes&lt;ITaggable&gt;())
{
    foreach (var checkBox in node.Tags.OfType&lt;CheckBox&gt;())
    {
        if (checkBox.Label.Contains("Project C") &amp;&amp; checkBox.Checked)
        {
            checkBox.SetOpen();
        }
    }
}

oneFile.Save(Path.Combine(dataDir, "ProjectNoteWithOpenProjectC.one"));</code></example>
      <example>Shows how to access details of a tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "TagFile.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tags = richText.Tags.OfType&lt;NoteTag&gt;();
    if (tags.Any())
    {
        Console.WriteLine($"Text: {richText.Text}");
        foreach (var noteTag in tags)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTag.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTag.CreationTime}");
            Console.WriteLine($"    Font Color: {noteTag.FontColor}");
            Console.WriteLine($"    Status: {noteTag.Status}");
            Console.WriteLine($"    Label: {noteTag.Label}");
            Console.WriteLine($"    Icon: {noteTag.Icon}");
            Console.WriteLine($"    High Light: {noteTag.Highlight}");
        }
    }
}</code></example>
    </member>
    <member name="T:Aspose.Note.ITaggable">
      <summary>
            The interface for nodes that can be marked by tags.
            </summary>
      <example>Shows how to generate a pdf containing all pages related to 'Project A'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "ProjectNotes.one"));

var report = new Document();
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.Any(x =&gt; x.Label.Contains("Project A"))))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "ProjectA_Report.pdf"));</code></example>
      <example>Shows how to make completed all checkbox items related to 'Project C'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "ProjectNotes.one"));

foreach (var node in oneFile.GetChildNodes&lt;ITaggable&gt;())
{
    foreach (var checkBox in node.Tags.OfType&lt;CheckBox&gt;())
    {
        if (checkBox.Label.Contains("Project C") &amp;&amp; !checkBox.Checked)
        {
            checkBox.SetCompleted();
        }
    }
}

oneFile.Save(Path.Combine(dataDir, ClosedProjectCNotesFileName));</code></example>
      <example>Shows how to make open all checkbox items related to 'Project C'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, ClosedProjectCNotesFileName));

foreach (var node in oneFile.GetChildNodes&lt;ITaggable&gt;())
{
    foreach (var checkBox in node.Tags.OfType&lt;CheckBox&gt;())
    {
        if (checkBox.Label.Contains("Project C") &amp;&amp; checkBox.Checked)
        {
            checkBox.SetOpen();
        }
    }
}

oneFile.Save(Path.Combine(dataDir, "ProjectNoteWithOpenProjectC.one"));</code></example>
      <example>Shows how to generate a pdf containing pages with items marked by incomplete checkboxes and created during last week.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "TagFile.one"));

var report = new Document();
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.OfType&lt;CheckBox&gt;().Any(x =&gt; !x.Checked &amp;&amp; DateTime.UtcNow.Subtract(TimeSpan.FromDays(7)) &lt;= x.CreationTime)))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "IncompleteLastWeekReport.pdf"));</code></example>
      <example>Shows how to generate a pdf containing pages with Outlook incomplete tasks to complete on this week.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "TagFile.one"));

var report = new Document();
var endOfWeek = DateTime.Today.AddDays(5 - (int)DateTime.Today.DayOfWeek);
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.OfType&lt;NoteTask&gt;().Any(x =&gt; !x.Checked &amp;&amp; DateTime.UtcNow.Subtract(TimeSpan.FromDays(7)) &lt;= x.CreationTime &amp;&amp; x.DueDate &lt;= endOfWeek)))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "IncompleteTasksForThisWeekReport.pdf"));</code></example>
    </member>
    <member name="P:Aspose.Note.ITaggable.Tags">
      <summary>
            Gets the list of all tags.
            </summary>
    </member>
    <member name="T:Aspose.Note.Margins">
      <summary>
            Specifies the dimensions of the margins of a node.
            </summary>
    </member>
    <member name="M:Aspose.Note.Margins.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Margins" /> struct
            with the specified left, right, top, and bottom margins.
            </summary>
      <param name="left">
            The left margin width.
            </param>
      <param name="right">
            The right margin width.
            </param>
      <param name="top">
            The top margin width.
            </param>
      <param name="bottom">
            The bottom margin width.
            </param>
    </member>
    <member name="F:Aspose.Note.Margins.Empty">
      <summary>
            The empty margins.
            </summary>
    </member>
    <member name="M:Aspose.Note.Margins.op_Equality(Aspose.Note.Margins,Aspose.Note.Margins)">
      <summary>
            Tests whether two <see cref="T:Margins" /> structures are equal.
            </summary>
      <param name="lhs">
            The <see cref="T:Margins" /> structure.
            </param>
      <param name="rhs">
            The <see cref="T:Margins" /> structure to be compared with.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.Margins.op_Inequality(Aspose.Note.Margins,Aspose.Note.Margins)">
      <summary>
            Tests whether two <see cref="T:Margins" /> structures are not equal.
            </summary>
      <param name="lhs">
            The <see cref="T:Margins" /> structure.
            </param>
      <param name="rhs">
            The <see cref="T:Margins" /> structure to be compared with.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="P:Aspose.Note.Margins.Left">
      <summary>
            Gets or sets the left margin width.
            </summary>
    </member>
    <member name="P:Aspose.Note.Margins.Right">
      <summary>
            Gets or sets the right margin width.
            </summary>
    </member>
    <member name="P:Aspose.Note.Margins.Top">
      <summary>
            Gets or sets the top margin width.
            </summary>
    </member>
    <member name="P:Aspose.Note.Margins.Bottom">
      <summary>
            Gets or sets the bottom margin width.
            </summary>
    </member>
    <member name="M:Aspose.Note.Margins.Equals(Aspose.Note.Margins)">
      <summary>
            Tests whether two <see cref="T:Margins" /> structures are equal.
            </summary>
      <param name="other">
            The <see cref="T:Margins" /> structure.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.Margins.Equals(System.Object)">
      <summary>
            Tests whether two <see cref="T:Margins" /> structures are equal.
            </summary>
      <param name="obj">
            Any object.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.Margins.GetHashCode">
      <summary>
            Serves as a hash function for the type.
            </summary>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.NoteCheckBox">
      <summary>
            Represents a note tag that can toggle their state between complete and incomplete.
            </summary>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateBlueCheckBox1(System.String)">
      <summary>
            Creates a new note checkbox with BlueCheckBox1Empty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateBlueCheckBox2(System.String)">
      <summary>
            Creates a new note checkbox with BlueCheckBox2Empty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateBlueCheckBox3(System.String)">
      <summary>
            Creates a new note checkbox with BlueCheckBox3Empty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateBlueCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with BlueCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateBlueExclamationCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with BlueExclamationCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateBlueFlagCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with BlueFlagCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateBluePersonCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with BluePersonCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateBlueRightArrowCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with BlueRightArrowCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateBlueStarCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with BlueStarCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateGreenCheckBox1(System.String)">
      <summary>
            Creates a new note checkbox with GreenCheckBox1Empty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateGreenCheckBox2(System.String)">
      <summary>
            Creates a new note checkbox with GreenCheckBox2Empty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateGreenCheckBox3(System.String)">
      <summary>
            Creates a new note checkbox with GreenCheckBox3Empty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateGreenCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with GreenCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateGreenExclamationCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with GreenExclamationCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateGreenFlagCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with GreenFlagCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateGreenPersonCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with GreenPersonCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateGreenRightArrowCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with GreenRightArrowCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateGreenStarCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with GreenStarCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateRedFlagCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with RedFlagCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateYellowCheckBox1(System.String)">
      <summary>
            Creates a new note checkbox with YellowCheckBox1Empty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateYellowCheckBox2(System.String)">
      <summary>
            Creates a new note checkbox with YellowCheckBox2Empty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateYellowCheckBox3(System.String)">
      <summary>
            Creates a new note checkbox with YellowCheckBox3Empty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateYellowCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with YellowCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateYellowExclamationCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with YellowExclamationCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateYellowPersonCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with YellowPersonCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.CreateYellowRightArrowCheckBox(System.String)">
      <summary>
            Creates a new note checkbox with YellowRightArrowCheckBoxEmpty icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteCheckBox" />.
            </returns>
    </member>
    <member name="P:Aspose.Note.NoteCheckBox.Icon">
      <summary>
            Gets or sets the icon.
            </summary>
      <value>
            The <see cref="T:Aspose.Note.TagIcon" />.
            </value>
    </member>
    <member name="P:Aspose.Note.NoteCheckBox.Label">
      <summary>
            Gets or sets the label text.
            </summary>
    </member>
    <member name="P:Aspose.Note.NoteCheckBox.FontColor">
      <summary>
            Gets or sets the font color.
            </summary>
    </member>
    <member name="P:Aspose.Note.NoteCheckBox.Highlight">
      <summary>
            Gets or sets the highlight color.
            </summary>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="obj">
            The object.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.Equals(Aspose.Note.NoteCheckBox)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="other">
            The object.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteCheckBox.GetHashCode">
      <summary>
            Serves as a hash function for the type.
            </summary>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.NoteTag">
      <summary>
            Represents a note tag.
            </summary>
      <example>Shows how to add new image with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Load an image
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "icon.jpg");

// Insert image in the document node
outlineElem.AppendChildLast(image);
image.Tags.Add(NoteTag.CreateYellowStar());

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddImageNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to add new paragraph with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
RichText text = new RichText(doc) { Text = "OneNote text.", ParagraphStyle = textStyle };
text.Tags.Add(NoteTag.CreateYellowStar());

// Add text node
outlineElem.AppendChildLast(text);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddTextNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to access details of a tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "TagFile.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tags = richText.Tags.OfType&lt;NoteTag&gt;();
    if (tags.Any())
    {
        Console.WriteLine($"Text: {richText.Text}");
        foreach (var noteTag in tags)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTag.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTag.CreationTime}");
            Console.WriteLine($"    Font Color: {noteTag.FontColor}");
            Console.WriteLine($"    Status: {noteTag.Status}");
            Console.WriteLine($"    Label: {noteTag.Label}");
            Console.WriteLine($"    Icon: {noteTag.Icon}");
            Console.WriteLine($"    High Light: {noteTag.Highlight}");
        }
    }
}</code></example>
      <example>Shows how to add new table with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row = new TableRow(doc);

// Initialize TableCell class object
TableCell cell = new TableCell(doc);

// Insert cell content
cell.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Single cell."));

// Add cell to row node
row.AppendChildLast(cell);

// Initialize table node
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70 } }
              };

// Insert row node in table
table.AppendChildLast(row);

// Add tag to this table node
table.Tags.Add(NoteTag.CreateQuestionMark());

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline elements
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddTableNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to prepare a template for weekly meeting.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
var headerStyle = new ParagraphStyle() { FontName = "Calibri", FontSize = 16 };
var bodyStyle = new ParagraphStyle() { FontName = "Calibri", FontSize = 12 };

var d = new Document();
bool restartFlag = true;
var outline = d.AppendChildLast(new Page()
                                    {
                                        Title = new Title() { TitleText = new RichText() { Text = $"Weekly meeting {DateTime.Today:d}", ParagraphStyle = ParagraphStyle.Default } }
                                    })
               .AppendChildLast(new Outline() { VerticalOffset = 30, HorizontalOffset = 30 });

outline.AppendChildLast(new OutlineElement())
       .AppendChildLast(new RichText() { Text = "Important", ParagraphStyle = headerStyle });
foreach (var e in new[] { "First", "Second", "Third" })
{
    outline.AppendChildLast(new OutlineElement() { NumberList = CreateListNumberingStyle(bodyStyle, restartFlag) })
           .AppendChildLast(new RichText() { Text = e, ParagraphStyle = bodyStyle });
    restartFlag = false;
}

outline.AppendChildLast(new OutlineElement())
       .AppendChildLast(new RichText() { Text = "TO DO", ParagraphStyle = headerStyle, SpaceBefore = 15 });
restartFlag = true;
foreach (var e in new[] { "First", "Second", "Third" })
{
    outline.AppendChildLast(new OutlineElement() { NumberList = CreateListNumberingStyle(bodyStyle, restartFlag) })
           .AppendChildLast(new RichText() { Text = e, ParagraphStyle = bodyStyle, Tags = { NoteCheckBox.CreateBlueCheckBox() } });
    restartFlag = false;
}

d.Save(Path.Combine(dataDir, "meetingNotes.one"));</code></example>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateAwardRibbon(System.String)">
      <summary>
            Creates a new note tag with AwardRibbon icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBinoculars(System.String)">
      <summary>
            Creates a new note tag with Binoculars icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlankPaperWithLines(System.String)">
      <summary>
            Creates a new note tag with BlankPaperWithLines icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueCheckMark(System.String)">
      <summary>
            Creates a new note tag with BlueCheckMark icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueCircle(System.String)">
      <summary>
            Creates a new note tag with BlueCircle icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueCircle1(System.String)">
      <summary>
            Creates a new note tag with BlueCircle1 icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueCircle2(System.String)">
      <summary>
            Creates a new note tag with BlueCircle2 icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueCircle3(System.String)">
      <summary>
            Creates a new note tag with BlueCircle3 icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueDownArrow(System.String)">
      <summary>
            Creates a new note tag with BlueDownArrow icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueEightPointStar(System.String)">
      <summary>
            Creates a new note tag with BlueEightPointStar icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueFollowUpFlag(System.String)">
      <summary>
            Creates a new note tag with BlueFollowUpFlag icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueLeftArrow(System.String)">
      <summary>
            Creates a new note tag with BlueLeftArrow icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueRightArrow(System.String)">
      <summary>
            Creates a new note tag with BlueRightArrow icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueSolidTarget(System.String)">
      <summary>
            Creates a new note tag with BlueSolidTarget icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueSquare(System.String)">
      <summary>
            Creates a new note tag with BlueSquare icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueStar(System.String)">
      <summary>
            Creates a new note tag with BlueStar icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueSun(System.String)">
      <summary>
            Creates a new note tag with BlueSun icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueTarget(System.String)">
      <summary>
            Creates a new note tag with BlueTarget icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueTriangle(System.String)">
      <summary>
            Creates a new note tag with BlueTriangle icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueUmbrella(System.String)">
      <summary>
            Creates a new note tag with BlueUmbrella icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueUpArrow(System.String)">
      <summary>
            Creates a new note tag with BlueUpArrow icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueXNo(System.String)">
      <summary>
            Creates a new note tag with BlueXNo icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateBlueXWithDots(System.String)">
      <summary>
            Creates a new note tag with BlueXWithDots icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateCalendarDateWithClock(System.String)">
      <summary>
            Creates a new note tag with CalendarDateWithClock icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateCar(System.String)">
      <summary>
            Creates a new note tag with Car icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateClosedEnvelope(System.String)">
      <summary>
            Creates a new note tag with ClosedEnvelope icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateCloud(System.String)">
      <summary>
            Creates a new note tag with Cloud icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateCoinsWithWindowBackdrop(System.String)">
      <summary>
            Creates a new note tag with CoinsWithWindowBackdrop icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateCommentBubble(System.String)">
      <summary>
            Creates a new note tag with CommentBubble icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateContactInformation(System.String)">
      <summary>
            Creates a new note tag with ContactInformation icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateContactPersonOnCard(System.String)">
      <summary>
            Creates a new note tag with ContactPersonOnCard icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateDollarSign(System.String)">
      <summary>
            Creates a new note tag with DollarSign icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateEMailMessage(System.String)">
      <summary>
            Creates a new note tag with EMailMessage icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateFrowningFace(System.String)">
      <summary>
            Creates a new note tag with FrowningFace icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGlobe(System.String)">
      <summary>
            Creates a new note tag with Globe icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenCheckMark(System.String)">
      <summary>
            Creates a new note tag with GreenCheckMark icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenCircle(System.String)">
      <summary>
            Creates a new note tag with GreenCircle icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenCircle1(System.String)">
      <summary>
            Creates a new note tag with GreenCircle1 icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenCircle2(System.String)">
      <summary>
            Creates a new note tag with GreenCircle2 icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenCircle3(System.String)">
      <summary>
            Creates a new note tag with GreenCircle3 icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenDownArrow(System.String)">
      <summary>
            Creates a new note tag with GreenDownArrow icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenEightPointStar(System.String)">
      <summary>
            Creates a new note tag with GreenEightPointStar icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenLeftArrow(System.String)">
      <summary>
            Creates a new note tag with GreenLeftArrow icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenRightArrow(System.String)">
      <summary>
            Creates a new note tag with GreenRightArrow icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenSolidArrow(System.String)">
      <summary>
            Creates a new note tag with GreenSolidArrow icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenSquare(System.String)">
      <summary>
            Creates a new note tag with GreenSquare icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenStar(System.String)">
      <summary>
            Creates a new note tag with GreenStar icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenSun(System.String)">
      <summary>
            Creates a new note tag with GreenSun icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenTarget(System.String)">
      <summary>
            Creates a new note tag with GreenTarget icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenTriangle(System.String)">
      <summary>
            Creates a new note tag with GreenTriangle icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenUmbrella(System.String)">
      <summary>
            Creates a new note tag with GreenUmbrella icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenUpArrow(System.String)">
      <summary>
            Creates a new note tag with GreenUpArrow icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenXNo(System.String)">
      <summary>
            Creates a new note tag with GreenXNo icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateGreenXWithDots(System.String)">
      <summary>
            Creates a new note tag with GreenXWithDots icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateHeart(System.String)">
      <summary>
            Creates a new note tag with Heart icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateHighPriority(System.String)">
      <summary>
            Creates a new note tag with HighPriority icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateHome(System.String)">
      <summary>
            Creates a new note tag with Home icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateHyperlinkGlobe(System.String)">
      <summary>
            Creates a new note tag with HyperlinkGlobe icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateInstantMessagingContactPerson(System.String)">
      <summary>
            Creates a new note tag with InstantMessagingContactPerson icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateLaptop(System.String)">
      <summary>
            Creates a new note tag with Laptop icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateLightBulb(System.String)">
      <summary>
            Creates a new note tag with LightBulb icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateLightningBolt(System.String)">
      <summary>
            Creates a new note tag with LightningBolt icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateMeeting(System.String)">
      <summary>
            Creates a new note tag with Meeting icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateMobilePhone(System.String)">
      <summary>
            Creates a new note tag with MobilePhone icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateMovieClip(System.String)">
      <summary>
            Creates a new note tag with MovieClip icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateMusicalNote(System.String)">
      <summary>
            Creates a new note tag with MusicalNote icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateNoIcon(System.String)">
      <summary>
            Creates a new note tag without icon and with specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateNotebookWithClock(System.String)">
      <summary>
            Creates a new note tag with NotebookWithClock icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateOpenBook(System.String)">
      <summary>
            Creates a new note tag with OpenBook icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateOpenEnvelope(System.String)">
      <summary>
            Creates a new note tag with OpenEnvelope icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateOrangeSquare(System.String)">
      <summary>
            Creates a new note tag with OrangeSquare icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreatePadlock(System.String)">
      <summary>
            Creates a new note tag with Padlock icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreatePaperClip(System.String)">
      <summary>
            Creates a new note tag with PaperClip icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreatePen(System.String)">
      <summary>
            Creates a new note tag with Pen icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreatePersonWithExclamationMark(System.String)">
      <summary>
            Creates a new note tag with PersonWithExclamationMark icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreatePinkSquare(System.String)">
      <summary>
            Creates a new note tag with PinkSquare icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreatePlane(System.String)">
      <summary>
            Creates a new note tag with Plane icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreatePresentationSlide(System.String)">
      <summary>
            Creates a new note tag with PresentationSlide icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreatePushpin(System.String)">
      <summary>
            Creates a new note tag with Pushpin icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateQuestionBalloon(System.String)">
      <summary>
            Creates a new note tag with QuestionBalloon icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateQuestionMark(System.String)">
      <summary>
            Creates a new note tag with QuestionMark icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateQuotationMark(System.String)">
      <summary>
            Creates a new note tag with QuotationMark icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateRedSquare(System.String)">
      <summary>
            Creates a new note tag with RedSquare icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateReminderBell(System.String)">
      <summary>
            Creates a new note tag with ReminderBell icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateResearch(System.String)">
      <summary>
            Creates a new note tag with Research icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateRoseOnStem(System.String)">
      <summary>
            Creates a new note tag with RoseOnStem icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateScheduledTask(System.String)">
      <summary>
            Creates a new note tag with ScheduledTask icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateSmilingFace(System.String)">
      <summary>
            Creates a new note tag with SmilingFace icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateSunflower(System.String)">
      <summary>
            Creates a new note tag with Sunflower icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateTelephoneWithClock(System.String)">
      <summary>
            Creates a new note tag with TelephoneWithClock icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateTimeSensitive(System.String)">
      <summary>
            Creates a new note tag with TimeSensitive icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateTwoPeople(System.String)">
      <summary>
            Creates a new note tag with TwoPeople icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowCheckMark(System.String)">
      <summary>
            Creates a new note tag with YellowCheckMark icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowCircle(System.String)">
      <summary>
            Creates a new note tag with YellowCircle icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowCircle1(System.String)">
      <summary>
            Creates a new note tag with YellowCircle1 icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowCircle2(System.String)">
      <summary>
            Creates a new note tag with YellowCircle2 icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowCircle3(System.String)">
      <summary>
            Creates a new note tag with YellowCircle3 icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowDownArrow(System.String)">
      <summary>
            Creates a new note tag with YellowDownArrow icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowEightPointStar(System.String)">
      <summary>
            Creates a new note tag with YellowEightPointStar icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowKey(System.String)">
      <summary>
            Creates a new note tag with YellowKey icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowLeftArrow(System.String)">
      <summary>
            Creates a new note tag with YellowLeftArrow icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowRightArrow(System.String)">
      <summary>
            Creates a new note tag with YellowRightArrow icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowSolidTarget(System.String)">
      <summary>
            Creates a new note tag with YellowSolidTarget icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowSquare(System.String)">
      <summary>
            Creates a new note tag with YellowSquare icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowStar(System.String)">
      <summary>
            Creates a new note tag with YellowStar icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowSun(System.String)">
      <summary>
            Creates a new note tag with YellowSun icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowTarget(System.String)">
      <summary>
            Creates a new note tag with YellowTarget icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowTriangle(System.String)">
      <summary>
            Creates a new note tag with YellowTriangle icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowUmbrella(System.String)">
      <summary>
            Creates a new note tag with YellowUmbrella icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowUpArrow(System.String)">
      <summary>
            Creates a new note tag with YellowUpArrow icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowX(System.String)">
      <summary>
            Creates a new note tag with YellowX icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.CreateYellowXWithDots(System.String)">
      <summary>
            Creates a new note tag with YellowXWithDots icon and specified label.
            </summary>
      <param name="label">
            The tag's label.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTag" />.
            </returns>
    </member>
    <member name="P:Aspose.Note.NoteTag.CreationTime">
      <summary>
            Gets or sets the creation time.
            </summary>
      <value>
            The <see cref="T:System.DateTime" />.
            </value>
    </member>
    <member name="P:Aspose.Note.NoteTag.CompletedTime">
      <summary>
            Gets or sets the completed time.
            </summary>
      <value>
            The <see cref="T:System.Nullable`1" />.
            </value>
    </member>
    <member name="P:Aspose.Note.NoteTag.Status">
      <summary>
            Gets or sets the status.
            </summary>
      <value>
            The <see cref="T:Aspose.Note.TagStatus" />.
            </value>
    </member>
    <member name="P:Aspose.Note.NoteTag.Icon">
      <summary>
            Gets or sets the icon.
            </summary>
      <value>
            The <see cref="T:Aspose.Note.TagIcon" />.
            </value>
    </member>
    <member name="P:Aspose.Note.NoteTag.Label">
      <summary>
            Gets or sets the label text.
            </summary>
    </member>
    <member name="P:Aspose.Note.NoteTag.FontColor">
      <summary>
            Gets or sets the font color.
            </summary>
    </member>
    <member name="P:Aspose.Note.NoteTag.Highlight">
      <summary>
            Gets or sets the highlight color.
            </summary>
    </member>
    <member name="M:Aspose.Note.NoteTag.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="obj">
            The object.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.Equals(Aspose.Note.NoteTag)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="other">
            The object.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTag.GetHashCode">
      <summary>
            Serves as a hash function for the type.
            </summary>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.NoteTask">
      <summary>
            Represents a note task.
            </summary>
      <example>Shows how to generate a pdf containing all pages related to 'Project A'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "ProjectNotes.one"));

var report = new Document();
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.Any(x =&gt; x.Label.Contains("Project A"))))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "ProjectA_Report.pdf"));</code></example>
      <example>Shows how to access details of outlook's tasks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tasks = richText.Tags.OfType&lt;NoteTask&gt;();
    if (tasks.Any())
    {
        Console.WriteLine($"Task: {richText.Text}");
        foreach (var noteTask in tasks)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTask.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTask.CreationTime}");
            Console.WriteLine($"    Due Date: {noteTask.DueDate}");
            Console.WriteLine($"    Status: {noteTask.Status}");
            Console.WriteLine($"    Icon: {noteTask.Icon}");
        }
    }
}</code></example>
    </member>
    <member name="M:Aspose.Note.NoteTask.CreateFollowUpNextWeek">
      <summary>
            Creates a new note task with FollowUpNextWeekFlag icon.
            </summary>
      <returns>
            The <see cref="T:Aspose.Note.NoteTask" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTask.CreateFollowUpThisWeek">
      <summary>
            Creates a new note task with FollowUpThisWeekFlag icon.
            </summary>
      <returns>
            The <see cref="T:Aspose.Note.NoteTask" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTask.CreateFollowUpToday">
      <summary>
            Creates a new note task with FollowUpTodayFlag icon.
            </summary>
      <returns>
            The <see cref="T:Aspose.Note.NoteTask" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTask.CreateFollowUpTomorrow">
      <summary>
            Creates a new note task with FollowUpTomorrowFlag icon.
            </summary>
      <returns>
            The <see cref="T:Aspose.Note.NoteTask" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTask.CreateNoFollowUpDate">
      <summary>
            Creates a new note task with NoFollowUpDateFlag icon.
            </summary>
      <returns>
            The <see cref="T:Aspose.Note.NoteTask" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTask.CreateCustomFollowUpDate(System.DateTime)">
      <summary>
            Creates a new note task with NoFollowUpDateFlag icon and specified due date.
            </summary>
      <param name="dueDate">
            The due Date.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.NoteTask" />.
            </returns>
    </member>
    <member name="P:Aspose.Note.NoteTask.DueDate">
      <summary>
            Gets or sets the due date.
            </summary>
      <value>
            The <see cref="T:System.DateTime" />.
            </value>
      <example>Shows how to generate a pdf containing all pages related to 'Project A'.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
var oneFile = new Document(Path.Combine(dataDir, "ProjectNotes.one"));

var report = new Document();
foreach (var page in oneFile)
{
    if (page.GetChildNodes&lt;ITaggable&gt;().Any(e =&gt; e.Tags.Any(x =&gt; x.Label.Contains("Project A"))))
    {
        report.AppendChildLast(page.Clone());
    }
}

report.Save(Path.Combine(dataDir, "ProjectA_Report.pdf"));</code></example>
      <example>Shows how to access details of outlook's tasks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tasks = richText.Tags.OfType&lt;NoteTask&gt;();
    if (tasks.Any())
    {
        Console.WriteLine($"Task: {richText.Text}");
        foreach (var noteTask in tasks)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTask.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTask.CreationTime}");
            Console.WriteLine($"    Due Date: {noteTask.DueDate}");
            Console.WriteLine($"    Status: {noteTask.Status}");
            Console.WriteLine($"    Icon: {noteTask.Icon}");
        }
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.NoteTask.Icon">
      <summary>
            Gets or sets the icon.
            </summary>
      <value>
            The <see cref="T:Aspose.Note.TagIcon" />.
            </value>
    </member>
    <member name="M:Aspose.Note.NoteTask.SetOpen">
      <summary>
            Sets the tag to open state.
            </summary>
    </member>
    <member name="M:Aspose.Note.NoteTask.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="obj">
            The object.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTask.Equals(Aspose.Note.NoteTask)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="other">
            The object.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NoteTask.GetHashCode">
      <summary>
            Serves as a hash function for the type.
            </summary>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.NumberList">
      <summary>
            Represents the numbered or bulleted list.
            </summary>
      <example>Shows how to retrieve information about list's formatting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "ApplyNumberingOnText.one");

// Retrieve a collection nodes of the outline element
IList&lt;OutlineElement&gt; nodes = oneFile.GetChildNodes&lt;OutlineElement&gt;();

// Iterate through each node
foreach (OutlineElement node in nodes)
{
    if (node.NumberList != null)
    {
        NumberList list = node.NumberList;

        // Retrieve font name
        Console.WriteLine("Font Name: " + list.Font);

        // Retrieve font length
        Console.WriteLine("Font Length: " + list.Font.Length);

        // Retrieve font size
        Console.WriteLine("Font Size: " + list.FontSize);

        // Retrieve font color
        Console.WriteLine("Font Color: " + list.FontColor);

        // Retrieve format
        Console.WriteLine("Font format: " + list.Format);

        // Check bold
        Console.WriteLine("Is bold: " + list.IsBold);

        // Check italic
        Console.WriteLine("Is italic: " + list.IsItalic);
        Console.WriteLine();
    }
}</code></example>
      <example>Shows how to insert new list with chinese numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Initialize OneNote document
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize OneNote page
Aspose.Note.Page page = new Aspose.Note.Page(doc);
Outline outline = new Outline(doc);

// Apply text style settings
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

//------------------------
OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

//------------------------
OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

//------------------------
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "InsertChineseNumberList_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply numbering
// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyNumberingOnText_out.one"; 
doc.Save(dataDir);</code></example>
    </member>
    <member name="M:Aspose.Note.NumberList.#ctor(System.String,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.NumberList" /> class.
            This instance represents a bulleted list.
            </summary>
      <param name="bulletedSymbol">
            A symbol which represents a bullet.
            </param>
      <param name="font">A font for the bullet.</param>
      <param name="fontSize">A font size for the bullet.</param>
    </member>
    <member name="M:Aspose.Note.NumberList.#ctor(System.String,Aspose.Note.NumberFormat,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.NumberList" /> class.
            This instance represents a numbered list.
            </summary>
      <param name="format">
            The format of the numbered header.
            </param>
      <param name="numberFormat">
            The format of the number in header.
            </param>
      <param name="font">A font for the numbered header.</param>
      <param name="fontSize">A font size for the numbered header.</param>
    </member>
    <member name="P:Aspose.Note.NumberList.LastModifiedTime">
      <summary>
            Gets or sets the last modified time.
            </summary>
    </member>
    <member name="P:Aspose.Note.NumberList.Font">
      <summary>
            Gets or sets the name of the font.
            </summary>
      <example>Shows how to retrieve information about list's formatting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "ApplyNumberingOnText.one");

// Retrieve a collection nodes of the outline element
IList&lt;OutlineElement&gt; nodes = oneFile.GetChildNodes&lt;OutlineElement&gt;();

// Iterate through each node
foreach (OutlineElement node in nodes)
{
    if (node.NumberList != null)
    {
        NumberList list = node.NumberList;

        // Retrieve font name
        Console.WriteLine("Font Name: " + list.Font);

        // Retrieve font length
        Console.WriteLine("Font Length: " + list.Font.Length);

        // Retrieve font size
        Console.WriteLine("Font Size: " + list.FontSize);

        // Retrieve font color
        Console.WriteLine("Font Color: " + list.FontColor);

        // Retrieve format
        Console.WriteLine("Font format: " + list.Format);

        // Check bold
        Console.WriteLine("Is bold: " + list.IsBold);

        // Check italic
        Console.WriteLine("Is italic: " + list.IsItalic);
        Console.WriteLine();
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.NumberList.NumberFormat">
      <summary>
            Gets or sets the number format used for a group of automatically numbered objects. Should be null for bulleted lists.
            </summary>
    </member>
    <member name="P:Aspose.Note.NumberList.Format">
      <summary>
            Gets or sets the format of the line header. For bulleted lists represents a bullet symbol.
            </summary>
      <example>Shows how to retrieve information about list's formatting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "ApplyNumberingOnText.one");

// Retrieve a collection nodes of the outline element
IList&lt;OutlineElement&gt; nodes = oneFile.GetChildNodes&lt;OutlineElement&gt;();

// Iterate through each node
foreach (OutlineElement node in nodes)
{
    if (node.NumberList != null)
    {
        NumberList list = node.NumberList;

        // Retrieve font name
        Console.WriteLine("Font Name: " + list.Font);

        // Retrieve font length
        Console.WriteLine("Font Length: " + list.Font.Length);

        // Retrieve font size
        Console.WriteLine("Font Size: " + list.FontSize);

        // Retrieve font color
        Console.WriteLine("Font Color: " + list.FontColor);

        // Retrieve format
        Console.WriteLine("Font format: " + list.Format);

        // Check bold
        Console.WriteLine("Is bold: " + list.IsBold);

        // Check italic
        Console.WriteLine("Is italic: " + list.IsItalic);
        Console.WriteLine();
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.NumberList.IsBold">
      <summary>
            Gets or sets a value indicating whether the text style is bold.
            </summary>
      <example>Shows how to retrieve information about list's formatting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "ApplyNumberingOnText.one");

// Retrieve a collection nodes of the outline element
IList&lt;OutlineElement&gt; nodes = oneFile.GetChildNodes&lt;OutlineElement&gt;();

// Iterate through each node
foreach (OutlineElement node in nodes)
{
    if (node.NumberList != null)
    {
        NumberList list = node.NumberList;

        // Retrieve font name
        Console.WriteLine("Font Name: " + list.Font);

        // Retrieve font length
        Console.WriteLine("Font Length: " + list.Font.Length);

        // Retrieve font size
        Console.WriteLine("Font Size: " + list.FontSize);

        // Retrieve font color
        Console.WriteLine("Font Color: " + list.FontColor);

        // Retrieve format
        Console.WriteLine("Font format: " + list.Format);

        // Check bold
        Console.WriteLine("Is bold: " + list.IsBold);

        // Check italic
        Console.WriteLine("Is italic: " + list.IsItalic);
        Console.WriteLine();
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.NumberList.IsItalic">
      <summary>
            Gets or sets a value indicating whether the text style is italic.
            </summary>
      <example>Shows how to retrieve information about list's formatting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "ApplyNumberingOnText.one");

// Retrieve a collection nodes of the outline element
IList&lt;OutlineElement&gt; nodes = oneFile.GetChildNodes&lt;OutlineElement&gt;();

// Iterate through each node
foreach (OutlineElement node in nodes)
{
    if (node.NumberList != null)
    {
        NumberList list = node.NumberList;

        // Retrieve font name
        Console.WriteLine("Font Name: " + list.Font);

        // Retrieve font length
        Console.WriteLine("Font Length: " + list.Font.Length);

        // Retrieve font size
        Console.WriteLine("Font Size: " + list.FontSize);

        // Retrieve font color
        Console.WriteLine("Font Color: " + list.FontColor);

        // Retrieve format
        Console.WriteLine("Font format: " + list.Format);

        // Check bold
        Console.WriteLine("Is bold: " + list.IsBold);

        // Check italic
        Console.WriteLine("Is italic: " + list.IsItalic);
        Console.WriteLine();
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.NumberList.FontSize">
      <summary>
            Gets or sets the font size.
            </summary>
      <example>Shows how to retrieve information about list's formatting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "ApplyNumberingOnText.one");

// Retrieve a collection nodes of the outline element
IList&lt;OutlineElement&gt; nodes = oneFile.GetChildNodes&lt;OutlineElement&gt;();

// Iterate through each node
foreach (OutlineElement node in nodes)
{
    if (node.NumberList != null)
    {
        NumberList list = node.NumberList;

        // Retrieve font name
        Console.WriteLine("Font Name: " + list.Font);

        // Retrieve font length
        Console.WriteLine("Font Length: " + list.Font.Length);

        // Retrieve font size
        Console.WriteLine("Font Size: " + list.FontSize);

        // Retrieve font color
        Console.WriteLine("Font Color: " + list.FontColor);

        // Retrieve format
        Console.WriteLine("Font format: " + list.Format);

        // Check bold
        Console.WriteLine("Is bold: " + list.IsBold);

        // Check italic
        Console.WriteLine("Is italic: " + list.IsItalic);
        Console.WriteLine();
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.NumberList.FontColor">
      <summary>
            Gets or sets the font color.
            </summary>
      <example>Shows how to retrieve information about list's formatting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "ApplyNumberingOnText.one");

// Retrieve a collection nodes of the outline element
IList&lt;OutlineElement&gt; nodes = oneFile.GetChildNodes&lt;OutlineElement&gt;();

// Iterate through each node
foreach (OutlineElement node in nodes)
{
    if (node.NumberList != null)
    {
        NumberList list = node.NumberList;

        // Retrieve font name
        Console.WriteLine("Font Name: " + list.Font);

        // Retrieve font length
        Console.WriteLine("Font Length: " + list.Font.Length);

        // Retrieve font size
        Console.WriteLine("Font Size: " + list.FontSize);

        // Retrieve font color
        Console.WriteLine("Font Color: " + list.FontColor);

        // Retrieve format
        Console.WriteLine("Font format: " + list.Format);

        // Check bold
        Console.WriteLine("Is bold: " + list.IsBold);

        // Check italic
        Console.WriteLine("Is italic: " + list.IsItalic);
        Console.WriteLine();
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.NumberList.Restart">
      <summary>
            Gets or sets the numeric value that overrides the automatic number value of the list item.
            </summary>
    </member>
    <member name="M:Aspose.Note.NumberList.GetNumberedListHeader(System.Int32)">
      <summary>
            Gets the numbered list header.
            </summary>
      <param name="sequenceNumber">
            The sequence number in the numbered list.
            </param>
      <returns>
            A string representation of the specified sequence number.
            </returns>
    </member>
    <member name="M:Aspose.Note.NumberList.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="obj">
            The object.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NumberList.Equals(Aspose.Note.NumberList)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="other">
            The object.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.NumberList.GetHashCode">
      <summary>
            Serves as a hash function for the type.
            </summary>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.ParagraphStyle">
      <summary>
            Text style settings to be used if there is no matching TextStyle object in <see cref="P:Aspose.Note.RichText.Styles" /> collection either this object doesn't specify a needed setting.
            </summary>
      <example>Let's emphasize page's titles among other headers by increasing font's size.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Iterate through page's titles.
foreach (var title in document.Select(e =&gt; e.Title.TitleText))
{
    title.ParagraphStyle.FontSize = 24;
    title.ParagraphStyle.IsBold = true;

    foreach (var run in title.TextRuns)
    {
        run.Style.FontSize = 24;
        run.Style.IsBold = true;
    }
}

document.Save(Path.Combine(dataDir, "ChangePageTitleStyle.pdf"));</code></example>
      <example>Let's emphasize latest text's changes by highlighting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Get RichText nodes modified last week.
var richTextNodes = document.GetChildNodes&lt;RichText&gt;().Where(e =&gt; e.LastModifiedTime &gt;= DateTime.Today.Subtract(TimeSpan.FromDays(7)));

foreach (var node in richTextNodes)
{
    // Set highlight color
    node.ParagraphStyle.Highlight = Color.DarkGreen;
    foreach (var run in node.TextRuns)
    {
        // Set highlight color
        run.Style.Highlight = Color.DarkSeaGreen;
    }
}

document.Save(Path.Combine(dataDir, "HighlightAllRecentChanges.pdf"));</code></example>
      <example>Manipulate by text format using paragraph style.<code>
var document = new Document();
var page = new Page();
var outline = new Outline();
var outlineElem = new OutlineElement();

var text = new RichText() { ParagraphStyle = new ParagraphStyle() { FontName = "Courier New", FontSize = 20 } }
                .Append($"DefaultParagraphFontAndSize{Environment.NewLine}")
                .Append($"OnlyDefaultParagraphFont{Environment.NewLine}", new TextStyle() { FontSize = 14 })
                .Append("OnlyDefaultParagraphFontSize", new TextStyle() { FontName = "Verdana" });

outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
document.AppendChildLast(page);

document.Save(Path.Combine(RunExamples.GetDataDir_Text(), "SetDefaultParagraphStyle.one"));</code></example>
      <example>Shows how to insert new list with chinese numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Initialize OneNote document
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize OneNote page
Aspose.Note.Page page = new Aspose.Note.Page(doc);
Outline outline = new Outline(doc);

// Apply text style settings
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

//------------------------
OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

//------------------------
OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

//------------------------
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "InsertChineseNumberList_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new bulleted lis.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply bullets
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };

// Initialize RichText class object and apply text style
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);
// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyBulletsOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply numbering
// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyNumberingOnText_out.one"; 
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.ParagraphStyle.Default">
      <summary>
            Gets the ParagraphStyle with default settings.
            </summary>
    </member>
    <member name="M:Aspose.Note.ParagraphStyle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.ParagraphStyle" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Note.ParagraphStyle.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="obj">
            The object.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.ParagraphStyle.Equals(Aspose.Note.ParagraphStyle)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="other">
            The object.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.ParagraphStyle.GetHashCode">
      <summary>
            Serves as a hash function for the type.
            </summary>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.Style">
      <summary>
            This class contains common properties of <see cref="T:Aspose.Note.ParagraphStyle" /> and <see cref="T:Aspose.Note.TextStyle" /> classes.
            </summary>
    </member>
    <member name="M:Aspose.Note.Style.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Style" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Note.Style.IsBold">
      <summary>
            Gets or sets a value indicating whether the text style is bold.
            </summary>
      <example>Let's emphasize page's titles among other headers by increasing font's size.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Iterate through page's titles.
foreach (var title in document.Select(e =&gt; e.Title.TitleText))
{
    title.ParagraphStyle.FontSize = 24;
    title.ParagraphStyle.IsBold = true;

    foreach (var run in title.TextRuns)
    {
        run.Style.FontSize = 24;
        run.Style.IsBold = true;
    }
}

document.Save(Path.Combine(dataDir, "ChangePageTitleStyle.pdf"));</code></example>
      <example>Let's emphasize latest text's changes by highlighting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Get RichText nodes modified last week.
var richTextNodes = document.GetChildNodes&lt;RichText&gt;().Where(e =&gt; e.LastModifiedTime &gt;= DateTime.Today.Subtract(TimeSpan.FromDays(7)));

foreach (var node in richTextNodes)
{
    // Set highlight color
    node.ParagraphStyle.Highlight = Color.DarkGreen;
    foreach (var run in node.TextRuns)
    {
        // Set highlight color
        run.Style.Highlight = Color.DarkSeaGreen;
    }
}

document.Save(Path.Combine(dataDir, "HighlightAllRecentChanges.pdf"));</code></example>
    </member>
    <member name="P:Aspose.Note.Style.IsItalic">
      <summary>
            Gets or sets a value indicating whether the text style is italic.
            </summary>
    </member>
    <member name="P:Aspose.Note.Style.IsUnderline">
      <summary>
            Gets or sets a value indicating whether the text style is underline.
            </summary>
    </member>
    <member name="P:Aspose.Note.Style.IsStrikethrough">
      <summary>
            Gets or sets a value indicating whether the text style is strikethrough.
            </summary>
    </member>
    <member name="P:Aspose.Note.Style.IsSuperscript">
      <summary>
            Gets or sets a value indicating whether the text style is superscript.
            </summary>
    </member>
    <member name="P:Aspose.Note.Style.IsSubscript">
      <summary>
            Gets or sets a value indicating whether the text style is subscript.
            </summary>
    </member>
    <member name="P:Aspose.Note.Style.FontName">
      <summary>
            Gets or sets the font name.
            </summary>
      <example>Manipulate by text format using paragraph style.<code>
var document = new Document();
var page = new Page();
var outline = new Outline();
var outlineElem = new OutlineElement();

var text = new RichText() { ParagraphStyle = new ParagraphStyle() { FontName = "Courier New", FontSize = 20 } }
                .Append($"DefaultParagraphFontAndSize{Environment.NewLine}")
                .Append($"OnlyDefaultParagraphFont{Environment.NewLine}", new TextStyle() { FontSize = 14 })
                .Append("OnlyDefaultParagraphFontSize", new TextStyle() { FontName = "Verdana" });

outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
document.AppendChildLast(page);

document.Save(Path.Combine(RunExamples.GetDataDir_Text(), "SetDefaultParagraphStyle.one"));</code></example>
      <example>Shows how to insert new list with chinese numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Initialize OneNote document
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize OneNote page
Aspose.Note.Page page = new Aspose.Note.Page(doc);
Outline outline = new Outline(doc);

// Apply text style settings
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

//------------------------
OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

//------------------------
OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

//------------------------
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "InsertChineseNumberList_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new bulleted lis.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply bullets
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };

// Initialize RichText class object and apply text style
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);
// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyBulletsOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply numbering
// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyNumberingOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to bind a hyperlink to a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Create an object of the Document class
Document doc = new Document();

RichText titleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append("Title!");

Outline outline = new Outline()
                      {
                          MaxWidth = 200,
                          MaxHeight = 200,
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };

TextStyle textStyleRed = new TextStyle
                             {
                                 FontColor = Color.Red,
                                 FontName = "Arial",
                                 FontSize = 10,
                             };

TextStyle textStyleHyperlink = new TextStyle
                                   {
                                       IsHyperlink = true,
                                       HyperlinkAddress = "www.google.com"
                                   };

RichText text = new RichText() { ParagraphStyle = ParagraphStyle.Default }
                    .Append("This is ", textStyleRed)
                    .Append("hyperlink", textStyleHyperlink)
                    .Append(". This text is not a hyperlink.", TextStyle.Default);

OutlineElement outlineElem = new OutlineElement();
outlineElem.AppendChildLast(text);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Initialize Title class object
Title title = new Title() { TitleText = titleText };

// Initialize Page class object
Page page = new Note.Page() { Title = title };

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddHyperlink_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.Style.FontSize">
      <summary>
            Gets or sets the font size.
            </summary>
      <example>Shows how to change style for a text.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Get a particular RichText node
RichText richText = document.GetChildNodes&lt;RichText&gt;().First();

foreach (var run in richText.TextRuns)
{
    // Set font color
    run.Style.FontColor = Color.Yellow;

    // Set highlight color
    run.Style.Highlight = Color.Blue;

    // Set font size
    run.Style.FontSize = 20;
}</code></example>
      <example>Let's emphasize page's titles among other headers by increasing font's size.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Iterate through page's titles.
foreach (var title in document.Select(e =&gt; e.Title.TitleText))
{
    title.ParagraphStyle.FontSize = 24;
    title.ParagraphStyle.IsBold = true;

    foreach (var run in title.TextRuns)
    {
        run.Style.FontSize = 24;
        run.Style.IsBold = true;
    }
}

document.Save(Path.Combine(dataDir, "ChangePageTitleStyle.pdf"));</code></example>
      <example>Let's emphasize latest text's changes by highlighting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Get RichText nodes modified last week.
var richTextNodes = document.GetChildNodes&lt;RichText&gt;().Where(e =&gt; e.LastModifiedTime &gt;= DateTime.Today.Subtract(TimeSpan.FromDays(7)));

foreach (var node in richTextNodes)
{
    // Set highlight color
    node.ParagraphStyle.Highlight = Color.DarkGreen;
    foreach (var run in node.TextRuns)
    {
        // Set highlight color
        run.Style.Highlight = Color.DarkSeaGreen;
    }
}

document.Save(Path.Combine(dataDir, "HighlightAllRecentChanges.pdf"));</code></example>
      <example>Manipulate by text format using paragraph style.<code>
var document = new Document();
var page = new Page();
var outline = new Outline();
var outlineElem = new OutlineElement();

var text = new RichText() { ParagraphStyle = new ParagraphStyle() { FontName = "Courier New", FontSize = 20 } }
                .Append($"DefaultParagraphFontAndSize{Environment.NewLine}")
                .Append($"OnlyDefaultParagraphFont{Environment.NewLine}", new TextStyle() { FontSize = 14 })
                .Append("OnlyDefaultParagraphFontSize", new TextStyle() { FontName = "Verdana" });

outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
document.AppendChildLast(page);

document.Save(Path.Combine(RunExamples.GetDataDir_Text(), "SetDefaultParagraphStyle.one"));</code></example>
      <example>Shows how to insert new list with chinese numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Initialize OneNote document
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize OneNote page
Aspose.Note.Page page = new Aspose.Note.Page(doc);
Outline outline = new Outline(doc);

// Apply text style settings
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

//------------------------
OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

//------------------------
OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

//------------------------
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "InsertChineseNumberList_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new bulleted lis.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply bullets
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };

// Initialize RichText class object and apply text style
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);
// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyBulletsOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply numbering
// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyNumberingOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to bind a hyperlink to a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Create an object of the Document class
Document doc = new Document();

RichText titleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append("Title!");

Outline outline = new Outline()
                      {
                          MaxWidth = 200,
                          MaxHeight = 200,
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };

TextStyle textStyleRed = new TextStyle
                             {
                                 FontColor = Color.Red,
                                 FontName = "Arial",
                                 FontSize = 10,
                             };

TextStyle textStyleHyperlink = new TextStyle
                                   {
                                       IsHyperlink = true,
                                       HyperlinkAddress = "www.google.com"
                                   };

RichText text = new RichText() { ParagraphStyle = ParagraphStyle.Default }
                    .Append("This is ", textStyleRed)
                    .Append("hyperlink", textStyleHyperlink)
                    .Append(". This text is not a hyperlink.", TextStyle.Default);

OutlineElement outlineElem = new OutlineElement();
outlineElem.AppendChildLast(text);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Initialize Title class object
Title title = new Title() { TitleText = titleText };

// Initialize Page class object
Page page = new Note.Page() { Title = title };

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddHyperlink_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to compose a table having text with various styles.<code>
string dataDir = RunExamples.GetDataDir_Text();

var headerText = new RichText() { ParagraphStyle = new ParagraphStyle() { FontSize = 18, IsBold = true }, Alignment = HorizontalAlignment.Center }
                    .Append("Super contest for suppliers.");

var page = new Page();
var outline = page.AppendChildLast(new Outline() { HorizontalOffset = 50 });
outline.AppendChildLast(new OutlineElement()).AppendChildLast(headerText);

// Summary text before table
var bodyTextHeader = outline.AppendChildLast(new OutlineElement()).AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default });
bodyTextHeader.Append("This is the final ranking of proposals got from our suppliers.");

var ranking = outline.AppendChildLast(new OutlineElement()).AppendChildLast(new Table());
var headerRow = ranking.AppendChildFirst(new TableRow());

var headerStyle = ParagraphStyle.Default;
headerStyle.IsBold = true;

// Let's add a set of columns and a header row
var backGroundColor = Color.LightGray;
foreach (var header in new[] { "Supplier", "Contacts", "Score A", "Score B", "Score C", "Final score", "Attached materials", "Comments" })
{
    ranking.Columns.Add(new TableColumn());
    headerRow.AppendChildLast(new TableCell() { BackgroundColor = backGroundColor })
             .AppendChildLast(new OutlineElement())
             .AppendChildLast(new RichText() { ParagraphStyle = headerStyle })
                .Append(header);
}

// Let's 5 empty rows. Rows have interchanging background color
for (int i = 0; i &lt; 5; i++)
{
    backGroundColor = backGroundColor.IsEmpty ? Color.LightGray : Color.Empty;

    var row = ranking.AppendChildLast(new TableRow());
    for (int j = 0; j &lt; ranking.Columns.Count(); j++)
    {
        row.AppendChildLast(new TableCell() { BackgroundColor = backGroundColor })
           .AppendChildLast(new OutlineElement())
           .AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default });
    }
}

// Let's add some template for content in 'Contacts' column
foreach (var row in ranking.Skip(1))
{
    var contactsCell = row.ElementAt(1);
    contactsCell.AppendChildLast(new OutlineElement())
                .AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default })
                    .Append("Web: ").Append("link", new TextStyle() { HyperlinkAddress = "www.link.com", IsHyperlink = true });
    contactsCell.AppendChildLast(new OutlineElement())
                .AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default })
                    .Append("E-mail: ").Append("mail", new TextStyle() { HyperlinkAddress = "mailto:hi@link.com", IsHyperlink = true });
}

var d = new Document();
d.AppendChildLast(page);
d.Save(Path.Combine(dataDir, "ComposeTable_out.one"));</code></example>
    </member>
    <member name="P:Aspose.Note.Style.FontColor">
      <summary>
            Gets or sets the font color.
            </summary>
      <example>Shows how to change style for a text.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Get a particular RichText node
RichText richText = document.GetChildNodes&lt;RichText&gt;().First();

foreach (var run in richText.TextRuns)
{
    // Set font color
    run.Style.FontColor = Color.Yellow;

    // Set highlight color
    run.Style.Highlight = Color.Blue;

    // Set font size
    run.Style.FontSize = 20;
}</code></example>
      <example>Shows how to apply Dark theme style to a Document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document doc = new Document(Path.Combine(dataDir, "Aspose.one"));

foreach (var page in doc)
{
    page.BackgroundColor = Color.Black;
}

foreach (var node in doc.GetChildNodes&lt;RichText&gt;())
{
    var c = node.ParagraphStyle.FontColor;
    if (c.IsEmpty || Math.Abs(c.R - Color.Black.R) + Math.Abs(c.G - Color.Black.G) + Math.Abs(c.B - Color.Black.B) &lt;= 30)
    {
        node.ParagraphStyle.FontColor = Color.White;
    }
}

doc.Save(Path.Combine(dataDir, "AsposeDarkTheme.pdf"));</code></example>
      <example>Shows how to insert new list with chinese numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Initialize OneNote document
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize OneNote page
Aspose.Note.Page page = new Aspose.Note.Page(doc);
Outline outline = new Outline(doc);

// Apply text style settings
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

//------------------------
OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

//------------------------
OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

//------------------------
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "InsertChineseNumberList_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new bulleted lis.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply bullets
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };

// Initialize RichText class object and apply text style
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);
// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyBulletsOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply numbering
// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyNumberingOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to bind a hyperlink to a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Create an object of the Document class
Document doc = new Document();

RichText titleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append("Title!");

Outline outline = new Outline()
                      {
                          MaxWidth = 200,
                          MaxHeight = 200,
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };

TextStyle textStyleRed = new TextStyle
                             {
                                 FontColor = Color.Red,
                                 FontName = "Arial",
                                 FontSize = 10,
                             };

TextStyle textStyleHyperlink = new TextStyle
                                   {
                                       IsHyperlink = true,
                                       HyperlinkAddress = "www.google.com"
                                   };

RichText text = new RichText() { ParagraphStyle = ParagraphStyle.Default }
                    .Append("This is ", textStyleRed)
                    .Append("hyperlink", textStyleHyperlink)
                    .Append(". This text is not a hyperlink.", TextStyle.Default);

OutlineElement outlineElem = new OutlineElement();
outlineElem.AppendChildLast(text);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Initialize Title class object
Title title = new Title() { TitleText = titleText };

// Initialize Page class object
Page page = new Note.Page() { Title = title };

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddHyperlink_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to compose a table having text with various styles.<code>
string dataDir = RunExamples.GetDataDir_Text();

var headerText = new RichText() { ParagraphStyle = new ParagraphStyle() { FontSize = 18, IsBold = true }, Alignment = HorizontalAlignment.Center }
                    .Append("Super contest for suppliers.");

var page = new Page();
var outline = page.AppendChildLast(new Outline() { HorizontalOffset = 50 });
outline.AppendChildLast(new OutlineElement()).AppendChildLast(headerText);

// Summary text before table
var bodyTextHeader = outline.AppendChildLast(new OutlineElement()).AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default });
bodyTextHeader.Append("This is the final ranking of proposals got from our suppliers.");

var ranking = outline.AppendChildLast(new OutlineElement()).AppendChildLast(new Table());
var headerRow = ranking.AppendChildFirst(new TableRow());

var headerStyle = ParagraphStyle.Default;
headerStyle.IsBold = true;

// Let's add a set of columns and a header row
var backGroundColor = Color.LightGray;
foreach (var header in new[] { "Supplier", "Contacts", "Score A", "Score B", "Score C", "Final score", "Attached materials", "Comments" })
{
    ranking.Columns.Add(new TableColumn());
    headerRow.AppendChildLast(new TableCell() { BackgroundColor = backGroundColor })
             .AppendChildLast(new OutlineElement())
             .AppendChildLast(new RichText() { ParagraphStyle = headerStyle })
                .Append(header);
}

// Let's 5 empty rows. Rows have interchanging background color
for (int i = 0; i &lt; 5; i++)
{
    backGroundColor = backGroundColor.IsEmpty ? Color.LightGray : Color.Empty;

    var row = ranking.AppendChildLast(new TableRow());
    for (int j = 0; j &lt; ranking.Columns.Count(); j++)
    {
        row.AppendChildLast(new TableCell() { BackgroundColor = backGroundColor })
           .AppendChildLast(new OutlineElement())
           .AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default });
    }
}

// Let's add some template for content in 'Contacts' column
foreach (var row in ranking.Skip(1))
{
    var contactsCell = row.ElementAt(1);
    contactsCell.AppendChildLast(new OutlineElement())
                .AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default })
                    .Append("Web: ").Append("link", new TextStyle() { HyperlinkAddress = "www.link.com", IsHyperlink = true });
    contactsCell.AppendChildLast(new OutlineElement())
                .AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default })
                    .Append("E-mail: ").Append("mail", new TextStyle() { HyperlinkAddress = "mailto:hi@link.com", IsHyperlink = true });
}

var d = new Document();
d.AppendChildLast(page);
d.Save(Path.Combine(dataDir, "ComposeTable_out.one"));</code></example>
    </member>
    <member name="P:Aspose.Note.Style.Highlight">
      <summary>
            Gets or sets the highlight color.
            </summary>
      <example>Shows how to change style for a text.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Get a particular RichText node
RichText richText = document.GetChildNodes&lt;RichText&gt;().First();

foreach (var run in richText.TextRuns)
{
    // Set font color
    run.Style.FontColor = Color.Yellow;

    // Set highlight color
    run.Style.Highlight = Color.Blue;

    // Set font size
    run.Style.FontSize = 20;
}</code></example>
      <example>Shows how to compose a table having text with various styles.<code>
string dataDir = RunExamples.GetDataDir_Text();

var headerText = new RichText() { ParagraphStyle = new ParagraphStyle() { FontSize = 18, IsBold = true }, Alignment = HorizontalAlignment.Center }
                    .Append("Super contest for suppliers.");

var page = new Page();
var outline = page.AppendChildLast(new Outline() { HorizontalOffset = 50 });
outline.AppendChildLast(new OutlineElement()).AppendChildLast(headerText);

// Summary text before table
var bodyTextHeader = outline.AppendChildLast(new OutlineElement()).AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default });
bodyTextHeader.Append("This is the final ranking of proposals got from our suppliers.");

var ranking = outline.AppendChildLast(new OutlineElement()).AppendChildLast(new Table());
var headerRow = ranking.AppendChildFirst(new TableRow());

var headerStyle = ParagraphStyle.Default;
headerStyle.IsBold = true;

// Let's add a set of columns and a header row
var backGroundColor = Color.LightGray;
foreach (var header in new[] { "Supplier", "Contacts", "Score A", "Score B", "Score C", "Final score", "Attached materials", "Comments" })
{
    ranking.Columns.Add(new TableColumn());
    headerRow.AppendChildLast(new TableCell() { BackgroundColor = backGroundColor })
             .AppendChildLast(new OutlineElement())
             .AppendChildLast(new RichText() { ParagraphStyle = headerStyle })
                .Append(header);
}

// Let's 5 empty rows. Rows have interchanging background color
for (int i = 0; i &lt; 5; i++)
{
    backGroundColor = backGroundColor.IsEmpty ? Color.LightGray : Color.Empty;

    var row = ranking.AppendChildLast(new TableRow());
    for (int j = 0; j &lt; ranking.Columns.Count(); j++)
    {
        row.AppendChildLast(new TableCell() { BackgroundColor = backGroundColor })
           .AppendChildLast(new OutlineElement())
           .AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default });
    }
}

// Let's add some template for content in 'Contacts' column
foreach (var row in ranking.Skip(1))
{
    var contactsCell = row.ElementAt(1);
    contactsCell.AppendChildLast(new OutlineElement())
                .AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default })
                    .Append("Web: ").Append("link", new TextStyle() { HyperlinkAddress = "www.link.com", IsHyperlink = true });
    contactsCell.AppendChildLast(new OutlineElement())
                .AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default })
                    .Append("E-mail: ").Append("mail", new TextStyle() { HyperlinkAddress = "mailto:hi@link.com", IsHyperlink = true });
}

var d = new Document();
d.AppendChildLast(page);
d.Save(Path.Combine(dataDir, "ComposeTable_out.one"));</code></example>
    </member>
    <member name="P:Aspose.Note.Style.FontStyle">
      <summary>
            Gets the font style.
            </summary>
    </member>
    <member name="M:Aspose.Note.Style.GetHashCode">
      <summary>
            Serves as a hash function for the type.
            </summary>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.TableColumn">
      <summary>
            Represents a table column.
            </summary>
      <example>Shows how to set a background color for a cell.<code>
// Create an object of the Document class
Document doc = new Document();

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
cell11.BackgroundColor = Color.Coral;

// Initialize TableRow class object
TableRow row = new TableRow(doc);
row.AppendChildLast(cell11);

Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn() { Width = 200 } }
              };
table.AppendChildLast(row);

OutlineElement oe = new OutlineElement(doc);
oe.AppendChildLast(table);

Outline o = new Outline(doc);
o.AppendChildLast(oe);

// Initialize Page class object
Page page = new Page(doc);
page.AppendChildLast(o);

doc.AppendChildLast(page);

doc.Save(Path.Combine(RunExamples.GetDataDir_Tables(), "SettingCellBackGroundColor.pdf"));</code></example>
      <example>Shows how to add new table with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row = new TableRow(doc);

// Initialize TableCell class object
TableCell cell = new TableCell(doc);

// Insert cell content
cell.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Single cell."));

// Add cell to row node
row.AppendChildLast(cell);

// Initialize table node
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70 } }
              };

// Insert row node in table
table.AppendChildLast(row);

// Add tag to this table node
table.Tags.Add(NoteTag.CreateQuestionMark());

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline elements
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddTableNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a table with a locked column.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
row1.AppendChildLast(cell11);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell21 = new TableCell(doc);
cell21.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Long   text    with    several   words and    spaces."));
row2.AppendChildLast(cell21);

// Initialize Table class object
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70, LockedWidth = true } }
              };

// Add rows
table.AppendChildLast(row1);
table.AppendChildLast(row2);

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);
dataDir = dataDir + "CreateTableWithLockedColumns_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a new table.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class objects
TableCell cell11 = new TableCell(doc);
TableCell cell12 = new TableCell(doc);
TableCell cell13 = new TableCell(doc);

// Append outline elements in the table cell
cell11.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.1"));
cell12.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.2"));
cell13.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.3"));

// Table cells to rows
row1.AppendChildLast(cell11);
row1.AppendChildLast(cell12);
row1.AppendChildLast(cell13);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// initialize TableCell class objects
TableCell cell21 = new TableCell(doc);
TableCell cell22 = new TableCell(doc);
TableCell cell23 = new TableCell(doc);

// Append outline elements in the table cell
cell21.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.1"));
cell22.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.2"));
cell23.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.3"));

// Append table cells to rows
row2.AppendChildLast(cell21);
row2.AppendChildLast(cell22);
row2.AppendChildLast(cell23);

// Initialize Table class object and set column widths
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 200 }, new TableColumn { Width = 200 }, new TableColumn { Width = 200 } }
              };

// Append table rows to table
table.AppendChildLast(row1);
table.AppendChildLast(row2);

// Initialize Outline object
Outline outline = new Outline(doc);

// Initialize OutlineElement object
OutlineElement outlineElem = new OutlineElement(doc);

// Add table to outline element node
outlineElem.AppendChildLast(table);

// Add outline element to outline
outline.AppendChildLast(outlineElem);

// Add outline to page node
page.AppendChildLast(outline);

// Add page to document node
doc.AppendChildLast(page);
dataDir = dataDir + "InsertTable_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.TableColumn.Width">
      <summary>
            Gets or sets the width.
            </summary>
      <example>Shows how to set a background color for a cell.<code>
// Create an object of the Document class
Document doc = new Document();

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
cell11.BackgroundColor = Color.Coral;

// Initialize TableRow class object
TableRow row = new TableRow(doc);
row.AppendChildLast(cell11);

Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn() { Width = 200 } }
              };
table.AppendChildLast(row);

OutlineElement oe = new OutlineElement(doc);
oe.AppendChildLast(table);

Outline o = new Outline(doc);
o.AppendChildLast(oe);

// Initialize Page class object
Page page = new Page(doc);
page.AppendChildLast(o);

doc.AppendChildLast(page);

doc.Save(Path.Combine(RunExamples.GetDataDir_Tables(), "SettingCellBackGroundColor.pdf"));</code></example>
      <example>Shows how to add new table with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row = new TableRow(doc);

// Initialize TableCell class object
TableCell cell = new TableCell(doc);

// Insert cell content
cell.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Single cell."));

// Add cell to row node
row.AppendChildLast(cell);

// Initialize table node
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70 } }
              };

// Insert row node in table
table.AppendChildLast(row);

// Add tag to this table node
table.Tags.Add(NoteTag.CreateQuestionMark());

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline elements
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddTableNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a table with a locked column.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
row1.AppendChildLast(cell11);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell21 = new TableCell(doc);
cell21.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Long   text    with    several   words and    spaces."));
row2.AppendChildLast(cell21);

// Initialize Table class object
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70, LockedWidth = true } }
              };

// Add rows
table.AppendChildLast(row1);
table.AppendChildLast(row2);

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);
dataDir = dataDir + "CreateTableWithLockedColumns_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a new table.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class objects
TableCell cell11 = new TableCell(doc);
TableCell cell12 = new TableCell(doc);
TableCell cell13 = new TableCell(doc);

// Append outline elements in the table cell
cell11.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.1"));
cell12.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.2"));
cell13.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.3"));

// Table cells to rows
row1.AppendChildLast(cell11);
row1.AppendChildLast(cell12);
row1.AppendChildLast(cell13);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// initialize TableCell class objects
TableCell cell21 = new TableCell(doc);
TableCell cell22 = new TableCell(doc);
TableCell cell23 = new TableCell(doc);

// Append outline elements in the table cell
cell21.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.1"));
cell22.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.2"));
cell23.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.3"));

// Append table cells to rows
row2.AppendChildLast(cell21);
row2.AppendChildLast(cell22);
row2.AppendChildLast(cell23);

// Initialize Table class object and set column widths
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 200 }, new TableColumn { Width = 200 }, new TableColumn { Width = 200 } }
              };

// Append table rows to table
table.AppendChildLast(row1);
table.AppendChildLast(row2);

// Initialize Outline object
Outline outline = new Outline(doc);

// Initialize OutlineElement object
OutlineElement outlineElem = new OutlineElement(doc);

// Add table to outline element node
outlineElem.AppendChildLast(table);

// Add outline element to outline
outline.AppendChildLast(outlineElem);

// Add outline to page node
page.AppendChildLast(outline);

// Add page to document node
doc.AppendChildLast(page);
dataDir = dataDir + "InsertTable_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.TableColumn.LockedWidth">
      <summary>
            Gets or sets a value indicating whether a table column has locked width and does not resize automatically to fit table content.
            By default, column width is not locked.
            </summary>
      <example>Shows how to create a table with a locked column.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
row1.AppendChildLast(cell11);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell21 = new TableCell(doc);
cell21.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Long   text    with    several   words and    spaces."));
row2.AppendChildLast(cell21);

// Initialize Table class object
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70, LockedWidth = true } }
              };

// Add rows
table.AppendChildLast(row1);
table.AppendChildLast(row2);

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);
dataDir = dataDir + "CreateTableWithLockedColumns_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="T:Aspose.Note.TextStyle">
      <summary>
            Specifies the text style.
            </summary>
      <example>Let's emphasize page's titles among other headers by increasing font's size.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Iterate through page's titles.
foreach (var title in document.Select(e =&gt; e.Title.TitleText))
{
    title.ParagraphStyle.FontSize = 24;
    title.ParagraphStyle.IsBold = true;

    foreach (var run in title.TextRuns)
    {
        run.Style.FontSize = 24;
        run.Style.IsBold = true;
    }
}

document.Save(Path.Combine(dataDir, "ChangePageTitleStyle.pdf"));</code></example>
      <example>Let's emphasize latest text's changes by highlighting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Get RichText nodes modified last week.
var richTextNodes = document.GetChildNodes&lt;RichText&gt;().Where(e =&gt; e.LastModifiedTime &gt;= DateTime.Today.Subtract(TimeSpan.FromDays(7)));

foreach (var node in richTextNodes)
{
    // Set highlight color
    node.ParagraphStyle.Highlight = Color.DarkGreen;
    foreach (var run in node.TextRuns)
    {
        // Set highlight color
        run.Style.Highlight = Color.DarkSeaGreen;
    }
}

document.Save(Path.Combine(dataDir, "HighlightAllRecentChanges.pdf"));</code></example>
      <example>Set proofing language for a text.<code>
var document = new Document();
var page = new Page();
var outline = new Outline();
var outlineElem = new OutlineElement();

var text = new RichText() { ParagraphStyle = ParagraphStyle.Default };
text.Append("United States", new TextStyle() { Language = CultureInfo.GetCultureInfo("en-US") })
    .Append(" Germany", new TextStyle() { Language = CultureInfo.GetCultureInfo("de-DE") })
    .Append(" China", new TextStyle() { Language = CultureInfo.GetCultureInfo("zh-CN") });

outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
document.AppendChildLast(page);

document.Save(Path.Combine(RunExamples.GetDataDir_Text(), "SetProofingLanguageForText.one"));</code></example>
      <example>Manipulate by text format using paragraph style.<code>
var document = new Document();
var page = new Page();
var outline = new Outline();
var outlineElem = new OutlineElement();

var text = new RichText() { ParagraphStyle = new ParagraphStyle() { FontName = "Courier New", FontSize = 20 } }
                .Append($"DefaultParagraphFontAndSize{Environment.NewLine}")
                .Append($"OnlyDefaultParagraphFont{Environment.NewLine}", new TextStyle() { FontSize = 14 })
                .Append("OnlyDefaultParagraphFontSize", new TextStyle() { FontName = "Verdana" });

outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
document.AppendChildLast(page);

document.Save(Path.Combine(RunExamples.GetDataDir_Text(), "SetDefaultParagraphStyle.one"));</code></example>
      <example>Shows how to bind a hyperlink to a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Create an object of the Document class
Document doc = new Document();

RichText titleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append("Title!");

Outline outline = new Outline()
                      {
                          MaxWidth = 200,
                          MaxHeight = 200,
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };

TextStyle textStyleRed = new TextStyle
                             {
                                 FontColor = Color.Red,
                                 FontName = "Arial",
                                 FontSize = 10,
                             };

TextStyle textStyleHyperlink = new TextStyle
                                   {
                                       IsHyperlink = true,
                                       HyperlinkAddress = "www.google.com"
                                   };

RichText text = new RichText() { ParagraphStyle = ParagraphStyle.Default }
                    .Append("This is ", textStyleRed)
                    .Append("hyperlink", textStyleHyperlink)
                    .Append(". This text is not a hyperlink.", TextStyle.Default);

OutlineElement outlineElem = new OutlineElement();
outlineElem.AppendChildLast(text);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Initialize Title class object
Title title = new Title() { TitleText = titleText };

// Initialize Page class object
Page page = new Note.Page() { Title = title };

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddHyperlink_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.TextStyle.Default">
      <summary>
            Gets the style with "en-US" culture.
            </summary>
    </member>
    <member name="P:Aspose.Note.TextStyle.DefaultMsOneNoteTitleTextStyle">
      <summary>
            Gets default style for title text in MS OneNote.
            </summary>
    </member>
    <member name="P:Aspose.Note.TextStyle.DefaultMsOneNoteTitleDateStyle">
      <summary>
            Gets default style for title date in MS OneNote.
            </summary>
    </member>
    <member name="P:Aspose.Note.TextStyle.DefaultMsOneNoteTitleTimeStyle">
      <summary>
            Gets default style for title time in MS OneNote.
            </summary>
    </member>
    <member name="P:Aspose.Note.TextStyle.IsMathFormatting">
      <summary>
            Gets or sets a value indicating whether the text style is math-formatting.
            </summary>
    </member>
    <member name="P:Aspose.Note.TextStyle.IsHyperlink">
      <summary>
            Gets or sets a value indicating whether the text style is hyperlink.
            </summary>
      <example>Shows how to bind a hyperlink to a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Create an object of the Document class
Document doc = new Document();

RichText titleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append("Title!");

Outline outline = new Outline()
                      {
                          MaxWidth = 200,
                          MaxHeight = 200,
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };

TextStyle textStyleRed = new TextStyle
                             {
                                 FontColor = Color.Red,
                                 FontName = "Arial",
                                 FontSize = 10,
                             };

TextStyle textStyleHyperlink = new TextStyle
                                   {
                                       IsHyperlink = true,
                                       HyperlinkAddress = "www.google.com"
                                   };

RichText text = new RichText() { ParagraphStyle = ParagraphStyle.Default }
                    .Append("This is ", textStyleRed)
                    .Append("hyperlink", textStyleHyperlink)
                    .Append(". This text is not a hyperlink.", TextStyle.Default);

OutlineElement outlineElem = new OutlineElement();
outlineElem.AppendChildLast(text);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Initialize Title class object
Title title = new Title() { TitleText = titleText };

// Initialize Page class object
Page page = new Note.Page() { Title = title };

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddHyperlink_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.TextStyle.HyperlinkAddress">
      <summary>
            Gets or sets the hyperlink address. Must be set if the value of the <see cref="P:Aspose.Note.TextStyle.IsHyperlink" /> property is true.
            </summary>
      <example>Shows how to bind a hyperlink to a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Create an object of the Document class
Document doc = new Document();

RichText titleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append("Title!");

Outline outline = new Outline()
                      {
                          MaxWidth = 200,
                          MaxHeight = 200,
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };

TextStyle textStyleRed = new TextStyle
                             {
                                 FontColor = Color.Red,
                                 FontName = "Arial",
                                 FontSize = 10,
                             };

TextStyle textStyleHyperlink = new TextStyle
                                   {
                                       IsHyperlink = true,
                                       HyperlinkAddress = "www.google.com"
                                   };

RichText text = new RichText() { ParagraphStyle = ParagraphStyle.Default }
                    .Append("This is ", textStyleRed)
                    .Append("hyperlink", textStyleHyperlink)
                    .Append(". This text is not a hyperlink.", TextStyle.Default);

OutlineElement outlineElem = new OutlineElement();
outlineElem.AppendChildLast(text);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Initialize Title class object
Title title = new Title() { TitleText = titleText };

// Initialize Page class object
Page page = new Note.Page() { Title = title };

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddHyperlink_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.TextStyle.IsHidden">
      <summary>
            Gets or sets a value indicating whether the text style is hidden.
            </summary>
    </member>
    <member name="P:Aspose.Note.TextStyle.Language">
      <summary>
            Gets or sets the language of the text.
            </summary>
      <remarks>Returns <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> if the property is not set.</remarks>
      <example>Set proofing language for a text.<code>
var document = new Document();
var page = new Page();
var outline = new Outline();
var outlineElem = new OutlineElement();

var text = new RichText() { ParagraphStyle = ParagraphStyle.Default };
text.Append("United States", new TextStyle() { Language = CultureInfo.GetCultureInfo("en-US") })
    .Append(" Germany", new TextStyle() { Language = CultureInfo.GetCultureInfo("de-DE") })
    .Append(" China", new TextStyle() { Language = CultureInfo.GetCultureInfo("zh-CN") });

outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
document.AppendChildLast(page);

document.Save(Path.Combine(RunExamples.GetDataDir_Text(), "SetProofingLanguageForText.one"));</code></example>
    </member>
    <member name="M:Aspose.Note.TextStyle.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="obj">
            The object.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.TextStyle.Equals(Aspose.Note.TextStyle)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="other">
            The object.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.TextStyle.GetHashCode">
      <summary>
            Serves as a hash function for the type.
            </summary>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.NodeType">
      <summary>
            Specifies the type of the node.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.Document">
      <summary>
            Specifies that the node is a <see cref="F:Aspose.Note.NodeType.Document" />.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.Section">
      <summary>
            Specifies that the node is a <see cref="F:Aspose.Note.NodeType.Section" />.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.Page">
      <summary>
            Specifies that the node is a <see cref="F:Aspose.Note.NodeType.Page" />.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.PageSeries">
      <summary>
            Specifies that the node is a <see cref="F:Aspose.Note.NodeType.PageSeries" />.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.Title">
      <summary>
            Specifies that the node is a <see cref="F:Aspose.Note.NodeType.Title" />.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.Outline">
      <summary>
            Specifies that the node is an <see cref="F:Aspose.Note.NodeType.Outline" />.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.OutlineElement">
      <summary>
            Specifies that the node is an <see cref="F:Aspose.Note.NodeType.OutlineElement" />.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.Image">
      <summary>
            Specifies that the node is an <see cref="F:Aspose.Note.NodeType.Image" />.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.RichText">
      <summary>
            Specifies that the node is a <see cref="F:Aspose.Note.NodeType.RichText" />.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.OutlineGroup">
      <summary>
            Specifies that the node is an <see cref="F:Aspose.Note.NodeType.OutlineGroup" />.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.AttachedFile">
      <summary>
            Specifies that the node is an <see cref="F:Aspose.Note.NodeType.AttachedFile" />.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.Table">
      <summary>
            Specifies that the node is a <see cref="F:Aspose.Note.NodeType.Table" />.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.TableRow">
      <summary>
            Specifies that the node is a <see cref="F:Aspose.Note.NodeType.TableRow" />.
            </summary>
    </member>
    <member name="F:Aspose.Note.NodeType.TableCell">
      <summary>
            Specifies that the node is a <see cref="F:Aspose.Note.NodeType.TableCell" />.
            </summary>
    </member>
    <member name="T:Aspose.Note.NumberFormat">
      <summary>
            Specifies the numbering format that can be used for a group of automatically numbered objects.
            Full list is specified on <a href="https://msdn.microsoft.com/en-us/library/dd923798(v=office.12).aspx">MSDN</a></summary>
    </member>
    <member name="F:Aspose.Note.NumberFormat.DecimalNumbers">
      <summary>
            Specifies that the sequence shall consist of decimal numbering.
            Example: 1, 2, 3, …, 8, 9, 10, 11, 12, …, 18, 19, 20, 21.
            </summary>
    </member>
    <member name="F:Aspose.Note.NumberFormat.UpperRoman">
      <summary>
            Specifies that the sequence shall consist of uppercase roman numerals.
            Example: I, II, III, IV, …, XVIII, XIX, XX, XXI.
            </summary>
    </member>
    <member name="F:Aspose.Note.NumberFormat.LowerRoman">
      <summary>
            Specifies that the sequence shall consist of lowercase roman numerals.
            Example: i, ii, iii, iv, …, xviii, xix, xx, xxi.
            </summary>
    </member>
    <member name="F:Aspose.Note.NumberFormat.UpperLetter">
      <summary>
            Specifies that the sequence shall consist of one or more occurrences of a single letter of the Latin alphabet in upper case.
            Example: A, B, C, …, Y, Z, AA, BB, CC, …, YY, ZZ, AAA, BBB, CCC.
            </summary>
    </member>
    <member name="F:Aspose.Note.NumberFormat.LowerLetter">
      <summary>
            Specifies that the sequence shall consist of one or more occurrences of a single letter of the Latin alphabet in lower case.
            Example: a, b, c, …, y, z, aa, bb, cc, …, yy, zz, aaa, bbb, ccc.
            </summary>
    </member>
    <member name="F:Aspose.Note.NumberFormat.TaiwaneseCounting">
      <summary>
            Specifies that the sequence shall consist of sequential numbers from the Taiwanese counting system.
            </summary>
            Example: 一, 二, 三, …, 九, 十, 十一, 十二, …, 十九, 二十, 二十一, …, 九十九, 一. ○○, 一○一.
        </member>
    <member name="F:Aspose.Note.NumberFormat.TaiwaneseCountingThousand">
      <summary>
            Specifies that the sequence shall consist of sequential numbers from the Taiwanese counting thousand system.
            </summary>
            Example: 一, 二, 三, …, 九, 十, 十一, 十二, …, 十九, 二十, 二十一, …, 九十九, 一. ○○, 一○一.
        </member>
    <member name="F:Aspose.Note.NumberFormat.ChineseCounting">
      <summary>
            Specifies that the sequence shall consist of sequential numbers from the Chinese counting system.
            </summary>
            Example: 一, 二, 三, …, 九, 十, 十一, 十二, …, 十九, 二十, 二十一, …, 九十九, 一. ○○, 一○一.
        </member>
    <member name="F:Aspose.Note.NumberFormat.ChineseCountingThousand">
      <summary>
            Specifies that the sequence shall consist of sequential numbers from the Chinese counting thousand system.
            </summary>
            Example: 一, 二, 三, …, 九, 十, 十一, 十二, …, 十九, 二十, 二十一, …, 九十九, 一. ○○, 一○一.
        </member>
    <member name="T:Aspose.Note.TagStatus">
      <summary>
            Specifies the status of the note tag node.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagStatus.Open">
      <summary>
            The note tag is open.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagStatus.Completed">
      <summary>
            The note tag is finished.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagStatus.Disabled">
      <summary>
            The note tag is disabled.
            </summary>
    </member>
    <member name="T:Aspose.Note.Document">
      <summary>
            Represents an Aspose.Note document.
            </summary>
      <example>Shows how to sent document to a printer using standard Windows dialog with default options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

var document = new Aspose.Note.Document(dataDir + "Aspose.one");

document.Print();</code></example>
      <example>Shows how to save a document.<code>
string inputFile = "Sample1.one";
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string outputFile = "SaveDocToOneNoteFormat_out.one";

Document doc = new Document(dataDir + inputFile);
doc.Save(dataDir + outputFile);</code></example>
      <example>Shows how to an encrypted document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

LoadOptions loadOptions = new LoadOptions { DocumentPassword = "password" };
Document doc = new Document(dataDir + "Sample1.one", loadOptions);</code></example>
      <example>Shows how to save document with encryption.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

Document document = new Document();
document.Save(dataDir + "CreatingPasswordProtectedDoc_out.one", new OneSaveOptions() { DocumentPassword = "pass" });</code></example>
      <example>Shows how to save a document using SaveFormat enumeration.<code>
string inputFile = "Sample1.one";
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string outputFile = "SaveDocToOneNoteFormatUsingSaveFormat_out.one";

Document document = new Document(dataDir + inputFile);

document.Save(dataDir + outputFile, SaveFormat.One);</code></example>
      <example>Shows how to save a document using OneSaveOptions.<code>
string inputFile = "Sample1.one";
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string outputFile = "SaveDocToOneNoteFormatUsingOneSaveOptions_out.one";

Document document = new Document(dataDir + inputFile);

document.Save(dataDir + outputFile, new OneSaveOptions());</code></example>
      <example>Shows how to get page's count of a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get number of pages
int count = oneFile.Count();

// Print count on the output screen
Console.WriteLine(count);</code></example>
      <example>Shows how to save a document in pdf format using default settings.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Save the document as PDF
dataDir = dataDir + "SaveWithDefaultSettings_out.pdf";
oneFile.Save(dataDir, SaveFormat.Pdf);</code></example>
      <example>Shows how to save a document in gif format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToImageDefaultOptions_out.gif";

// Save the document as gif.
oneFile.Save(dataDir, SaveFormat.Gif);</code></example>
      <example>Shows how to set a image quality when saving document as image in JPEG format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SetOutputImageResolution_out.jpg";

// Save the document.
doc.Save(dataDir, new ImageSaveOptions(SaveFormat.Jpeg) { Quality = 100 });</code></example>
      <example>Shows how to set a image resolution when saving document as image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SetOutputImageResolution_out.jpg";

// Save the document.
doc.Save(dataDir, new ImageSaveOptions(SaveFormat.Jpeg) { Resolution = 220 });</code></example>
      <example>Shows how to get file format of a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

var document = new Aspose.Note.Document(dataDir + "Aspose.one");
switch (document.FileFormat)
{
    case FileFormat.OneNote2010:
        // Process OneNote 2010
        break;
    case FileFormat.OneNoteOnline:
        // Process OneNote Online
        break;
}</code></example>
      <example>Shows how to bind a hyperlink to an image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images(); 

var document = new Document();

var page = new Page(document);

var image = new Image(document, dataDir + "image.jpg") { HyperlinkUrl = "http://image.com" };

page.AppendChildLast(image);

document.AppendChildLast(page);

document.Save(dataDir + "Image with Hyperlink_out.one");</code></example>
      <example>Shows how to save a document to a stream.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

MemoryStream dstStream = new MemoryStream();
doc.Save(dstStream, SaveFormat.Pdf);

// Rewind the stream position back to zero so it is ready for next reader.
dstStream.Seek(0, SeekOrigin.Begin);</code></example>
      <example>Shows how to check if a document is password-protected.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (!Document.IsEncrypted(fileName, out document))
{
    Console.WriteLine("The document is loaded and ready to be processed.");
}
else
{
    Console.WriteLine("The document is encrypted. Provide a password.");
}</code></example>
      <example>Shows how to add new section to a notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

// Append a new child to the Notebook
notebook.AppendChild(new Document(dataDir + "Neuer Abschnitt 1.one"));

dataDir = dataDir + "AddChildNode_out.onetoc2";

// Save the Notebook
notebook.Save(dataDir);</code></example>
      <example>Shows how to check if a document load is failed because OneNote 2007 format is not supported.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "OneNote2007.one");

try
{
    new Document(fileName);
}
catch (UnsupportedFileFormatException e)
{
    if (e.FileFormat == FileFormat.OneNote2007)
    {
        Console.WriteLine("It looks like the provided file is in OneNote 2007 format that is not supported.");
    }
    else
        throw;
}</code></example>
      <example>Shows how to restore previous version of a page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(dataDir + "Aspose.one");
Page page = document.FirstChild;           
Page previousPageVersion = document.GetPageHistory(page).Last();

document.RemoveChild(page);
document.AppendChildLast(previousPageVersion);

document.Save(dataDir + "RollBackRevisions_out.one");</code></example>
      <example>Shows how to clone a page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document document = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

// Clone into new document without history
var cloned = new Document();
cloned.AppendChildLast(document.FirstChild.Clone());

// Clone into new document with history
cloned = new Document();
cloned.AppendChildLast(document.FirstChild.Clone(true));</code></example>
      <example>Shows how to save a document in html format with storing all resources(css/fonts/images) to a separate files.<code>
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

var options = new HtmlSaveOptions()
             {
                 ExportCss = ResourceExportType.ExportAsStream,
                 ExportFonts = ResourceExportType.ExportAsStream,
                 ExportImages = ResourceExportType.ExportAsStream,
                 FontFaceTypes = FontFaceType.Ttf
             };
document.Save(dataDir + "document_out.html", options);</code></example>
      <example>Shows how to save a document to a stream in html format with embedding of all resources(css/fonts/images).<code>
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

var options = new HtmlSaveOptions()
             {
                 ExportCss = ResourceExportType.ExportEmbedded,
                 ExportFonts = ResourceExportType.ExportEmbedded,
                 ExportImages = ResourceExportType.ExportEmbedded,
                 FontFaceTypes = FontFaceType.Ttf
             };

var r = new MemoryStream();
document.Save(r, options);</code></example>
      <example>Shows how to set text description for an image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

var document = new Document();
var page = new Page(document);
var image = new Image(document, dataDir + "image.jpg")
            {
                AlternativeTextTitle = "This is an image's title!",
                AlternativeTextDescription = "And this is an image's description!"
            };
page.AppendChildLast(image);
document.AppendChildLast(page);

dataDir = dataDir + "ImageAlternativeText_out.one";
document.Save(dataDir);</code></example>
      <example>Shows how to get meta information about a page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

foreach (Page page in oneFile)
{
    Console.WriteLine("LastModifiedTime: {0}", page.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", page.CreationTime);
    Console.WriteLine("Title: {0}", page.Title);
    Console.WriteLine("Level: {0}", page.Level);
    Console.WriteLine("Author: {0}", page.Author);
    Console.WriteLine();
}</code></example>
      <example>When long OneNote pages are saved in pdf format they are split across pages. The sample shows how to configure the splitting logic of objects located on page's breaks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

var pdfSaveOptions = new PdfSaveOptions();

pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(100);
// or
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(400);

dataDir = dataDir + "PageSplittUsingKeepPartAndCloneSolidObjectToNextPageAlgorithm_out.pdf";
doc.Save(dataDir);</code></example>
      <example>Shows how to save a document in png format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Initialize ImageSaveOptions object 
ImageSaveOptions opts = new ImageSaveOptions(SaveFormat.Png)
                            {
                                // Set page index
                                PageIndex = 1
                            };

dataDir = dataDir + "ConvertSpecificPageToImage_out.png";

// Save the document as PNG.
oneFile.Save(dataDir, opts);</code></example>
      <example>Shows how to edit page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(dataDir + "Aspose.one");
Page page = document.FirstChild;

var pageHistory = document.GetPageHistory(page);

pageHistory.RemoveRange(0, 1);

pageHistory[0] = new Page(document);
if (pageHistory.Count &gt; 1)
{
    pageHistory[1].Title.TitleText.Text = "New Title";

    pageHistory.Add(new Page(document));

    pageHistory.Insert(1, new Page(document));

    document.Save(dataDir + "ModifyPageHistory_out.one");
}</code></example>
      <example>Shows how to check if a document is password-protected by specific password.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (Document.IsEncrypted(fileName, "VerySecretPassword", out document))
{
    if (document != null)
    {
        Console.WriteLine("The document is decrypted. It is loaded and ready to be processed.");
    }
    else
    {
        Console.WriteLine("The document is encrypted. Invalid password was provided.");
    }
}
else
{
    Console.WriteLine("The document is NOT encrypted. It is loaded and ready to be processed.");
}</code></example>
      <example>Shows how to apply Dark theme style to a Document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document doc = new Document(Path.Combine(dataDir, "Aspose.one"));

foreach (var page in doc)
{
    page.BackgroundColor = Color.Black;
}

foreach (var node in doc.GetChildNodes&lt;RichText&gt;())
{
    var c = node.ParagraphStyle.FontColor;
    if (c.IsEmpty || Math.Abs(c.R - Color.Black.R) + Math.Abs(c.G - Color.Black.G) + Math.Abs(c.B - Color.Black.B) &lt;= 30)
    {
        node.ParagraphStyle.FontColor = Color.White;
    }
}

doc.Save(Path.Combine(dataDir, "AsposeDarkTheme.pdf"));</code></example>
      <example>Shows how to pass through content of a notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = "Open Notebook.onetoc2";
try
{
    var notebook = new Notebook(dataDir + fileName);
    foreach (var notebookChildNode in notebook)
    {
        Console.WriteLine(notebookChildNode.DisplayName);
        if (notebookChildNode is Document)
        {
            // Do something with child document
        }
        else if (notebookChildNode is Notebook)
        {
            // Do something with child notebook
        }
    }
}
catch (Exception ex)
{
    Console.WriteLine(ex.Message);
}</code></example>
      <example>Shows how to get an image from a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all Image nodes
IList&lt;Aspose.Note.Image&gt; nodes = oneFile.GetChildNodes&lt;Aspose.Note.Image&gt;();

foreach (Aspose.Note.Image image in nodes)
{
    using (MemoryStream stream = new MemoryStream(image.Bytes))
    {
        using (Bitmap bitMap = new Bitmap(stream))
        {
            // Save image bytes to a file
            bitMap.Save(String.Format(dataDir + "{0}", Path.GetFileName(image.FileName)));
        }
    }
}</code></example>
      <example>Shows how to save a document in pdf format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Initialize PdfSaveOptions object
PdfSaveOptions opts = new PdfSaveOptions
                          {
                              // Set page index of first page to be saved
                              PageIndex = 0,

                              // Set page count
                              PageCount = 1,
                          };

// Save the document as PDF
dataDir = dataDir + "SaveRangeOfPagesAsPDF_out.pdf";
oneFile.Save(dataDir, opts);</code></example>
      <example>Shows how to save a document in pdf format using specific settings.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

// Initialize PdfSaveOptions object
PdfSaveOptions opts = new PdfSaveOptions
                          {
                              // Use Jpeg compression
                              ImageCompression = Saving.Pdf.PdfImageCompression.Jpeg,

                              // Quality for JPEG compression
                              JpegQuality = 90
                          };

dataDir = dataDir + "Document.SaveWithOptions_out.pdf";
doc.Save(dataDir, opts);</code></example>
      <example>Shows how to sent document to a printer using standard Windows dialog with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

var document = new Aspose.Note.Document(dataDir + "Aspose.one");

var printerSettings = new PrinterSettings() { FromPage = 0, ToPage = 10 };
printerSettings.DefaultPageSettings.Landscape = true;
printerSettings.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50, 50, 150, 50);

document.Print(new PrintOptions()
               {
                   PrinterSettings = printerSettings,
                   Resolution = 1200,
                   PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(),
                   DocumentName = "Test.one"
               });</code></example>
      <example>Shows how to get content of an attached file.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Attachments();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Sample1.one");

// Get a list of attached file nodes
IList&lt;AttachedFile&gt; nodes = oneFile.GetChildNodes&lt;AttachedFile&gt;();

// Iterate through all nodes
foreach (AttachedFile file in nodes)
{
    // Load attached file to a stream object
    using (Stream outputStream = new MemoryStream(file.Bytes))
    {
        // Create a local file
        using (Stream fileStream = System.IO.File.OpenWrite(String.Format(dataDir + file.FileName)))
        {
            // Copy file stream
            CopyStream(outputStream, fileStream);
        }
    }
}</code></example>
      <example>Shows how to get image's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all Image nodes
IList&lt;Aspose.Note.Image&gt; images = oneFile.GetChildNodes&lt;Aspose.Note.Image&gt;();

foreach (Aspose.Note.Image image in images)
{
    Console.WriteLine("Width: {0}", image.Width);
    Console.WriteLine("Height: {0}", image.Height);
    Console.WriteLine("OriginalWidth: {0}", image.OriginalWidth);
    Console.WriteLine("OriginalHeight: {0}", image.OriginalHeight);
    Console.WriteLine("FileName: {0}", image.FileName);
    Console.WriteLine("LastModifiedTime: {0}", image.LastModifiedTime);
    Console.WriteLine();
}</code></example>
      <example>Shows how to get page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document document = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

// Get first page
Page firstPage = document.FirstChild;
foreach (Page pageRevision in document.GetPageHistory(firstPage))
{
    /*Use pageRevision like a regular page.*/
    Console.WriteLine("LastModifiedTime: {0}", pageRevision.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", pageRevision.CreationTime);
    Console.WriteLine("Title: {0}", pageRevision.Title);
    Console.WriteLine("Level: {0}", pageRevision.Level);
    Console.WriteLine("Author: {0}", pageRevision.Author);
    Console.WriteLine();
}</code></example>
      <example>Shows how to add a file to a document by using filepath.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Attachments();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Initialize AttachedFile class object
AttachedFile attachedFile = new AttachedFile(doc,  dataDir + "attachment.txt");

// Add attached file
outlineElem.AppendChildLast(attachedFile);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

dataDir = dataDir + "AttachFileByPath_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a document and save it in html format using default options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();
Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
                 {
                     TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                     TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                     TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
                 };

// Save into HTML format
dataDir = dataDir + "CreateOneNoteDocAndSaveToHTML_out.html";
doc.Save(dataDir);</code></example>
      <example>Shows how to check if a page is a conflict page(i.e. it has changes that OneNote couldn't automatically merge).<code>
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document doc = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

var history = doc.GetPageHistory(doc.FirstChild);
for (int i = 0; i &lt; history.Count; i++)
{
    var historyPage = history[i];
    Console.Write("    {0}. Author: {1}, {2:dd.MM.yyyy hh.mm.ss}",
                    i,
                    historyPage.PageContentRevisionSummary.AuthorMostRecent,
                    historyPage.PageContentRevisionSummary.LastModifiedTime);
    Console.WriteLine(historyPage.IsConflictPage ? ", IsConflict: true" : string.Empty);

    // By default conflict pages are just skipped on saving.
    // If mark it as non-conflict then it will be saved as usual one in the history.
    if (historyPage.IsConflictPage)
        historyPage.IsConflictPage = false;
}

doc.Save(dataDir + "ConflictPageManipulation_out.one", SaveFormat.One);</code></example>
      <example>Shows how to add an image from file to a document with user defined properties.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load document from the stream.
Document doc = new Document(dataDir + "Aspose.one");

// Get the first page of the document.
Aspose.Note.Page page = doc.FirstChild;

// Load an image from the file.
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "image.jpg")
                          {
                              // Change the image's size according to your needs (optional).
                              Width = 100,
                              Height = 100,

                              // Set the image's location in the page (optional).
                              HorizontalOffset = 100,
                              VerticalOffset = 400,

                              // Set image alignment
                              Alignment = HorizontalAlignment.Right
                          };

// Add the image to the page.
page.AppendChildLast(image);</code></example>
      <example>Shows how to add a file from a stream to a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Attachments();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

using (var stream = File.OpenRead(dataDir + "icon.jpg"))
{
    // Initialize AttachedFile class object and also pass its icon path
    AttachedFile attachedFile = new AttachedFile(doc, dataDir + "attachment.txt", stream, ImageFormat.Jpeg);

    // Add attached file
    outlineElem.AppendChildLast(attachedFile);
}

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

dataDir = dataDir + "AttachFileAndSetIcon_out.one";
doc.Save(dataDir);</code></example>
      <example>When long OneNote pages are saved in pdf format they are split across pages. The example shows how to configure the splitting logic of objects located on page's breaks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");
var pdfSaveOptions = new PdfSaveOptions();
pdfSaveOptions.PageSplittingAlgorithm = new AlwaysSplitObjectsAlgorithm();
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm();
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm();

float heightLimitOfClonedPart = 500;
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(heightLimitOfClonedPart);
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(heightLimitOfClonedPart);

pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(100);
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(400);

dataDir = dataDir + "UsingKeepSOlidObjectsAlgorithm_out.pdf";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a document and save in html format specified range of pages.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();

Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
             {
                 TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
             };

// Save into HTML format
dataDir = dataDir + "CreateAndSavePageRange_out.html";
doc.Save(dataDir, new HtmlSaveOptions
                  {
                      PageCount = 1,
                      PageIndex = 0
                  });</code></example>
      <example>Shows how to create a document with titled page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Create an object of the Document class
Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Set page title properties
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append Page node in the document
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "CreateDocWithPageTitle_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to add an image from stream to a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

Outline outline1 = new Outline(doc);
OutlineElement outlineElem1 = new OutlineElement(doc);

using (FileStream fs = File.OpenRead(dataDir + "image.jpg"))
{

    // Load the second image using the image name, extension and stream.
    Aspose.Note.Image image1 = new Aspose.Note.Image(doc, "Penguins.jpg", fs)
                                   {
                                       // Set image alignment
                                       Alignment = HorizontalAlignment.Right
                                   };

    outlineElem1.AppendChildLast(image1);
}

outline1.AppendChildLast(outlineElem1);
page.AppendChildLast(outline1);

doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "BuildDocAndInsertImageUsingImageStream_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to add an image from file to a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object and set offset properties
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Load an image by the file path.
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "image.jpg")
                          {
                              // Set image alignment
                              Alignment = HorizontalAlignment.Right
                          };

// Add image
outlineElem.AppendChildLast(image);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "BuildDocAndInsertImage_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a document with a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Page page = new Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize RichText class object and apply text style
RichText text = new RichText(doc) { Text = "Hello OneNote text!", ParagraphStyle = textStyle };

// Add RichText node
outlineElem.AppendChildLast(text);

// Add OutlineElement node
outline.AppendChildLast(outlineElem);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "CreateDocWithSimpleRichText_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to save a document in different formats.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize the new Document
Document doc = new Document() { AutomaticLayoutChangesDetectionEnabled = false };

// Initialize the new Page
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append page node
doc.AppendChildLast(page);

// Save OneNote document in different formats, set text font size and detect layout changes manually.
doc.Save(dataDir + "ConsequentExportOperations_out.html");            
doc.Save(dataDir + "ConsequentExportOperations_out.pdf");            
doc.Save(dataDir + "ConsequentExportOperations_out.jpg");            
textStyle.FontSize = 11;           
doc.DetectLayoutChanges();            
doc.Save(dataDir + "ConsequentExportOperations_out.bmp");</code></example>
      <example>Shows how to save a document in html format with storing all resources(css/fonts/images) by using user-defined callbacks.<code>
// The code below creates 'documentFolder' folder containing document.html, 'css' folder with 'style.css' file, 'images' folder with images and 'fonts' folder with fonts.
// 'style.css' file will contain at the end the following string "/* This line is appended to stream manually by user */"
var savingCallbacks = new UserSavingCallbacks()
                          {
                              RootFolder = "documentFolder",
                              CssFolder = "css",
                              KeepCssStreamOpened = true,
                              ImagesFolder = "images",
                              FontsFolder = "fonts"
                          };
var options = new HtmlSaveOptions
              {
                  FontFaceTypes = FontFaceType.Ttf,
                  CssSavingCallback = savingCallbacks,
                  FontSavingCallback = savingCallbacks,
                  ImageSavingCallback = savingCallbacks
              };

if (!Directory.Exists(savingCallbacks.RootFolder))
{
    Directory.CreateDirectory(savingCallbacks.RootFolder);
}

string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

using (var stream = File.Create(Path.Combine(savingCallbacks.RootFolder, "document.html")))
{
    document.Save(stream, options);
}

using (var writer = new StreamWriter(savingCallbacks.CssStream))
{
    writer.WriteLine();
    writer.WriteLine("/* This line is appended to stream manually by user */");
}</code></example>
      <example>Shows how to bind a hyperlink to a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Create an object of the Document class
Document doc = new Document();

RichText titleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append("Title!");

Outline outline = new Outline()
                      {
                          MaxWidth = 200,
                          MaxHeight = 200,
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };

TextStyle textStyleRed = new TextStyle
                             {
                                 FontColor = Color.Red,
                                 FontName = "Arial",
                                 FontSize = 10,
                             };

TextStyle textStyleHyperlink = new TextStyle
                                   {
                                       IsHyperlink = true,
                                       HyperlinkAddress = "www.google.com"
                                   };

RichText text = new RichText() { ParagraphStyle = ParagraphStyle.Default }
                    .Append("This is ", textStyleRed)
                    .Append("hyperlink", textStyleHyperlink)
                    .Append(". This text is not a hyperlink.", TextStyle.Default);

OutlineElement outlineElem = new OutlineElement();
outlineElem.AppendChildLast(text);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Initialize Title class object
Title title = new Title() { TitleText = titleText };

// Initialize Page class object
Page page = new Note.Page() { Title = title };

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddHyperlink_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to access content of a document using visitor.<code>
public static void Run()
{
    // The path to the documents directory.
    string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

    // Open the document we want to convert.
    Document doc = new Document(dataDir + "Aspose.one");

    // Create an object that inherits from the DocumentVisitor class.
    MyOneNoteToTxtWriter myConverter = new MyOneNoteToTxtWriter();

    // This is the well known Visitor pattern. Get the model to accept a visitor.
    // The model will iterate through itself by calling the corresponding methods
    // on the visitor object (this is called visiting).
    //
    // Note that every node in the object model has the Accept method so the visiting
    // can be executed not only for the whole document, but for any node in the document.
    doc.Accept(myConverter);

    // Once the visiting is complete, we can retrieve the result of the operation,
    // that in this example, has accumulated in the visitor.
    Console.WriteLine(myConverter.GetText());
    Console.WriteLine(myConverter.NodeCount);            
}

/// &lt;summary&gt;
/// Simple implementation of saving a document in the plain text format. Implemented as a Visitor.
/// &lt;/summary&gt;
public class MyOneNoteToTxtWriter : DocumentVisitor
{
    public MyOneNoteToTxtWriter()
    {
        nodecount = 0;
        mIsSkipText = false;
        mBuilder = new StringBuilder();
    }

    /// &lt;summary&gt;
    /// Gets the plain text of the document that was accumulated by the visitor.
    /// &lt;/summary&gt;
    public string GetText()
    {
        return mBuilder.ToString();
    }

    /// &lt;summary&gt;
    /// Adds text to the current output. Honors the enabled/disabled output flag.
    /// &lt;/summary&gt;
    private void AppendText(string text)
    {
        if (!mIsSkipText)
        {
            mBuilder.AppendLine(text);
        }
    }

    /// &lt;summary&gt;
    /// Called when a RichText node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitRichTextStart(RichText run)
    {
        ++nodecount;
        AppendText(run.Text);
    }

    /// &lt;summary&gt;
    /// Called when a Document node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitDocumentStart(Document document)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a Page node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitPageStart(Page page)
    {
        ++nodecount;
        this.AppendText($"*** Page '{page.Title?.TitleText?.Text ?? "(no title)"}' ***");
    }

    /// &lt;summary&gt;
    /// Called when processing of a Page node is finished.
    /// &lt;/summary&gt;
    public override void VisitPageEnd(Page page)
    {
        this.AppendText(string.Empty);
    }

    /// &lt;summary&gt;
    /// Called when a Title node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitTitleStart(Title title)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a Image node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitImageStart(Image image)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a OutlineGroup node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitOutlineGroupStart(OutlineGroup outlineGroup)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a Outline node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitOutlineStart(Outline outline)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a OutlineElement node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitOutlineElementStart(OutlineElement outlineElement)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Gets the total count of nodes by the Visitor
    /// &lt;/summary&gt;
    public Int32 NodeCount
    {
        get { return this.nodecount; }
    }

    private readonly StringBuilder mBuilder;
    private bool mIsSkipText;
    private Int32 nodecount;
}</code></example>
    </member>
    <member name="M:Aspose.Note.Document.IsEncrypted(System.IO.Stream,Aspose.Note.LoadOptions,Aspose.Note.Document@)">
      <summary>
            Checks whether a document from a stream is encrypted.
            To check it we need to completely load this document. So this method can lead to performance penalty.
            </summary>
      <param name="stream">
            The stream.
            </param>
      <param name="options">
            The load options.
            </param>
      <param name="document">
            The loaded document.
            </param>
      <returns>
            Returns true if the document is encrypted otherwise false.
            </returns>
      <example>Shows how to check if a document is password-protected.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (!Document.IsEncrypted(fileName, out document))
{
    Console.WriteLine("The document is loaded and ready to be processed.");
}
else
{
    Console.WriteLine("The document is encrypted. Provide a password.");
}</code></example>
      <example>Shows how to check if a document is password-protected by specific password.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (Document.IsEncrypted(fileName, "VerySecretPassword", out document))
{
    if (document != null)
    {
        Console.WriteLine("The document is decrypted. It is loaded and ready to be processed.");
    }
    else
    {
        Console.WriteLine("The document is encrypted. Invalid password was provided.");
    }
}
else
{
    Console.WriteLine("The document is NOT encrypted. It is loaded and ready to be processed.");
}</code></example>
    </member>
    <member name="M:Aspose.Note.Document.IsEncrypted(System.IO.Stream,System.String,Aspose.Note.Document@)">
      <summary>
            Checks whether a document from a stream is encrypted.
            To check it we need to completely load this document. So this method can lead to performance penalty.
            </summary>
      <param name="stream">
            The stream.
            </param>
      <param name="password">
            The password to decrypt a document.
            </param>
      <param name="document">
            The loaded document.
            </param>
      <returns>
            Returns true if the document is encrypted otherwise false.
            </returns>
      <example>Shows how to check if a document is password-protected.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (!Document.IsEncrypted(fileName, out document))
{
    Console.WriteLine("The document is loaded and ready to be processed.");
}
else
{
    Console.WriteLine("The document is encrypted. Provide a password.");
}</code></example>
      <example>Shows how to check if a document is password-protected by specific password.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (Document.IsEncrypted(fileName, "VerySecretPassword", out document))
{
    if (document != null)
    {
        Console.WriteLine("The document is decrypted. It is loaded and ready to be processed.");
    }
    else
    {
        Console.WriteLine("The document is encrypted. Invalid password was provided.");
    }
}
else
{
    Console.WriteLine("The document is NOT encrypted. It is loaded and ready to be processed.");
}</code></example>
    </member>
    <member name="M:Aspose.Note.Document.IsEncrypted(System.IO.Stream,Aspose.Note.Document@)">
      <summary>
            Checks whether a document from a stream is encrypted.
            To check it we need to completely load this document. So this method can lead to performance penalty.
            </summary>
      <param name="stream">
            The stream.
            </param>
      <param name="document">
            The loaded document.
            </param>
      <returns>
            Returns true if the document is encrypted otherwise false.
            </returns>
      <example>Shows how to check if a document is password-protected.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (!Document.IsEncrypted(fileName, out document))
{
    Console.WriteLine("The document is loaded and ready to be processed.");
}
else
{
    Console.WriteLine("The document is encrypted. Provide a password.");
}</code></example>
      <example>Shows how to check if a document is password-protected by specific password.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (Document.IsEncrypted(fileName, "VerySecretPassword", out document))
{
    if (document != null)
    {
        Console.WriteLine("The document is decrypted. It is loaded and ready to be processed.");
    }
    else
    {
        Console.WriteLine("The document is encrypted. Invalid password was provided.");
    }
}
else
{
    Console.WriteLine("The document is NOT encrypted. It is loaded and ready to be processed.");
}</code></example>
    </member>
    <member name="M:Aspose.Note.Document.IsEncrypted(System.String,Aspose.Note.LoadOptions,Aspose.Note.Document@)">
      <summary>
            Checks whether a document from a file is encrypted.
            To check it we need to completely load this document. So this method can lead to performance penalty.
            </summary>
      <param name="filePath">
            The file path.
            </param>
      <param name="options">
            The load options.
            </param>
      <param name="document">
            The loaded document.
            </param>
      <returns>
            Returns true if the document is encrypted otherwise false.
            </returns>
      <example>Shows how to check if a document is password-protected.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (!Document.IsEncrypted(fileName, out document))
{
    Console.WriteLine("The document is loaded and ready to be processed.");
}
else
{
    Console.WriteLine("The document is encrypted. Provide a password.");
}</code></example>
      <example>Shows how to check if a document is password-protected by specific password.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (Document.IsEncrypted(fileName, "VerySecretPassword", out document))
{
    if (document != null)
    {
        Console.WriteLine("The document is decrypted. It is loaded and ready to be processed.");
    }
    else
    {
        Console.WriteLine("The document is encrypted. Invalid password was provided.");
    }
}
else
{
    Console.WriteLine("The document is NOT encrypted. It is loaded and ready to be processed.");
}</code></example>
    </member>
    <member name="M:Aspose.Note.Document.IsEncrypted(System.String,Aspose.Note.Document@)">
      <summary>
            Checks whether a document from a file is encrypted.
            To check it we need to completely load this document. So this method can lead to performance penalty.
            </summary>
      <param name="filePath">
            The file path.
            </param>
      <param name="document">
            The loaded document.
            </param>
      <returns>
            Returns true if the document is encrypted otherwise false.
            </returns>
      <example>Shows how to check if a document is password-protected.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (!Document.IsEncrypted(fileName, out document))
{
    Console.WriteLine("The document is loaded and ready to be processed.");
}
else
{
    Console.WriteLine("The document is encrypted. Provide a password.");
}</code></example>
      <example>Shows how to check if a document is password-protected by specific password.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (Document.IsEncrypted(fileName, "VerySecretPassword", out document))
{
    if (document != null)
    {
        Console.WriteLine("The document is decrypted. It is loaded and ready to be processed.");
    }
    else
    {
        Console.WriteLine("The document is encrypted. Invalid password was provided.");
    }
}
else
{
    Console.WriteLine("The document is NOT encrypted. It is loaded and ready to be processed.");
}</code></example>
    </member>
    <member name="M:Aspose.Note.Document.IsEncrypted(System.String,System.String,Aspose.Note.Document@)">
      <summary>
            Checks whether a document from a file is encrypted.
            To check it we need to completely load this document. So this method can lead to performance penalty.
            </summary>
      <param name="filePath">
            The file path.
            </param>
      <param name="password">
            The password to decrypt a document.
            </param>
      <param name="document">
            The loaded document.
            </param>
      <returns>
            Returns true if the document is encrypted otherwise false.
            </returns>
      <example>Shows how to check if a document is password-protected.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (!Document.IsEncrypted(fileName, out document))
{
    Console.WriteLine("The document is loaded and ready to be processed.");
}
else
{
    Console.WriteLine("The document is encrypted. Provide a password.");
}</code></example>
      <example>Shows how to check if a document is password-protected by specific password.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "Aspose.one");

Document document;
if (Document.IsEncrypted(fileName, "VerySecretPassword", out document))
{
    if (document != null)
    {
        Console.WriteLine("The document is decrypted. It is loaded and ready to be processed.");
    }
    else
    {
        Console.WriteLine("The document is encrypted. Invalid password was provided.");
    }
}
else
{
    Console.WriteLine("The document is NOT encrypted. It is loaded and ready to be processed.");
}</code></example>
    </member>
    <member name="M:Aspose.Note.Document.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Document" /> class.
            Creates a blank OneNote document.
            </summary>
    </member>
    <member name="M:Aspose.Note.Document.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Document" /> class.
            Opens an existing OneNote document from a file.
            </summary>
      <param name="filePath">
            The file path.
            </param>
      <exception cref="T:Aspose.Note.UnsupportedFileFormatException">The document format is not recognized or not supported.</exception>
      <exception cref="T:Aspose.Note.FileCorruptedException">The document appears to be corrupted and cannot be loaded.</exception>
      <exception cref="T:Aspose.Note.IncorrectPasswordException">The document is encrypted and requires a password to open, but you supplied an incorrect password.</exception>
      <exception cref="T:System.InvalidOperationException">There is a problem with the document and it should be reported to Aspose.Note developers.</exception>
      <exception cref="T:System.IO.IOException">There is an input/output exception.</exception>
    </member>
    <member name="M:Aspose.Note.Document.#ctor(System.String,Aspose.Note.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Document" /> class.
            Opens an existing OneNote document from a file. Allows to specify additional options such as an encryption password.
            </summary>
      <param name="filePath">
            The file path.
            </param>
      <param name="loadOptions">
            Options used to load a document. Can be null.
            </param>
      <exception cref="T:Aspose.Note.UnsupportedFileFormatException">The document format is not recognized or not supported.</exception>
      <exception cref="T:Aspose.Note.FileCorruptedException">The document appears to be corrupted and cannot be loaded.</exception>
      <exception cref="T:Aspose.Note.IncorrectPasswordException">The document is encrypted and requires a password to open, but you supplied an incorrect password.</exception>
      <exception cref="T:System.InvalidOperationException">There is a problem with the document and it should be reported to Aspose.Note developers.</exception>
      <exception cref="T:System.IO.IOException">There is an input/output exception.</exception>
    </member>
    <member name="M:Aspose.Note.Document.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Document" /> class.
            Opens an existing OneNote document from a stream.
            </summary>
      <param name="inStream">
            The stream.
            </param>
      <exception cref="T:Aspose.Note.UnsupportedFileFormatException">The document format is not recognized or not supported.</exception>
      <exception cref="T:Aspose.Note.FileCorruptedException">The document appears to be corrupted and cannot be loaded.</exception>
      <exception cref="T:Aspose.Note.IncorrectPasswordException">The document is encrypted and requires a password to open, but you supplied an incorrect password.</exception>
      <exception cref="T:System.InvalidOperationException">There is a problem with the document and it should be reported to Aspose.Note developers.</exception>
      <exception cref="T:System.IO.IOException">There is an input/output exception.</exception>
      <exception cref="T:System.ArgumentException">The stream does not support reading, is null, or is already closed. </exception>
    </member>
    <member name="M:Aspose.Note.Document.#ctor(System.IO.Stream,Aspose.Note.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Document" /> class.
            Opens an existing OneNote document from a stream. Allows to specify additional options such as an encryption password.
            </summary>
      <param name="inStream">
            The stream.
            </param>
      <param name="loadOptions">
            Options used to load a document. Can be null.
            </param>
      <exception cref="T:Aspose.Note.UnsupportedFileFormatException">The document format is not recognized or not supported.</exception>
      <exception cref="T:Aspose.Note.FileCorruptedException">The document appears to be corrupted and cannot be loaded.</exception>
      <exception cref="T:Aspose.Note.IncorrectPasswordException">The document is encrypted and requires a password to open, but you supplied an incorrect password.</exception>
      <exception cref="T:System.InvalidOperationException">There is a problem with the document and it should be reported to Aspose.Note developers.</exception>
      <exception cref="T:System.IO.IOException">There is an input/output exception.</exception>
      <exception cref="T:System.ArgumentException">The stream does not support reading, is null, or is already closed. </exception>
    </member>
    <member name="P:Aspose.Note.Document.AutomaticLayoutChangesDetectionEnabled">
      <summary>
            Gets or sets a value indicating whether Aspose.Note performs detection of layout changes automatically.
            Default value is <c>true</c>.
            </summary>
      <example>Shows how to save a document in different formats.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize the new Document
Document doc = new Document() { AutomaticLayoutChangesDetectionEnabled = false };

// Initialize the new Page
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append page node
doc.AppendChildLast(page);

// Save OneNote document in different formats, set text font size and detect layout changes manually.
doc.Save(dataDir + "ConsequentExportOperations_out.html");            
doc.Save(dataDir + "ConsequentExportOperations_out.pdf");            
doc.Save(dataDir + "ConsequentExportOperations_out.jpg");            
textStyle.FontSize = 11;           
doc.DetectLayoutChanges();            
doc.Save(dataDir + "ConsequentExportOperations_out.bmp");</code></example>
    </member>
    <member name="P:Aspose.Note.Document.CreationTime">
      <summary>
            Gets or sets the creation time.
            </summary>
    </member>
    <member name="P:Aspose.Note.Document.Color">
      <summary>
            Gets or sets the color.
            </summary>
    </member>
    <member name="P:Aspose.Note.Document.DisplayName">
      <summary>
            Gets or sets the display name.
            </summary>
    </member>
    <member name="P:Aspose.Note.Document.Guid">
      <summary>
            Gets the object's globally unique id.
            </summary>
      <value>
            The GUID.
            </value>
    </member>
    <member name="P:Aspose.Note.Document.FileFormat">
      <summary>
            Gets file format (OneNote 2010, OneNote Online).
            </summary>
      <example>Shows how to get file format of a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

var document = new Aspose.Note.Document(dataDir + "Aspose.one");
switch (document.FileFormat)
{
    case FileFormat.OneNote2010:
        // Process OneNote 2010
        break;
    case FileFormat.OneNoteOnline:
        // Process OneNote Online
        break;
}</code></example>
    </member>
    <member name="M:Aspose.Note.Document.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
      <example>Shows how to access content of a document using visitor.<code>
public static void Run()
{
    // The path to the documents directory.
    string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

    // Open the document we want to convert.
    Document doc = new Document(dataDir + "Aspose.one");

    // Create an object that inherits from the DocumentVisitor class.
    MyOneNoteToTxtWriter myConverter = new MyOneNoteToTxtWriter();

    // This is the well known Visitor pattern. Get the model to accept a visitor.
    // The model will iterate through itself by calling the corresponding methods
    // on the visitor object (this is called visiting).
    //
    // Note that every node in the object model has the Accept method so the visiting
    // can be executed not only for the whole document, but for any node in the document.
    doc.Accept(myConverter);

    // Once the visiting is complete, we can retrieve the result of the operation,
    // that in this example, has accumulated in the visitor.
    Console.WriteLine(myConverter.GetText());
    Console.WriteLine(myConverter.NodeCount);            
}

/// &lt;summary&gt;
/// Simple implementation of saving a document in the plain text format. Implemented as a Visitor.
/// &lt;/summary&gt;
public class MyOneNoteToTxtWriter : DocumentVisitor
{
    public MyOneNoteToTxtWriter()
    {
        nodecount = 0;
        mIsSkipText = false;
        mBuilder = new StringBuilder();
    }

    /// &lt;summary&gt;
    /// Gets the plain text of the document that was accumulated by the visitor.
    /// &lt;/summary&gt;
    public string GetText()
    {
        return mBuilder.ToString();
    }

    /// &lt;summary&gt;
    /// Adds text to the current output. Honors the enabled/disabled output flag.
    /// &lt;/summary&gt;
    private void AppendText(string text)
    {
        if (!mIsSkipText)
        {
            mBuilder.AppendLine(text);
        }
    }

    /// &lt;summary&gt;
    /// Called when a RichText node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitRichTextStart(RichText run)
    {
        ++nodecount;
        AppendText(run.Text);
    }

    /// &lt;summary&gt;
    /// Called when a Document node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitDocumentStart(Document document)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a Page node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitPageStart(Page page)
    {
        ++nodecount;
        this.AppendText($"*** Page '{page.Title?.TitleText?.Text ?? "(no title)"}' ***");
    }

    /// &lt;summary&gt;
    /// Called when processing of a Page node is finished.
    /// &lt;/summary&gt;
    public override void VisitPageEnd(Page page)
    {
        this.AppendText(string.Empty);
    }

    /// &lt;summary&gt;
    /// Called when a Title node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitTitleStart(Title title)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a Image node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitImageStart(Image image)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a OutlineGroup node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitOutlineGroupStart(OutlineGroup outlineGroup)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a Outline node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitOutlineStart(Outline outline)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Called when a OutlineElement node is encountered in the document.
    /// &lt;/summary&gt;
    public override void VisitOutlineElementStart(OutlineElement outlineElement)
    {
        ++nodecount;
    }

    /// &lt;summary&gt;
    /// Gets the total count of nodes by the Visitor
    /// &lt;/summary&gt;
    public Int32 NodeCount
    {
        get { return this.nodecount; }
    }

    private readonly StringBuilder mBuilder;
    private bool mIsSkipText;
    private Int32 nodecount;
}</code></example>
    </member>
    <member name="M:Aspose.Note.Document.GetPageHistory(Aspose.Note.Page)">
      <summary>
            Gets the <see cref="T:Aspose.Note.PageHistory" /> which contains full history for each page presented in a document (the earliest at index 0).
            The current page revision can be accessed as <see cref="P:Aspose.Note.PageHistory.Current" /> and contained separately from collection of historical versions.
            </summary>
      <param name="page">
            The current revision of a page.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.PageHistory" />.
            </returns>
      <example>Shows how to restore previous version of a page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(dataDir + "Aspose.one");
Page page = document.FirstChild;           
Page previousPageVersion = document.GetPageHistory(page).Last();

document.RemoveChild(page);
document.AppendChildLast(previousPageVersion);

document.Save(dataDir + "RollBackRevisions_out.one");</code></example>
      <example>Shows how to edit page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(dataDir + "Aspose.one");
Page page = document.FirstChild;

var pageHistory = document.GetPageHistory(page);

pageHistory.RemoveRange(0, 1);

pageHistory[0] = new Page(document);
if (pageHistory.Count &gt; 1)
{
    pageHistory[1].Title.TitleText.Text = "New Title";

    pageHistory.Add(new Page(document));

    pageHistory.Insert(1, new Page(document));

    document.Save(dataDir + "ModifyPageHistory_out.one");
}</code></example>
      <example>Shows how to check if a page is a conflict page(i.e. it has changes that OneNote couldn't automatically merge).<code>
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document doc = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

var history = doc.GetPageHistory(doc.FirstChild);
for (int i = 0; i &lt; history.Count; i++)
{
    var historyPage = history[i];
    Console.Write("    {0}. Author: {1}, {2:dd.MM.yyyy hh.mm.ss}",
                    i,
                    historyPage.PageContentRevisionSummary.AuthorMostRecent,
                    historyPage.PageContentRevisionSummary.LastModifiedTime);
    Console.WriteLine(historyPage.IsConflictPage ? ", IsConflict: true" : string.Empty);

    // By default conflict pages are just skipped on saving.
    // If mark it as non-conflict then it will be saved as usual one in the history.
    if (historyPage.IsConflictPage)
        historyPage.IsConflictPage = false;
}

doc.Save(dataDir + "ConflictPageManipulation_out.one", SaveFormat.One);</code></example>
    </member>
    <member name="M:Aspose.Note.Document.Save(System.String)">
      <summary>
            Saves the OneNote document to a file.
            </summary>
      <param name="fileName">
            The full name for the file. If a file with the specified full name already exists, the existing file is overwritten.
            </param>
      <exception cref="T:Aspose.Note.IncorrectDocumentStructureException">The document structure violates specification.</exception>
      <exception cref="T:Aspose.Note.UnsupportedSaveFormatException">Requested save format is not supported.</exception>
      <example>Shows how to save a document.<code>
string inputFile = "Sample1.one";
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string outputFile = "SaveDocToOneNoteFormat_out.one";

Document doc = new Document(dataDir + inputFile);
doc.Save(dataDir + outputFile);</code></example>
    </member>
    <member name="M:Aspose.Note.Document.Save(System.IO.Stream)">
      <summary>
            Saves the OneNote document to a stream.
            </summary>
      <param name="stream">
            The System.IO.Stream where the document will be saved.
            </param>
      <exception cref="T:Aspose.Note.IncorrectDocumentStructureException">The document structure violates specification.</exception>
      <exception cref="T:Aspose.Note.UnsupportedSaveFormatException">Requested save format is not supported.</exception>
    </member>
    <member name="M:Aspose.Note.Document.Save(System.String,Aspose.Note.SaveFormat)">
      <summary>
            Saves the OneNote document to a file in the specified format.
            </summary>
      <param name="fileName">
            The full name for the file. If a file with the specified full name already exists, the existing file is overwritten.
            </param>
      <param name="format">
            The format in which to save the document.
            </param>
      <exception cref="T:Aspose.Note.IncorrectDocumentStructureException">The document structure violates specification.</exception>
      <exception cref="T:Aspose.Note.UnsupportedSaveFormatException">Requested save format is not supported.</exception>
      <example>Shows how to save a document using SaveFormat enumeration.<code>
string inputFile = "Sample1.one";
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string outputFile = "SaveDocToOneNoteFormatUsingSaveFormat_out.one";

Document document = new Document(dataDir + inputFile);

document.Save(dataDir + outputFile, SaveFormat.One);</code></example>
      <example>Shows how to save a document in gif format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToImageDefaultOptions_out.gif";

// Save the document as gif.
oneFile.Save(dataDir, SaveFormat.Gif);</code></example>
    </member>
    <member name="M:Aspose.Note.Document.Save(System.IO.Stream,Aspose.Note.SaveFormat)">
      <summary>
            Saves the OneNote document to a stream in the specified format.
            </summary>
      <param name="stream">
            The System.IO.Stream where the document will be saved.
            </param>
      <param name="format">
            The format in which to save the document.
            </param>
      <exception cref="T:Aspose.Note.IncorrectDocumentStructureException">The document structure violates specification.</exception>
      <exception cref="T:Aspose.Note.UnsupportedSaveFormatException">Requested save format is not supported.</exception>
      <example>Shows how to save a document in pdf format using default settings.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Save the document as PDF
dataDir = dataDir + "SaveWithDefaultSettings_out.pdf";
oneFile.Save(dataDir, SaveFormat.Pdf);</code></example>
      <example>Shows how to save a document to a stream.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

MemoryStream dstStream = new MemoryStream();
doc.Save(dstStream, SaveFormat.Pdf);

// Rewind the stream position back to zero so it is ready for next reader.
dstStream.Seek(0, SeekOrigin.Begin);</code></example>
      <example>Shows how to apply Dark theme style to a Document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document doc = new Document(Path.Combine(dataDir, "Aspose.one"));

foreach (var page in doc)
{
    page.BackgroundColor = Color.Black;
}

foreach (var node in doc.GetChildNodes&lt;RichText&gt;())
{
    var c = node.ParagraphStyle.FontColor;
    if (c.IsEmpty || Math.Abs(c.R - Color.Black.R) + Math.Abs(c.G - Color.Black.G) + Math.Abs(c.B - Color.Black.B) &lt;= 30)
    {
        node.ParagraphStyle.FontColor = Color.White;
    }
}

doc.Save(Path.Combine(dataDir, "AsposeDarkTheme.pdf"));</code></example>
    </member>
    <member name="M:Aspose.Note.Document.Save(System.String,Aspose.Note.Saving.SaveOptions)">
      <summary>
            Saves the OneNote document to a file using the specified save options.
            </summary>
      <param name="fileName">
            The full name for the file. If a file with the specified full name already exists, the existing file is overwritten.
            </param>
      <param name="options">
            Specifies the options how the document is saved in file.
            </param>
      <exception cref="T:Aspose.Note.IncorrectDocumentStructureException">The document structure violates specification.</exception>
      <exception cref="T:Aspose.Note.UnsupportedSaveFormatException">Requested save format is not supported.</exception>
      <example>Shows how to save a document using OneSaveOptions.<code>
string inputFile = "Sample1.one";
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string outputFile = "SaveDocToOneNoteFormatUsingOneSaveOptions_out.one";

Document document = new Document(dataDir + inputFile);

document.Save(dataDir + outputFile, new OneSaveOptions());</code></example>
      <example>Shows how to save a document as image in Jpeg format using SaveFormat.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToJpegImageUsingSaveFormat_out.jpg";

// Save the document.
oneFile.Save(dataDir, SaveFormat.Jpeg);</code></example>
      <example>Shows how to save a document as image in Bmp format using ImageSaveOptions.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBmpImageUsingImageSaveOptions_out.bmp";

// Save the document.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Bmp));</code></example>
      <example>Shows how to save a document in Pdf format with Letter page layout.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "OneNote.one");

var dst = Path.Combine(dataDir, "SaveToPdfUsingLetterPageSettings.pdf");

// Save the document.
oneFile.Save(dst, new PdfSaveOptions() { PageSettings = PageSettings.Letter });</code></example>
      <example>Shows how to save a document in Pdf format with A4 page layout without height limit.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "OneNote.one");

var dst = Path.Combine(dataDir, "SaveToPdfUsingA4PageSettingsWithoutHeightLimit.pdf");

// Save the document.
oneFile.Save(dst, new PdfSaveOptions() { PageSettings = PageSettings.A4NoHeightLimit });</code></example>
      <example>Shows how to save a document as grayscale image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveAsGrayscaleImage_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.GrayScale
                          });</code></example>
      <example>Shows how to save a document as image in Tiff format using PackBits compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingPackBitsCompression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          TiffCompression = TiffCompression.PackBits
                      });</code></example>
      <example>Shows how to save a document as image in Tiff format using Jpeg compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingJpegCompression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          TiffCompression = TiffCompression.Jpeg,
                          Quality = 93
                      });</code></example>
      <example>Shows how to save a document as image in Tiff format using CCITT Group 3 fax compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingCcitt3Compression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          ColorMode = ColorMode.BlackAndWhite,
                          TiffCompression = TiffCompression.Ccitt3
                      });</code></example>
      <example>Shows how to save a document in pdf format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Initialize PdfSaveOptions object
PdfSaveOptions opts = new PdfSaveOptions
                          {
                              // Set page index of first page to be saved
                              PageIndex = 0,

                              // Set page count
                              PageCount = 1,
                          };

// Save the document as PDF
dataDir = dataDir + "SaveRangeOfPagesAsPDF_out.pdf";
oneFile.Save(dataDir, opts);</code></example>
      <example>Shows how to save a document in pdf format using specific settings.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

// Initialize PdfSaveOptions object
PdfSaveOptions opts = new PdfSaveOptions
                          {
                              // Use Jpeg compression
                              ImageCompression = Saving.Pdf.PdfImageCompression.Jpeg,

                              // Quality for JPEG compression
                              JpegQuality = 90
                          };

dataDir = dataDir + "Document.SaveWithOptions_out.pdf";
doc.Save(dataDir, opts);</code></example>
      <example>Shows how to save a document as binary image using Otsu's method.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingOtsuMethod_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                        {
                            ColorMode = ColorMode.BlackAndWhite,
                            BinarizationOptions = new ImageBinarizationOptions()
                                                  {
                                                      BinarizationMethod = BinarizationMethod.Otsu,
                                                  }
                        });</code></example>
      <example>Shows how to save a document as binary image using fixed threshold.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingFixedThreshold_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.BlackAndWhite,
                              BinarizationOptions = new ImageBinarizationOptions()
                                                        {
                                                            BinarizationMethod = BinarizationMethod.FixedThreshold,
                                                            BinarizationThreshold = 123
                                                        }
                          });</code></example>
    </member>
    <member name="M:Aspose.Note.Document.Save(System.IO.Stream,Aspose.Note.Saving.SaveOptions)">
      <summary>
            Saves the OneNote document to a stream using the specified save options.
            </summary>
      <param name="stream">
            The System.IO.Stream where the document will be saved.
            </param>
      <param name="options">
            Specifies the options how the document is saved in stream.
            </param>
      <exception cref="T:Aspose.Note.IncorrectDocumentStructureException">The document structure violates specification.</exception>
      <exception cref="T:Aspose.Note.UnsupportedSaveFormatException">Requested save format is not supported.</exception>
      <example>Shows how to save a document in pdf format using specified default font.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "missing-font.one"));

// Save the document as PDF
dataDir = dataDir + "SaveUsingDocumentFontsSubsystemWithDefaultFontName_out.pdf";
oneFile.Save(dataDir, new PdfSaveOptions() 
                      {
                          FontsSubsystem = DocumentFontsSubsystem.UsingDefaultFont("Times New Roman")
                      });</code></example>
      <example>Shows how to save a document in pdf format using default font from a file.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

string fontFile = Path.Combine(dataDir, "geo_1.ttf");

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "missing-font.one"));

// Save the document as PDF
dataDir = dataDir + "SaveUsingDocumentFontsSubsystemWithDefaultFontFromFile_out.pdf";
oneFile.Save(dataDir, new PdfSaveOptions()
                          {
                              FontsSubsystem = DocumentFontsSubsystem.UsingDefaultFontFromFile(fontFile)
                          });</code></example>
      <example>Shows how to save a document in pdf format using default font from a stream.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

string fontFile = Path.Combine(dataDir, "geo_1.ttf");

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "missing-font.one"));

// Save the document as PDF
dataDir = dataDir + "SaveUsingDocumentFontsSubsystemWithDefaultFontFromStream_out.pdf";

using (var stream = File.Open(fontFile, FileMode.Open, FileAccess.Read, FileShare.Read))
{
    oneFile.Save(dataDir, new PdfSaveOptions()
                              {
                                  FontsSubsystem = DocumentFontsSubsystem.UsingDefaultFontFromStream(stream)
                              });
}</code></example>
    </member>
    <member name="M:Aspose.Note.Document.Merge(System.Collections.Generic.IEnumerable{Aspose.Note.Page},Aspose.Note.MergeOptions)">
      <summary>
            Merges a set of pages to the document.
            </summary>
      <param name="pages">
            A set of pages.
            </param>
      <param name="mergeOptions">
            Specifies the options how to merge provided pages.
            </param>
      <returns>
            Returns the reference to the document.
            </returns>
      <example>Shows how to import all pages from PDF document grouping every 5 pages to a single OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

var mergeOptions = new MergeOptions() { ImportAsSinglePage = true, PageSpacing = 100 };

IEnumerable&lt;Page&gt; pages = PdfImporter.Import(Path.Combine(dataDir, "SampleGrouping.pdf"));
while (pages.Any())
{
    d.Merge(pages.Take(5), mergeOptions);
    pages = pages.Skip(5);
}

d.Save(Path.Combine(dataDir, "sample_CustomMerge.one"));</code></example>
    </member>
    <member name="M:Aspose.Note.Document.Import(System.IO.Stream,Aspose.Note.Importing.PdfImportOptions,Aspose.Note.MergeOptions)">
      <summary>
            Imports a set of pages from provided PDF document.
            </summary>
      <param name="stream">
            A stream with PDF document.
            </param>
      <param name="importOptions">
            Specifies the options how to import pages from PDF document.
            </param>
      <param name="mergeOptions">
            Specifies the options how to merge provided pages.
            </param>
      <returns>
            Returns the reference to the document.
            </returns>
    </member>
    <member name="M:Aspose.Note.Document.Import(System.String,Aspose.Note.Importing.PdfImportOptions,Aspose.Note.MergeOptions)">
      <summary>
            Imports a set of pages from provided PDF document.
            </summary>
      <param name="file">
            A file with PDF document.
            </param>
      <param name="importOptions">
            Specifies the options how to import pages from PDF document.
            </param>
      <param name="mergeOptions">
            Specifies the options how to merge provided pages.
            </param>
      <returns>
            Returns the reference to the document.
            </returns>
      <example>Shows how to import all pages from a set of PDF documents page by page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

d.Import(Path.Combine(dataDir, "sampleText.pdf"))
 .Import(Path.Combine(dataDir, "sampleImage.pdf"))
 .Import(Path.Combine(dataDir, "sampleTable.pdf"));

d.Save(Path.Combine(dataDir, "sample_SimpleMerge.one"));</code></example>
      <example>Shows how to import all pages from a set of PDF documents while inserting pages from every PDF document as children of a top level OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

foreach (var file in new[] { "sampleText.pdf", "sampleImage.pdf", "sampleTable.pdf" })
{
    d.AppendChildLast(new Page()).Title = new Title() { TitleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append(file) };
    d.Import(Path.Combine(dataDir, file), new PdfImportOptions(), new MergeOptions() { InsertAt = int.MaxValue, InsertAsChild = true });
}

d.Save(Path.Combine(dataDir, "sample_StructuredMerge.one"));</code></example>
      <example>Shows how to import all content from a set of PDF documents while merging pages from every PDF document to a single OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

var importOptions = new PdfImportOptions();
var mergeOptions = new MergeOptions() { ImportAsSinglePage = true, PageSpacing = 100 };

d.Import(Path.Combine(dataDir, "sampleText.pdf"), importOptions, mergeOptions)
 .Import(Path.Combine(dataDir, "sampleImage.pdf"), importOptions, mergeOptions)
 .Import(Path.Combine(dataDir, "sampleTable.pdf"), importOptions, mergeOptions);

d.Save(Path.Combine(dataDir, "sample_SinglePageMerge.one"));</code></example>
    </member>
    <member name="M:Aspose.Note.Document.Print">
      <summary>
            Prints the document using the default printer.
            </summary>
      <example>Shows how to sent document to a printer using standard Windows dialog with default options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

var document = new Aspose.Note.Document(dataDir + "Aspose.one");

document.Print();</code></example>
      <example>Shows how to sent document to a printer using standard Windows dialog with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

var document = new Aspose.Note.Document(dataDir + "Aspose.one");

var printerSettings = new PrinterSettings() { FromPage = 0, ToPage = 10 };
printerSettings.DefaultPageSettings.Landscape = true;
printerSettings.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50, 50, 150, 50);

document.Print(new PrintOptions()
               {
                   PrinterSettings = printerSettings,
                   Resolution = 1200,
                   PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(),
                   DocumentName = "Test.one"
               });</code></example>
    </member>
    <member name="M:Aspose.Note.Document.Print(Aspose.Note.Saving.PrintOptions)">
      <summary>
            Prints the document using the default printer.
            </summary>
      <param name="options">
            Options used to print a document. Can be null.
            </param>
    </member>
    <member name="M:Aspose.Note.Document.DetectLayoutChanges">
      <summary>
            Detects all changes made to the document layout since the previous <see cref="M:Aspose.Note.Document.DetectLayoutChanges" /> call.
            In case <see cref="P:Aspose.Note.Document.AutomaticLayoutChangesDetectionEnabled" /> set to true, used automatically in the beginning of document export.
            </summary>
      <example>Shows how to save a document in different formats.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize the new Document
Document doc = new Document() { AutomaticLayoutChangesDetectionEnabled = false };

// Initialize the new Page
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append page node
doc.AppendChildLast(page);

// Save OneNote document in different formats, set text font size and detect layout changes manually.
doc.Save(dataDir + "ConsequentExportOperations_out.html");            
doc.Save(dataDir + "ConsequentExportOperations_out.pdf");            
doc.Save(dataDir + "ConsequentExportOperations_out.jpg");            
textStyle.FontSize = 11;           
doc.DetectLayoutChanges();            
doc.Save(dataDir + "ConsequentExportOperations_out.bmp");</code></example>
    </member>
    <member name="T:Aspose.Note.Fonts.DocumentFontsSubsystem">
      <summary>
            Simple implementation of Aspose.Note.Fonts.FontsSubsystem. Retrieves <see cref="T:System.Drawing.FontFamily" /> object from OS.
            </summary>
      <example>Shows how to save a document in pdf format using specified default font.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "missing-font.one"));

// Save the document as PDF
dataDir = dataDir + "SaveUsingDocumentFontsSubsystemWithDefaultFontName_out.pdf";
oneFile.Save(dataDir, new PdfSaveOptions() 
                      {
                          FontsSubsystem = DocumentFontsSubsystem.UsingDefaultFont("Times New Roman")
                      });</code></example>
      <example>Shows how to save a document in pdf format using default font from a file.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

string fontFile = Path.Combine(dataDir, "geo_1.ttf");

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "missing-font.one"));

// Save the document as PDF
dataDir = dataDir + "SaveUsingDocumentFontsSubsystemWithDefaultFontFromFile_out.pdf";
oneFile.Save(dataDir, new PdfSaveOptions()
                          {
                              FontsSubsystem = DocumentFontsSubsystem.UsingDefaultFontFromFile(fontFile)
                          });</code></example>
      <example>Shows how to save a document in pdf format using default font from a stream.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

string fontFile = Path.Combine(dataDir, "geo_1.ttf");

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "missing-font.one"));

// Save the document as PDF
dataDir = dataDir + "SaveUsingDocumentFontsSubsystemWithDefaultFontFromStream_out.pdf";

using (var stream = File.Open(fontFile, FileMode.Open, FileAccess.Read, FileShare.Read))
{
    oneFile.Save(dataDir, new PdfSaveOptions()
                              {
                                  FontsSubsystem = DocumentFontsSubsystem.UsingDefaultFontFromStream(stream)
                              });
}</code></example>
    </member>
    <member name="M:Aspose.Note.Fonts.DocumentFontsSubsystem.UsingDefaultFont(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Create new DocumentFontsSubsystem instance using specified default font name.
            </summary>
      <param name="defaultFontName">
            The default font name.
            </param>
      <param name="fontsSubstitutions">
            The fonts substitutions.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.Fonts.DocumentFontsSubsystem" />.
            </returns>
      <example>Shows how to save a document in pdf format using specified default font.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "missing-font.one"));

// Save the document as PDF
dataDir = dataDir + "SaveUsingDocumentFontsSubsystemWithDefaultFontName_out.pdf";
oneFile.Save(dataDir, new PdfSaveOptions() 
                      {
                          FontsSubsystem = DocumentFontsSubsystem.UsingDefaultFont("Times New Roman")
                      });</code></example>
    </member>
    <member name="M:Aspose.Note.Fonts.DocumentFontsSubsystem.UsingDefaultFontFromFile(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Create new DocumentFontsSubsystem instance using a font from specified file as default.
            </summary>
      <param name="filePath">
            The file containing default font name.
            </param>
      <param name="fontsSubstitutions">
            The fonts substitutions.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.Fonts.DocumentFontsSubsystem" />.
            </returns>
      <example>Shows how to save a document in pdf format using default font from a file.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

string fontFile = Path.Combine(dataDir, "geo_1.ttf");

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "missing-font.one"));

// Save the document as PDF
dataDir = dataDir + "SaveUsingDocumentFontsSubsystemWithDefaultFontFromFile_out.pdf";
oneFile.Save(dataDir, new PdfSaveOptions()
                          {
                              FontsSubsystem = DocumentFontsSubsystem.UsingDefaultFontFromFile(fontFile)
                          });</code></example>
    </member>
    <member name="M:Aspose.Note.Fonts.DocumentFontsSubsystem.UsingDefaultFontFromStream(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Create new DocumentFontsSubsystem instance using a font from specified stream as default.
            </summary>
      <param name="defaultFontStream">
            The stream containing the default font name.
            </param>
      <param name="fontsSubstitutions">
            The fonts substitutions.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.Fonts.DocumentFontsSubsystem" />.
            </returns>
      <example>Shows how to save a document in pdf format using default font from a stream.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

string fontFile = Path.Combine(dataDir, "geo_1.ttf");

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "missing-font.one"));

// Save the document as PDF
dataDir = dataDir + "SaveUsingDocumentFontsSubsystemWithDefaultFontFromStream_out.pdf";

using (var stream = File.Open(fontFile, FileMode.Open, FileAccess.Read, FileShare.Read))
{
    oneFile.Save(dataDir, new PdfSaveOptions()
                              {
                                  FontsSubsystem = DocumentFontsSubsystem.UsingDefaultFontFromStream(stream)
                              });
}</code></example>
    </member>
    <member name="M:Aspose.Note.Fonts.DocumentFontsSubsystem.#ctor(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Fonts.DocumentFontsSubsystem" /> class.
            </summary>
      <param name="defaultFontStream">
            The default Font.
            </param>
      <param name="fontsSubstitutions">
            The fonts substitutions.
            </param>
    </member>
    <member name="M:Aspose.Note.Fonts.DocumentFontsSubsystem.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Fonts.DocumentFontsSubsystem" /> class.
            </summary>
      <param name="defaultFontFile">
            The default Font.
            </param>
      <param name="fontsSubstitutions">
            The fonts substitutions.
            </param>
    </member>
    <member name="M:Aspose.Note.Fonts.DocumentFontsSubsystem.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Fonts.DocumentFontsSubsystem" /> class.
            </summary>
      <param name="fontsSubstitutions">
            The fonts substitutions.
            </param>
    </member>
    <member name="P:Aspose.Note.Fonts.DocumentFontsSubsystem.Default">
      <summary>
            Gets or sets the static default instance.
            </summary>
    </member>
    <member name="M:Aspose.Note.Fonts.DocumentFontsSubsystem.FetchFontFamily(System.String)">
      <summary>
            Fetches font family as a candidate for GetFontFamily.
            </summary>
      <param name="fontName">
            The font name.
            </param>
      <returns>
            The <see cref="T:System.Drawing.FontFamily" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.Fonts.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Note.Fonts" /> namespace contains classes which provides functionality to manipulate by font's environment for a document.
            </summary>
    </member>
    <member name="T:Aspose.Note.Image">
      <summary>
            Represents an Image.
            </summary>
      <example>Shows how to bind a hyperlink to an image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images(); 

var document = new Document();

var page = new Page(document);

var image = new Image(document, dataDir + "image.jpg") { HyperlinkUrl = "http://image.com" };

page.AppendChildLast(image);

document.AppendChildLast(page);

document.Save(dataDir + "Image with Hyperlink_out.one");</code></example>
      <example>Shows how to set text description for an image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

var document = new Document();
var page = new Page(document);
var image = new Image(document, dataDir + "image.jpg")
            {
                AlternativeTextTitle = "This is an image's title!",
                AlternativeTextDescription = "And this is an image's description!"
            };
page.AppendChildLast(image);
document.AppendChildLast(page);

dataDir = dataDir + "ImageAlternativeText_out.one";
document.Save(dataDir);</code></example>
      <example>Shows how to get an image from a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all Image nodes
IList&lt;Aspose.Note.Image&gt; nodes = oneFile.GetChildNodes&lt;Aspose.Note.Image&gt;();

foreach (Aspose.Note.Image image in nodes)
{
    using (MemoryStream stream = new MemoryStream(image.Bytes))
    {
        using (Bitmap bitMap = new Bitmap(stream))
        {
            // Save image bytes to a file
            bitMap.Save(String.Format(dataDir + "{0}", Path.GetFileName(image.FileName)));
        }
    }
}</code></example>
      <example>Shows how to get image's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all Image nodes
IList&lt;Aspose.Note.Image&gt; images = oneFile.GetChildNodes&lt;Aspose.Note.Image&gt;();

foreach (Aspose.Note.Image image in images)
{
    Console.WriteLine("Width: {0}", image.Width);
    Console.WriteLine("Height: {0}", image.Height);
    Console.WriteLine("OriginalWidth: {0}", image.OriginalWidth);
    Console.WriteLine("OriginalHeight: {0}", image.OriginalHeight);
    Console.WriteLine("FileName: {0}", image.FileName);
    Console.WriteLine("LastModifiedTime: {0}", image.LastModifiedTime);
    Console.WriteLine();
}</code></example>
      <example>Shows how to add new image with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Load an image
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "icon.jpg");

// Insert image in the document node
outlineElem.AppendChildLast(image);
image.Tags.Add(NoteTag.CreateYellowStar());

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddImageNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to add an image from file to a document with user defined properties.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load document from the stream.
Document doc = new Document(dataDir + "Aspose.one");

// Get the first page of the document.
Aspose.Note.Page page = doc.FirstChild;

// Load an image from the file.
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "image.jpg")
                          {
                              // Change the image's size according to your needs (optional).
                              Width = 100,
                              Height = 100,

                              // Set the image's location in the page (optional).
                              HorizontalOffset = 100,
                              VerticalOffset = 400,

                              // Set image alignment
                              Alignment = HorizontalAlignment.Right
                          };

// Add the image to the page.
page.AppendChildLast(image);</code></example>
      <example>Shows how to add an image from stream to a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

Outline outline1 = new Outline(doc);
OutlineElement outlineElem1 = new OutlineElement(doc);

using (FileStream fs = File.OpenRead(dataDir + "image.jpg"))
{

    // Load the second image using the image name, extension and stream.
    Aspose.Note.Image image1 = new Aspose.Note.Image(doc, "Penguins.jpg", fs)
                                   {
                                       // Set image alignment
                                       Alignment = HorizontalAlignment.Right
                                   };

    outlineElem1.AppendChildLast(image1);
}

outline1.AppendChildLast(outlineElem1);
page.AppendChildLast(outline1);

doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "BuildDocAndInsertImageUsingImageStream_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to add an image from file to a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object and set offset properties
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Load an image by the file path.
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "image.jpg")
                          {
                              // Set image alignment
                              Alignment = HorizontalAlignment.Right
                          };

// Add image
outlineElem.AppendChildLast(image);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "BuildDocAndInsertImage_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="M:Aspose.Note.Image.#ctor(Aspose.Note.Document,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Image" /> class.
            </summary>
      <param name="document">
            A parent document of the image.
            </param>
      <param name="path">
            A string that contains the path to the file from which to create the <see cref="T:Aspose.Note.Image" />.
            </param>
    </member>
    <member name="M:Aspose.Note.Image.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Image" /> class.
            </summary>
      <param name="path">
            A string that contains the path to the file from which to create the <see cref="T:Aspose.Note.Image" />.
            </param>
      <param name="altTitle">
            The alternative title.
            </param>
      <param name="altDescription">
            The alternative description.
            </param>
    </member>
    <member name="M:Aspose.Note.Image.#ctor(Aspose.Note.Document,System.String,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Image" /> class.
            </summary>
      <param name="document">
            A parent document of the image.
            </param>
      <param name="fileName">A name of the image.</param>
      <param name="imageStream">A stream which contains the image.</param>
    </member>
    <member name="M:Aspose.Note.Image.#ctor(System.String,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Image" /> class.
            </summary>
      <param name="fileName">A name of the image.</param>
      <param name="imageStream">A stream which contains the image.</param>
    </member>
    <member name="M:Aspose.Note.Image.#ctor(Aspose.Note.Document)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Image" /> class.
            </summary>
      <param name="document">
            A parent document of the image.
            </param>
    </member>
    <member name="M:Aspose.Note.Image.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Image" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Note.Image.LastModifiedTime">
      <summary>
            Gets or sets last modified time.
            </summary>
      <example>Shows how to get image's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all Image nodes
IList&lt;Aspose.Note.Image&gt; images = oneFile.GetChildNodes&lt;Aspose.Note.Image&gt;();

foreach (Aspose.Note.Image image in images)
{
    Console.WriteLine("Width: {0}", image.Width);
    Console.WriteLine("Height: {0}", image.Height);
    Console.WriteLine("OriginalWidth: {0}", image.OriginalWidth);
    Console.WriteLine("OriginalHeight: {0}", image.OriginalHeight);
    Console.WriteLine("FileName: {0}", image.FileName);
    Console.WriteLine("LastModifiedTime: {0}", image.LastModifiedTime);
    Console.WriteLine();
}</code></example>
    </member>
    <member name="P:Aspose.Note.Image.Width">
      <summary>
            Gets or sets the width. This is the real width of the image in the MS OneNote document.
            </summary>
      <example>Shows how to get image's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all Image nodes
IList&lt;Aspose.Note.Image&gt; images = oneFile.GetChildNodes&lt;Aspose.Note.Image&gt;();

foreach (Aspose.Note.Image image in images)
{
    Console.WriteLine("Width: {0}", image.Width);
    Console.WriteLine("Height: {0}", image.Height);
    Console.WriteLine("OriginalWidth: {0}", image.OriginalWidth);
    Console.WriteLine("OriginalHeight: {0}", image.OriginalHeight);
    Console.WriteLine("FileName: {0}", image.FileName);
    Console.WriteLine("LastModifiedTime: {0}", image.LastModifiedTime);
    Console.WriteLine();
}</code></example>
      <example>Shows how to add an image from file to a document with user defined properties.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load document from the stream.
Document doc = new Document(dataDir + "Aspose.one");

// Get the first page of the document.
Aspose.Note.Page page = doc.FirstChild;

// Load an image from the file.
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "image.jpg")
                          {
                              // Change the image's size according to your needs (optional).
                              Width = 100,
                              Height = 100,

                              // Set the image's location in the page (optional).
                              HorizontalOffset = 100,
                              VerticalOffset = 400,

                              // Set image alignment
                              Alignment = HorizontalAlignment.Right
                          };

// Add the image to the page.
page.AppendChildLast(image);</code></example>
    </member>
    <member name="P:Aspose.Note.Image.Height">
      <summary>
            Gets or sets the height. This is the real height of the image in the MS OneNote document.
            </summary>
      <example>Shows how to get image's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all Image nodes
IList&lt;Aspose.Note.Image&gt; images = oneFile.GetChildNodes&lt;Aspose.Note.Image&gt;();

foreach (Aspose.Note.Image image in images)
{
    Console.WriteLine("Width: {0}", image.Width);
    Console.WriteLine("Height: {0}", image.Height);
    Console.WriteLine("OriginalWidth: {0}", image.OriginalWidth);
    Console.WriteLine("OriginalHeight: {0}", image.OriginalHeight);
    Console.WriteLine("FileName: {0}", image.FileName);
    Console.WriteLine("LastModifiedTime: {0}", image.LastModifiedTime);
    Console.WriteLine();
}</code></example>
      <example>Shows how to add an image from file to a document with user defined properties.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load document from the stream.
Document doc = new Document(dataDir + "Aspose.one");

// Get the first page of the document.
Aspose.Note.Page page = doc.FirstChild;

// Load an image from the file.
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "image.jpg")
                          {
                              // Change the image's size according to your needs (optional).
                              Width = 100,
                              Height = 100,

                              // Set the image's location in the page (optional).
                              HorizontalOffset = 100,
                              VerticalOffset = 400,

                              // Set image alignment
                              Alignment = HorizontalAlignment.Right
                          };

// Add the image to the page.
page.AppendChildLast(image);</code></example>
    </member>
    <member name="P:Aspose.Note.Image.IsBackground">
      <summary>
            Gets whether the image is a background image.
            </summary>
    </member>
    <member name="P:Aspose.Note.Image.OriginalWidth">
      <summary>
            Gets the original width. This is the original width of the image, before resizing.
            </summary>
      <example>Shows how to get image's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all Image nodes
IList&lt;Aspose.Note.Image&gt; images = oneFile.GetChildNodes&lt;Aspose.Note.Image&gt;();

foreach (Aspose.Note.Image image in images)
{
    Console.WriteLine("Width: {0}", image.Width);
    Console.WriteLine("Height: {0}", image.Height);
    Console.WriteLine("OriginalWidth: {0}", image.OriginalWidth);
    Console.WriteLine("OriginalHeight: {0}", image.OriginalHeight);
    Console.WriteLine("FileName: {0}", image.FileName);
    Console.WriteLine("LastModifiedTime: {0}", image.LastModifiedTime);
    Console.WriteLine();
}</code></example>
    </member>
    <member name="P:Aspose.Note.Image.OriginalHeight">
      <summary>
            Gets the original height. This is the original width of the image, before resizing.
            </summary>
      <example>Shows how to get image's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all Image nodes
IList&lt;Aspose.Note.Image&gt; images = oneFile.GetChildNodes&lt;Aspose.Note.Image&gt;();

foreach (Aspose.Note.Image image in images)
{
    Console.WriteLine("Width: {0}", image.Width);
    Console.WriteLine("Height: {0}", image.Height);
    Console.WriteLine("OriginalWidth: {0}", image.OriginalWidth);
    Console.WriteLine("OriginalHeight: {0}", image.OriginalHeight);
    Console.WriteLine("FileName: {0}", image.FileName);
    Console.WriteLine("LastModifiedTime: {0}", image.LastModifiedTime);
    Console.WriteLine();
}</code></example>
    </member>
    <member name="P:Aspose.Note.Image.HorizontalOffset">
      <summary>
            Gets or sets the horizontal offset.
            </summary>
      <example>Shows how to add an image from file to a document with user defined properties.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load document from the stream.
Document doc = new Document(dataDir + "Aspose.one");

// Get the first page of the document.
Aspose.Note.Page page = doc.FirstChild;

// Load an image from the file.
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "image.jpg")
                          {
                              // Change the image's size according to your needs (optional).
                              Width = 100,
                              Height = 100,

                              // Set the image's location in the page (optional).
                              HorizontalOffset = 100,
                              VerticalOffset = 400,

                              // Set image alignment
                              Alignment = HorizontalAlignment.Right
                          };

// Add the image to the page.
page.AppendChildLast(image);</code></example>
    </member>
    <member name="P:Aspose.Note.Image.VerticalOffset">
      <summary>
            Gets or sets the vertical offset.
            </summary>
      <example>Shows how to add an image from file to a document with user defined properties.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load document from the stream.
Document doc = new Document(dataDir + "Aspose.one");

// Get the first page of the document.
Aspose.Note.Page page = doc.FirstChild;

// Load an image from the file.
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "image.jpg")
                          {
                              // Change the image's size according to your needs (optional).
                              Width = 100,
                              Height = 100,

                              // Set the image's location in the page (optional).
                              HorizontalOffset = 100,
                              VerticalOffset = 400,

                              // Set image alignment
                              Alignment = HorizontalAlignment.Right
                          };

// Add the image to the page.
page.AppendChildLast(image);</code></example>
    </member>
    <member name="P:Aspose.Note.Image.FilePath">
      <summary>
            Gets the path to the image file.
            </summary>
    </member>
    <member name="P:Aspose.Note.Image.FileName">
      <summary>
            Gets the file name.
            </summary>
      <example>Shows how to get image's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all Image nodes
IList&lt;Aspose.Note.Image&gt; images = oneFile.GetChildNodes&lt;Aspose.Note.Image&gt;();

foreach (Aspose.Note.Image image in images)
{
    Console.WriteLine("Width: {0}", image.Width);
    Console.WriteLine("Height: {0}", image.Height);
    Console.WriteLine("OriginalWidth: {0}", image.OriginalWidth);
    Console.WriteLine("OriginalHeight: {0}", image.OriginalHeight);
    Console.WriteLine("FileName: {0}", image.FileName);
    Console.WriteLine("LastModifiedTime: {0}", image.LastModifiedTime);
    Console.WriteLine();
}</code></example>
    </member>
    <member name="P:Aspose.Note.Image.Format">
      <summary>
            Gets the image's format.
            </summary>
    </member>
    <member name="P:Aspose.Note.Image.Bytes">
      <summary>
            Gets the image data store.
            </summary>
      <example>Shows how to get an image from a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all Image nodes
IList&lt;Aspose.Note.Image&gt; nodes = oneFile.GetChildNodes&lt;Aspose.Note.Image&gt;();

foreach (Aspose.Note.Image image in nodes)
{
    using (MemoryStream stream = new MemoryStream(image.Bytes))
    {
        using (Bitmap bitMap = new Bitmap(stream))
        {
            // Save image bytes to a file
            bitMap.Save(String.Format(dataDir + "{0}", Path.GetFileName(image.FileName)));
        }
    }
}</code></example>
    </member>
    <member name="P:Aspose.Note.Image.Tags">
      <summary>
            Gets the list of all tags of a paragraph.
            </summary>
      <example>Shows how to add new image with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Load an image
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "icon.jpg");

// Insert image in the document node
outlineElem.AppendChildLast(image);
image.Tags.Add(NoteTag.CreateYellowStar());

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddImageNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.Image.Alignment">
      <summary>
            Gets or sets the alignment.
            </summary>
      <example>Shows how to add an image from file to a document with user defined properties.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Load document from the stream.
Document doc = new Document(dataDir + "Aspose.one");

// Get the first page of the document.
Aspose.Note.Page page = doc.FirstChild;

// Load an image from the file.
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "image.jpg")
                          {
                              // Change the image's size according to your needs (optional).
                              Width = 100,
                              Height = 100,

                              // Set the image's location in the page (optional).
                              HorizontalOffset = 100,
                              VerticalOffset = 400,

                              // Set image alignment
                              Alignment = HorizontalAlignment.Right
                          };

// Add the image to the page.
page.AppendChildLast(image);</code></example>
      <example>Shows how to add an image from stream to a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

Outline outline1 = new Outline(doc);
OutlineElement outlineElem1 = new OutlineElement(doc);

using (FileStream fs = File.OpenRead(dataDir + "image.jpg"))
{

    // Load the second image using the image name, extension and stream.
    Aspose.Note.Image image1 = new Aspose.Note.Image(doc, "Penguins.jpg", fs)
                                   {
                                       // Set image alignment
                                       Alignment = HorizontalAlignment.Right
                                   };

    outlineElem1.AppendChildLast(image1);
}

outline1.AppendChildLast(outlineElem1);
page.AppendChildLast(outline1);

doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "BuildDocAndInsertImageUsingImageStream_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to add an image from file to a document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object and set offset properties
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Load an image by the file path.
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "image.jpg")
                          {
                              // Set image alignment
                              Alignment = HorizontalAlignment.Right
                          };

// Add image
outlineElem.AppendChildLast(image);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "BuildDocAndInsertImage_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.Image.AlternativeTextTitle">
      <summary>
            Gets or sets a title of alternative text for the image.
            </summary>
      <example>Shows how to set text description for an image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

var document = new Document();
var page = new Page(document);
var image = new Image(document, dataDir + "image.jpg")
            {
                AlternativeTextTitle = "This is an image's title!",
                AlternativeTextDescription = "And this is an image's description!"
            };
page.AppendChildLast(image);
document.AppendChildLast(page);

dataDir = dataDir + "ImageAlternativeText_out.one";
document.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.Image.AlternativeTextDescription">
      <summary>
            Gets or sets a body an alternative text for the image.
            </summary>
      <example>Shows how to set text description for an image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images();

var document = new Document();
var page = new Page(document);
var image = new Image(document, dataDir + "image.jpg")
            {
                AlternativeTextTitle = "This is an image's title!",
                AlternativeTextDescription = "And this is an image's description!"
            };
page.AppendChildLast(image);
document.AppendChildLast(page);

dataDir = dataDir + "ImageAlternativeText_out.one";
document.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.Image.HyperlinkUrl">
      <summary>
            Gets or sets the hyperlink associated with the image.
            </summary>
      <example>Shows how to bind a hyperlink to an image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Images(); 

var document = new Document();

var page = new Page(document);

var image = new Image(document, dataDir + "image.jpg") { HyperlinkUrl = "http://image.com" };

page.AppendChildLast(image);

document.AppendChildLast(page);

document.Save(dataDir + "Image with Hyperlink_out.one");</code></example>
    </member>
    <member name="M:Aspose.Note.Image.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="T:Aspose.Note.Importing.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Note.Importing" /> namespace contains classes providing api to import content from documents in PDF format.
            </summary>
    </member>
    <member name="T:Aspose.Note.Importing.PdfImporter">
      <summary>
            The class providing api to import content from documents in PDF format.
            The api allows to import from PDF document located either in a file or in a stream using specified options.
            The import options are passed using <see cref="T:Aspose.Note.Importing.PdfImportOptions" />.
            </summary>
      <example>Shows how to import all pages from PDF document grouping every 5 pages to a single OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

var mergeOptions = new MergeOptions() { ImportAsSinglePage = true, PageSpacing = 100 };

IEnumerable&lt;Page&gt; pages = PdfImporter.Import(Path.Combine(dataDir, "SampleGrouping.pdf"));
while (pages.Any())
{
    d.Merge(pages.Take(5), mergeOptions);
    pages = pages.Skip(5);
}

d.Save(Path.Combine(dataDir, "sample_CustomMerge.one"));</code></example>
    </member>
    <member name="M:Aspose.Note.Importing.PdfImporter.Import(System.IO.Stream,Aspose.Note.Importing.PdfImportOptions)">
      <summary>
            Imports content of PDF document from a provided stream.
            </summary>
      <param name="stream">
            The stream.
            </param>
      <param name="options">
            The options.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.Importing.PdfImporter" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.Importing.PdfImporter.Import(System.String,Aspose.Note.Importing.PdfImportOptions)">
      <summary>
            Imports content of PDF document from a specified file.
            </summary>
      <param name="file">
            The PDF file.
            </param>
      <param name="options">
            The options.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.Importing.PdfImporter" />.
            </returns>
      <example>Shows how to import all pages from PDF document grouping every 5 pages to a single OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

var mergeOptions = new MergeOptions() { ImportAsSinglePage = true, PageSpacing = 100 };

IEnumerable&lt;Page&gt; pages = PdfImporter.Import(Path.Combine(dataDir, "SampleGrouping.pdf"));
while (pages.Any())
{
    d.Merge(pages.Take(5), mergeOptions);
    pages = pages.Skip(5);
}

d.Save(Path.Combine(dataDir, "sample_CustomMerge.one"));</code></example>
    </member>
    <member name="T:Aspose.Note.Importing.PdfImportOptions">
      <summary>
            Allows to specify options when importing content from PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Note.Importing.PdfImportOptions.Password">
      <summary>
            Gets or sets a password to decrypt the document content.
            </summary>
    </member>
    <member name="P:Aspose.Note.Importing.PdfImportOptions.PageIndex">
      <summary>
            Gets or sets the index of the first page to save. By default is 0.
            </summary>
    </member>
    <member name="P:Aspose.Note.Importing.PdfImportOptions.PageCount">
      <summary>
            Gets or sets the number of pages to save. By default is <see cref="F:System.Int32.MaxValue" />
            which means all pages of the document will be rendered.
            </summary>
    </member>
    <member name="T:Aspose.Note.INotebookChildNode">
      <summary>
            Represents an Aspose.Note notebook's child.
            </summary>
    </member>
    <member name="P:Aspose.Note.INotebookChildNode.DisplayName">
      <summary>
            Gets a display name.
            </summary>
    </member>
    <member name="P:Aspose.Note.INotebookChildNode.Color">
      <summary>
            Gets a color. Default value is Color.Empty.
            </summary>
    </member>
    <member name="P:Aspose.Note.INotebookChildNode.Guid">
      <summary>
            Gets the object's globally unique id.
            </summary>
      <value>
            The GUID.
            </value>
    </member>
    <member name="T:Aspose.Note.License">
      <summary>
            Provides methods to license the component.
            </summary>
      <example>Shows how to load a license for Aspose.Note from a file.<code>
Aspose.Note.License license = new Aspose.Note.License();
license.SetLicense("Aspose.Note.lic");</code></example>
      <example>Shows how to load a license for Aspose.Note from a stream.<code>
Aspose.Note.License license = new Aspose.Note.License();
using (FileStream myStream = new FileStream("Aspose.Note.lic", FileMode.Open))
{
    license.SetLicense(myStream);
}</code></example>
      <example>Shows how to load a license for Aspose.Note from embedded file resource.<code>
// Instantiate the License class
Aspose.Note.License license = new Aspose.Note.License();

// Pass only the name of the license file embedded in the assembly
license.SetLicense("Aspose.Note.lic");</code></example>
    </member>
    <member name="M:Aspose.Note.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <remarks>
        <p>Tries to find the license in the following locations:</p>
        <p>1. Explicit path.</p>
        <p>2. The folder that contains the Aspose component assembly.</p>
        <p>3. The folder that contains the client's calling assembly.</p>
        <p>4. The folder that contains the entry (startup) assembly.</p>
        <p>5. An embedded resource in the client's calling assembly.</p>
        <p>
          <b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
        <p>1. Explicit path.</p>
        <p>2. An embedded resource in the client's calling assembly.</p>
      </remarks>
      <param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param>
      <example>Shows how to load a license for Aspose.Note from a file.<code>
Aspose.Note.License license = new Aspose.Note.License();
license.SetLicense("Aspose.Note.lic");</code></example>
      <example>Shows how to load a license for Aspose.Note from embedded file resource.<code>
// Instantiate the License class
Aspose.Note.License license = new Aspose.Note.License();

// Pass only the name of the license file embedded in the assembly
license.SetLicense("Aspose.Note.lic");</code></example>
    </member>
    <member name="M:Aspose.Note.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">A stream that contains the license.</param>
      <remarks>
        <p>Use this method to load a license from a stream.</p>
      </remarks>
      <example>Shows how to load a license for Aspose.Note from a stream.<code>
Aspose.Note.License license = new Aspose.Note.License();
using (FileStream myStream = new FileStream("Aspose.Note.lic", FileMode.Open))
{
    license.SetLicense(myStream);
}</code></example>
    </member>
    <member name="T:Aspose.Note.Metered">
      <summary>
             Provides methods to set metered key.
             </summary>
      <example>
             In this example, an attempt will be made to set metered public and private key
             <code>
             [C#]
             
             Metered metered = new Metered();
             metered.SetMeteredKey("PublicKey", "PrivateKey");
            
            
             [Visual Basic]
            
             Dim metered As Metered = New Metered
             metered.SetMeteredKey("PublicKey", "PrivateKey")
             </code></example>
      <example>Shows how to set metered license.<code>
Metered metered = new Metered();
metered.SetMeteredKey("MyPublicKey", "MyPrivateKey");

Console.WriteLine($"Credit before operation: {Metered.GetConsumptionCredit():F2}");
Console.WriteLine($"Consumption quantity before operation: {Metered.GetConsumptionQuantity():F2}");

// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(Path.Combine(dataDir, "Aspose.one"));

document.Save(Path.Combine(dataDir, "MeteredLicense.pdf"));

Console.WriteLine($"Credit before operation: {Metered.GetConsumptionCredit():F2}");
Console.WriteLine($"Consumption quantity before operation: {Metered.GetConsumptionQuantity():F2}");</code></example>
    </member>
    <member name="M:Aspose.Note.Metered.SetMeteredKey(System.String,System.String)">
      <summary>
            Sets metered public and private keys.
            </summary>
      <remarks> 
            If you purchase metered license, this API should be called on application startup, normally, this is enough.
            However, if metered fails to upload consumption data during 24 hours period, the license will be set to evaluation status. To avoid such case, you should regularly check the license status If it is evaluation status, call this API again.</remarks>
      <param name="publicKey">The public key.</param>
      <param name="privateKey">The private key.</param>
      <example>Shows how to set metered license.<code>
Metered metered = new Metered();
metered.SetMeteredKey("MyPublicKey", "MyPrivateKey");

Console.WriteLine($"Credit before operation: {Metered.GetConsumptionCredit():F2}");
Console.WriteLine($"Consumption quantity before operation: {Metered.GetConsumptionQuantity():F2}");

// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(Path.Combine(dataDir, "Aspose.one"));

document.Save(Path.Combine(dataDir, "MeteredLicense.pdf"));

Console.WriteLine($"Credit before operation: {Metered.GetConsumptionCredit():F2}");
Console.WriteLine($"Consumption quantity before operation: {Metered.GetConsumptionQuantity():F2}");</code></example>
    </member>
    <member name="M:Aspose.Note.Metered.ResetMeteredKey">
      <summary>
            Removes previously setup license.
            </summary>
    </member>
    <member name="M:Aspose.Note.Metered.GetConsumptionCredit">
      <summary>
            Gets consumption credit.
            </summary>
      <returns>Returns the number of consumed credit points.</returns>
    </member>
    <member name="M:Aspose.Note.Metered.GetConsumptionQuantity">
      <summary>
            Gets consumption file size.
            </summary>
      <returns>Returns the number of consumed bytes.</returns>
    </member>
    <member name="T:Aspose.Note.LoadOptions">
      <summary>
            Options used to load a document.
            </summary>
      <example>Shows how to an encrypted document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

LoadOptions loadOptions = new LoadOptions { DocumentPassword = "password" };
Document doc = new Document(dataDir + "Sample1.one", loadOptions);</code></example>
      <example>Shows how to an encrypted notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();
var notebook = new Notebook(dataDir + "test.onetoc2", new NotebookLoadOptions() { DeferredLoading = true });

notebook.LoadChildDocument(dataDir + "Aspose.one");  
notebook.LoadChildDocument(dataDir + "Locked Pass1.one", new LoadOptions() { DocumentPassword = "pass" });
notebook.LoadChildDocument(dataDir + "Locked Pass2.one", new LoadOptions() { DocumentPassword = "pass2" });</code></example>
      <example>Shows how to get page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document document = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

// Get first page
Page firstPage = document.FirstChild;
foreach (Page pageRevision in document.GetPageHistory(firstPage))
{
    /*Use pageRevision like a regular page.*/
    Console.WriteLine("LastModifiedTime: {0}", pageRevision.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", pageRevision.CreationTime);
    Console.WriteLine("Title: {0}", pageRevision.Title);
    Console.WriteLine("Level: {0}", pageRevision.Level);
    Console.WriteLine("Author: {0}", pageRevision.Author);
    Console.WriteLine();
}</code></example>
    </member>
    <member name="P:Aspose.Note.LoadOptions.LoadHistory">
      <summary>
            Gets or sets a value indicating whether a document loader should ignore the history.
            Use this option to decrease memory and CPU usage.
            Default value is <c>true</c>.
            </summary>
      <example>Shows how to get page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document document = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

// Get first page
Page firstPage = document.FirstChild;
foreach (Page pageRevision in document.GetPageHistory(firstPage))
{
    /*Use pageRevision like a regular page.*/
    Console.WriteLine("LastModifiedTime: {0}", pageRevision.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", pageRevision.CreationTime);
    Console.WriteLine("Title: {0}", pageRevision.Title);
    Console.WriteLine("Level: {0}", pageRevision.Level);
    Console.WriteLine("Author: {0}", pageRevision.Author);
    Console.WriteLine();
}</code></example>
    </member>
    <member name="P:Aspose.Note.LoadOptions.DocumentPassword">
      <summary>
            Gets or sets a password for the encrypted document content. Value is ignored in case the document is not password protected.
            </summary>
      <example>Shows how to an encrypted document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

LoadOptions loadOptions = new LoadOptions { DocumentPassword = "password" };
Document doc = new Document(dataDir + "Sample1.one", loadOptions);</code></example>
      <example>Shows how to an encrypted notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();
var notebook = new Notebook(dataDir + "test.onetoc2", new NotebookLoadOptions() { DeferredLoading = true });

notebook.LoadChildDocument(dataDir + "Aspose.one");  
notebook.LoadChildDocument(dataDir + "Locked Pass1.one", new LoadOptions() { DocumentPassword = "pass" });
notebook.LoadChildDocument(dataDir + "Locked Pass2.one", new LoadOptions() { DocumentPassword = "pass2" });</code></example>
    </member>
    <member name="T:Aspose.Note.MergeOptions">
      <summary>
            The options for merging a collection of pages.
            </summary>
      <example>Shows how to import all pages from PDF document grouping every 5 pages to a single OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

var mergeOptions = new MergeOptions() { ImportAsSinglePage = true, PageSpacing = 100 };

IEnumerable&lt;Page&gt; pages = PdfImporter.Import(Path.Combine(dataDir, "SampleGrouping.pdf"));
while (pages.Any())
{
    d.Merge(pages.Take(5), mergeOptions);
    pages = pages.Skip(5);
}

d.Save(Path.Combine(dataDir, "sample_CustomMerge.one"));</code></example>
      <example>Shows how to import all pages from a set of PDF documents while inserting pages from every PDF document as children of a top level OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

foreach (var file in new[] { "sampleText.pdf", "sampleImage.pdf", "sampleTable.pdf" })
{
    d.AppendChildLast(new Page()).Title = new Title() { TitleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append(file) };
    d.Import(Path.Combine(dataDir, file), new PdfImportOptions(), new MergeOptions() { InsertAt = int.MaxValue, InsertAsChild = true });
}

d.Save(Path.Combine(dataDir, "sample_StructuredMerge.one"));</code></example>
      <example>Shows how to import all content from a set of PDF documents while merging pages from every PDF document to a single OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

var importOptions = new PdfImportOptions();
var mergeOptions = new MergeOptions() { ImportAsSinglePage = true, PageSpacing = 100 };

d.Import(Path.Combine(dataDir, "sampleText.pdf"), importOptions, mergeOptions)
 .Import(Path.Combine(dataDir, "sampleImage.pdf"), importOptions, mergeOptions)
 .Import(Path.Combine(dataDir, "sampleTable.pdf"), importOptions, mergeOptions);

d.Save(Path.Combine(dataDir, "sample_SinglePageMerge.one"));</code></example>
    </member>
    <member name="P:Aspose.Note.MergeOptions.ImportAsSinglePage">
      <summary>
            Gets or sets a value indicating whether to import provided pages as single page.
            </summary>
      <example>Shows how to import all pages from PDF document grouping every 5 pages to a single OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

var mergeOptions = new MergeOptions() { ImportAsSinglePage = true, PageSpacing = 100 };

IEnumerable&lt;Page&gt; pages = PdfImporter.Import(Path.Combine(dataDir, "SampleGrouping.pdf"));
while (pages.Any())
{
    d.Merge(pages.Take(5), mergeOptions);
    pages = pages.Skip(5);
}

d.Save(Path.Combine(dataDir, "sample_CustomMerge.one"));</code></example>
      <example>Shows how to import all content from a set of PDF documents while merging pages from every PDF document to a single OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

var importOptions = new PdfImportOptions();
var mergeOptions = new MergeOptions() { ImportAsSinglePage = true, PageSpacing = 100 };

d.Import(Path.Combine(dataDir, "sampleText.pdf"), importOptions, mergeOptions)
 .Import(Path.Combine(dataDir, "sampleImage.pdf"), importOptions, mergeOptions)
 .Import(Path.Combine(dataDir, "sampleTable.pdf"), importOptions, mergeOptions);

d.Save(Path.Combine(dataDir, "sample_SinglePageMerge.one"));</code></example>
    </member>
    <member name="P:Aspose.Note.MergeOptions.PageSpacing">
      <summary>
            Gets or sets the spacing between pages when imported as a single page.
            </summary>
      <example>Shows how to import all pages from PDF document grouping every 5 pages to a single OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

var mergeOptions = new MergeOptions() { ImportAsSinglePage = true, PageSpacing = 100 };

IEnumerable&lt;Page&gt; pages = PdfImporter.Import(Path.Combine(dataDir, "SampleGrouping.pdf"));
while (pages.Any())
{
    d.Merge(pages.Take(5), mergeOptions);
    pages = pages.Skip(5);
}

d.Save(Path.Combine(dataDir, "sample_CustomMerge.one"));</code></example>
      <example>Shows how to import all content from a set of PDF documents while merging pages from every PDF document to a single OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

var importOptions = new PdfImportOptions();
var mergeOptions = new MergeOptions() { ImportAsSinglePage = true, PageSpacing = 100 };

d.Import(Path.Combine(dataDir, "sampleText.pdf"), importOptions, mergeOptions)
 .Import(Path.Combine(dataDir, "sampleImage.pdf"), importOptions, mergeOptions)
 .Import(Path.Combine(dataDir, "sampleTable.pdf"), importOptions, mergeOptions);

d.Save(Path.Combine(dataDir, "sample_SinglePageMerge.one"));</code></example>
    </member>
    <member name="P:Aspose.Note.MergeOptions.InsertAt">
      <summary>
            Gets or sets the position where imported pages will be inserted.
            </summary>
      <remarks>If value is greater than count of pages in target document then imported pages added to the end of the document.</remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
      <example>Shows how to import all pages from a set of PDF documents while inserting pages from every PDF document as children of a top level OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

foreach (var file in new[] { "sampleText.pdf", "sampleImage.pdf", "sampleTable.pdf" })
{
    d.AppendChildLast(new Page()).Title = new Title() { TitleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append(file) };
    d.Import(Path.Combine(dataDir, file), new PdfImportOptions(), new MergeOptions() { InsertAt = int.MaxValue, InsertAsChild = true });
}

d.Save(Path.Combine(dataDir, "sample_StructuredMerge.one"));</code></example>
    </member>
    <member name="P:Aspose.Note.MergeOptions.InsertAsChild">
      <summary>
            Gets or sets a value indicating whether inserted pages should be added as a children of previous page.
            </summary>
      <example>Shows how to import all pages from a set of PDF documents while inserting pages from every PDF document as children of a top level OneNote page.<code>
string dataDir = RunExamples.GetDataDir_Import();

var d = new Document();

foreach (var file in new[] { "sampleText.pdf", "sampleImage.pdf", "sampleTable.pdf" })
{
    d.AppendChildLast(new Page()).Title = new Title() { TitleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append(file) };
    d.Import(Path.Combine(dataDir, file), new PdfImportOptions(), new MergeOptions() { InsertAt = int.MaxValue, InsertAsChild = true });
}

d.Save(Path.Combine(dataDir, "sample_StructuredMerge.one"));</code></example>
    </member>
    <member name="T:Aspose.Note.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Note" /> namespace contains classes which represent document structure.
            </summary>
    </member>
    <member name="T:Aspose.Note.Notebook">
      <summary>
            Represents an Aspose.Note notebook.
            </summary>
      <example>Shows how to save notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

var notebook = new Notebook();

dataDir = dataDir + "test_out.onetoc2";

// Save the Notebook
notebook.Save(dataDir);</code></example>
      <example>Shows how to save notebook in pdf format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

dataDir = dataDir + "ConvertToPDF_out.pdf";

// Save the Notebook
notebook.Save(dataDir);</code></example>
      <example>Shows how to save notebook as image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

dataDir = dataDir + "ConvertToImage_out.png";

// Save the Notebook
notebook.Save(dataDir);</code></example>
      <example>Shows how to get all text from a notebook.<code>
string inputFile = "notebook.onetoc2";
string dataDir = RunExamples.GetDataDir_NoteBook();

Notebook rootNotebook = new Notebook(dataDir + inputFile);

IList&lt;RichText&gt; allRichTextNodes = rootNotebook.GetChildNodes&lt;RichText&gt;();
foreach (RichText richTextNode in allRichTextNodes)
{
    Console.WriteLine(richTextNode.Text);
}</code></example>
      <example>Shows how to save flattened notebook in pdf format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

// Save the Notebook
dataDir = dataDir + "ConvertToPDFAsFlattened_out.pdf";
notebook.Save(
    dataDir,
    new NotebookPdfSaveOptions
    {
        Flatten = true
    });</code></example>
      <example>Shows how to iterate through documents of a notebook loading them lazily.<code>
string inputFile = "Notizbuch öffnen.onetoc2";
string dataDir = RunExamples.GetDataDir_NoteBook();

// By default children loading is "lazy".
Notebook notebook = new Notebook(dataDir + inputFile);

foreach (var notebookChildNode in notebook.OfType&lt;Document&gt;()) 
{
    // Actual loading of the child document happens only here.
    // Do something with child document
}</code></example>
      <example>Shows how to add new section to a notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

// Append a new child to the Notebook
notebook.AppendChild(new Document(dataDir + "Neuer Abschnitt 1.one"));

dataDir = dataDir + "AddChildNode_out.onetoc2";

// Save the Notebook
notebook.Save(dataDir);</code></example>
      <example>Shows how to load notebook from a stream.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

FileStream stream = new FileStream(dataDir + "Notizbuch öffnen.onetoc2", FileMode.Open);

var notebook = new Notebook(stream);

using (FileStream childStream = new FileStream(dataDir + "Aspose.one", FileMode.Open))
{
    notebook.LoadChildDocument(childStream);
}

notebook.LoadChildDocument(dataDir + "Sample1.one");</code></example>
      <example>Shows how to an encrypted notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();
var notebook = new Notebook(dataDir + "test.onetoc2", new NotebookLoadOptions() { DeferredLoading = true });

notebook.LoadChildDocument(dataDir + "Aspose.one");  
notebook.LoadChildDocument(dataDir + "Locked Pass1.one", new LoadOptions() { DocumentPassword = "pass" });
notebook.LoadChildDocument(dataDir + "Locked Pass2.one", new LoadOptions() { DocumentPassword = "pass2" });</code></example>
      <example>Shows how to save notebook as image with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

var notebookSaveOptions = new NotebookImageSaveOptions(SaveFormat.Png);

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.Resolution = 400;

dataDir = dataDir + "ConvertToImageWithOptions_out.png";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
      <example>Shows how to save flattened notebook as image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch öffnen.onetoc2");

var notebookSaveOptions = new NotebookImageSaveOptions(SaveFormat.Png);

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.Resolution = 400;
notebookSaveOptions.Flatten = true;

dataDir = dataDir + "ConvertToImageAsFlattenedNotebook_out.png";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
      <example>Shows how to remove a section from a notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "test.onetoc2");

// Traverse through its child nodes for searching the desired child item
foreach (var child in new List&lt;INotebookChildNode&gt;(notebook))
{
    if (child.DisplayName == "Remove Me")
    {
        // Remove the Child Item from the Notebook
        notebook.RemoveChild(child);
    }
}

dataDir = dataDir + "RemoveChildNode_out.onetoc2";

// Save the Notebook
notebook.Save(dataDir);</code></example>
      <example>Shows how to iterate through preloaded documents of a notebook.<code>
// By default children loading is "lazy".
// Therefore for instant loading has took place,
// it is necessary to set the NotebookLoadOptions.InstantLoading flag.
NotebookLoadOptions loadOptions = new NotebookLoadOptions { InstantLoading = true };

String inputFile = "Notizbuch öffnen.onetoc2";
String dataDir = RunExamples.GetDataDir_NoteBook();
Notebook notebook = new Notebook(dataDir + inputFile, loadOptions);

// All child documents are already loaded.
foreach (INotebookChildNode notebookChildNode in notebook.OfType&lt;Document&gt;()) 
{
   // Do something with child document
}</code></example>
      <example>Shows how to pass through content of a notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = "Open Notebook.onetoc2";
try
{
    var notebook = new Notebook(dataDir + fileName);
    foreach (var notebookChildNode in notebook)
    {
        Console.WriteLine(notebookChildNode.DisplayName);
        if (notebookChildNode is Document)
        {
            // Do something with child document
        }
        else if (notebookChildNode is Notebook)
        {
            // Do something with child notebook
        }
    }
}
catch (Exception ex)
{
    Console.WriteLine(ex.Message);
}</code></example>
    </member>
    <member name="M:Aspose.Note.Notebook.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Notebook" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Note.Notebook.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Notebook" /> class.
            Opens an existing OneNote notebook from a file.
            </summary>
      <param name="filePath">
            The file path.
            </param>
    </member>
    <member name="M:Aspose.Note.Notebook.#ctor(System.String,Aspose.Note.NotebookLoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Notebook" /> class.
            Opens an existing OneNote notebook from a file. Allows to specify additional options such as a children loading strategy ("lazy"/instant).
            </summary>
      <param name="filePath">
            The file path.
            </param>
      <param name="loadOptions">
            The load options.
            </param>
    </member>
    <member name="M:Aspose.Note.Notebook.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Notebook" /> class.
            Opens an existing OneNote notebook from a stream.
            </summary>
      <param name="stream">
            The stream.
            </param>
    </member>
    <member name="M:Aspose.Note.Notebook.#ctor(System.IO.Stream,Aspose.Note.NotebookLoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Notebook" /> class.
            Opens an existing OneNote notebook from a stream. Allows to specify additional loading options.
            </summary>
      <param name="stream">
            The stream.
            </param>
      <param name="loadOptions">
            The load options.
            </param>
    </member>
    <member name="P:Aspose.Note.Notebook.IsHistoryEnabled">
      <summary>
            Gets or sets a value indicating whether the history is enabled.
            </summary>
    </member>
    <member name="P:Aspose.Note.Notebook.Color">
      <summary>
            Gets or sets the color.
            </summary>
    </member>
    <member name="P:Aspose.Note.Notebook.DisplayName">
      <summary>
            Gets or sets the display name.
            </summary>
      <example>Shows how to remove a section from a notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "test.onetoc2");

// Traverse through its child nodes for searching the desired child item
foreach (var child in new List&lt;INotebookChildNode&gt;(notebook))
{
    if (child.DisplayName == "Remove Me")
    {
        // Remove the Child Item from the Notebook
        notebook.RemoveChild(child);
    }
}

dataDir = dataDir + "RemoveChildNode_out.onetoc2";

// Save the Notebook
notebook.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.Notebook.Guid">
      <summary>
            Gets the object's globally unique id.
            </summary>
      <value>
            The GUID.
            </value>
    </member>
    <member name="P:Aspose.Note.Notebook.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:Aspose.Note.Notebook" />.
            </summary>
    </member>
    <member name="P:Aspose.Note.Notebook.FileFormat">
      <summary>
            Gets file format (OneNote 2010, OneNote Online).
            </summary>
    </member>
    <member name="P:Aspose.Note.Notebook.Item(System.Int32)">
      <summary>
            Gets notebook child node by the given index.
            </summary>
      <param name="index">
            Index to child node.
            </param>
      <returns>
            The child node on the <paramref name="index" /> position.
            </returns>
    </member>
    <member name="M:Aspose.Note.Notebook.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through child nodes of the <see cref="T:Aspose.Note.Notebook" />.
            </summary>
      <returns>
            A <see cref="T:System.Collections.IEnumerator" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.Notebook.GetChildNodes``1">
      <summary>
            Get all child nodes by the node type.
            </summary>
      <typeparam name="T1">The type of elements in the returned list.</typeparam>
      <returns>A list of child nodes.</returns>
    </member>
    <member name="M:Aspose.Note.Notebook.AppendChild(Aspose.Note.INotebookChildNode)">
      <summary>
            Adds the node to the end of the list.
            </summary>
      <param name="newChild">
            The node to add.
            </param>
      <returns>
            The added node.
            </returns>
    </member>
    <member name="M:Aspose.Note.Notebook.RemoveChild(Aspose.Note.INotebookChildNode)">
      <summary>
            Removes the child node.
            </summary>
      <param name="oldChild">
            The node to remove.
            </param>
      <returns>
            The removed node.
            </returns>
      <example>Shows how to access all sections from a notebook.<code>
string inputFile = "notebook.onetoc2";
string dataDir = RunExamples.GetDataDir_NoteBook();

Notebook rootNotebook = new Notebook(dataDir + inputFile);

IList&lt;Document&gt; allDocuments = rootNotebook.GetChildNodes&lt;Document&gt;();
foreach (Document document in allDocuments) 
{
    Console.WriteLine(document.DisplayName);
}</code></example>
      <example>Shows how to remove a section from a notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "test.onetoc2");

// Traverse through its child nodes for searching the desired child item
foreach (var child in new List&lt;INotebookChildNode&gt;(notebook))
{
    if (child.DisplayName == "Remove Me")
    {
        // Remove the Child Item from the Notebook
        notebook.RemoveChild(child);
    }
}

dataDir = dataDir + "RemoveChildNode_out.onetoc2";

// Save the Notebook
notebook.Save(dataDir);</code></example>
      <example>Shows how to save a notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

var notebook = new Notebook(dataDir + "test.onetoc2", new NotebookLoadOptions() { DeferredLoading = false });

notebook.Save(dataDir + "notebook_out.onetoc2", new NotebookOneSaveOptions() { DeferredSaving = true});

if (notebook.Any())
{
    var childDocument0 = notebook[0] as Document;

    childDocument0.Save(dataDir + "Not Locked_out.one");

    var childDocument1 = notebook[1] as Document;

    childDocument1.Save(dataDir + "Locked Pass1_out.one", new OneSaveOptions() { DocumentPassword = "pass" });

    var childDocument2 = notebook[2] as Document;

    childDocument2.Save(dataDir + "Locked Pass2_out.one", new OneSaveOptions() { DocumentPassword = "pass2" });
}</code></example>
    </member>
    <member name="M:Aspose.Note.Notebook.LoadChildDocument(System.String)">
      <summary>
            Adds a child document node.
            Opens an existing OneNote document from a file.
            </summary>
      <param name="filePath">
            The file path.
            </param>
      <example>Shows how to load notebook from a stream.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

FileStream stream = new FileStream(dataDir + "Notizbuch öffnen.onetoc2", FileMode.Open);

var notebook = new Notebook(stream);

using (FileStream childStream = new FileStream(dataDir + "Aspose.one", FileMode.Open))
{
    notebook.LoadChildDocument(childStream);
}

notebook.LoadChildDocument(dataDir + "Sample1.one");</code></example>
    </member>
    <member name="M:Aspose.Note.Notebook.LoadChildDocument(System.String,Aspose.Note.LoadOptions)">
      <summary>
            Adds a child document node.
            Opens an existing OneNote document from a file. Allows to specify additional load options.
            </summary>
      <param name="filePath">
            The file path.
            </param>
      <param name="loadOptions">
            The load options.
            </param>
    </member>
    <member name="M:Aspose.Note.Notebook.LoadChildDocument(System.IO.Stream)">
      <summary>
            Adds a child document node.
            Opens an existing OneNote document from a stream.
            </summary>
      <param name="stream">
            The stream.
            </param>
      <example>Shows how to load notebook from a stream.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

FileStream stream = new FileStream(dataDir + "Notizbuch öffnen.onetoc2", FileMode.Open);

var notebook = new Notebook(stream);

using (FileStream childStream = new FileStream(dataDir + "Aspose.one", FileMode.Open))
{
    notebook.LoadChildDocument(childStream);
}

notebook.LoadChildDocument(dataDir + "Sample1.one");</code></example>
    </member>
    <member name="M:Aspose.Note.Notebook.LoadChildDocument(System.IO.Stream,Aspose.Note.LoadOptions)">
      <summary>
            Adds a child document node.
            Opens an existing OneNote document from a stream. Allows to specify additional load options.
            </summary>
      <param name="stream">
            The stream.
            </param>
      <param name="loadOptions">
            The load options.
            </param>
    </member>
    <member name="M:Aspose.Note.Notebook.LoadChildNotebook(System.String)">
      <summary>
            Adds a child notebook node.
            Opens an existing OneNote notebook from a file.
            </summary>
      <param name="filePath">
            The file path.
            </param>
    </member>
    <member name="M:Aspose.Note.Notebook.LoadChildNotebook(System.String,Aspose.Note.NotebookLoadOptions)">
      <summary>
            Adds a child notebook node.
            Opens an existing OneNote notebook from a file. Allows to specify additional load options.
            </summary>
      <param name="filePath">
            The file path.
            </param>
      <param name="loadOptions">
            The load options.
            </param>
    </member>
    <member name="M:Aspose.Note.Notebook.LoadChildNotebook(System.IO.Stream)">
      <summary>
            Adds a child notebook node.
            Opens an existing OneNote notebook from a stream.
            </summary>
      <param name="stream">
            The stream.
            </param>
    </member>
    <member name="M:Aspose.Note.Notebook.LoadChildNotebook(System.IO.Stream,Aspose.Note.NotebookLoadOptions)">
      <summary>
            Adds a child notebook node.
            Opens an existing OneNote notebook from a stream. Allows to specify additional load options.
            </summary>
      <param name="stream">
            The stream.
            </param>
      <param name="loadOptions">
            The load options.
            </param>
    </member>
    <member name="M:Aspose.Note.Notebook.Save(System.String)">
      <summary>
            Saves the OneNote document to a file.
            </summary>
      <param name="fileName">
            The full name for the file. If a file with the specified full name already exists, the existing file is overwritten.
            </param>
      <exception cref="T:Aspose.Note.IncorrectDocumentStructureException">The document structure violates specification.</exception>
      <exception cref="T:Aspose.Note.UnsupportedSaveFormatException">Requested save format is not supported.</exception>
    </member>
    <member name="M:Aspose.Note.Notebook.Save(System.IO.Stream)">
      <summary>
            Saves the OneNote document to a stream.
            </summary>
      <param name="stream">
            The stream.
            </param>
      <exception cref="T:Aspose.Note.IncorrectDocumentStructureException">The document structure violates specification.</exception>
      <exception cref="T:Aspose.Note.UnsupportedSaveFormatException">Requested save format is not supported.</exception>
    </member>
    <member name="M:Aspose.Note.Notebook.Save(System.String,Aspose.Note.SaveFormat)">
      <summary>
            Saves the OneNote document to a file in the specified format.
            </summary>
      <param name="fileName">
            The full name for the file. If a file with the specified full name already exists, the existing file is overwritten.
            </param>
      <param name="format">
            The format in which to save the document.
            </param>
      <exception cref="T:Aspose.Note.IncorrectDocumentStructureException">The document structure violates specification.</exception>
      <exception cref="T:Aspose.Note.UnsupportedSaveFormatException">Requested save format is not supported.</exception>
    </member>
    <member name="M:Aspose.Note.Notebook.Save(System.IO.Stream,Aspose.Note.SaveFormat)">
      <summary>
            Saves the OneNote document to a stream in the specified format.
            </summary>
      <param name="stream">
            The stream.
            </param>
      <param name="format">
            The format in which to save the document.
            </param>
      <exception cref="T:Aspose.Note.IncorrectDocumentStructureException">The document structure violates specification.</exception>
      <exception cref="T:Aspose.Note.UnsupportedSaveFormatException">Requested save format is not supported.</exception>
    </member>
    <member name="M:Aspose.Note.Notebook.Save(System.String,Aspose.Note.Saving.NotebookSaveOptions)">
      <summary>
            Saves the OneNote document to a file using the specified save options.
            </summary>
      <param name="fileName">
            The full name for the file. If a file with the specified full name already exists, the existing file is overwritten.
            </param>
      <param name="options">
            Specifies the options how the document is saved in file.
            </param>
      <exception cref="T:Aspose.Note.IncorrectDocumentStructureException">The document structure violates specification.</exception>
      <exception cref="T:Aspose.Note.UnsupportedSaveFormatException">Requested save format is not supported.</exception>
    </member>
    <member name="M:Aspose.Note.Notebook.Save(System.IO.Stream,Aspose.Note.Saving.NotebookSaveOptions)">
      <summary>
            Saves the OneNote document to a stream using the specified save options.
            </summary>
      <param name="stream">
            The stream.
            </param>
      <param name="options">
            Specifies the options how the document is saved.
            </param>
      <exception cref="T:Aspose.Note.IncorrectDocumentStructureException">The document structure violates specification.</exception>
      <exception cref="T:Aspose.Note.UnsupportedSaveFormatException">Requested save format is not supported.</exception>
    </member>
    <member name="T:Aspose.Note.NotebookLoadOptions">
      <summary>
            Options used to load a notebook.
            </summary>
      <example>Shows how to an encrypted notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();
var notebook = new Notebook(dataDir + "test.onetoc2", new NotebookLoadOptions() { DeferredLoading = true });

notebook.LoadChildDocument(dataDir + "Aspose.one");  
notebook.LoadChildDocument(dataDir + "Locked Pass1.one", new LoadOptions() { DocumentPassword = "pass" });
notebook.LoadChildDocument(dataDir + "Locked Pass2.one", new LoadOptions() { DocumentPassword = "pass2" });</code></example>
    </member>
    <member name="P:Aspose.Note.NotebookLoadOptions.InstantLoading">
      <summary>
            Gets or sets a value indicating whether children documents
            should be loaded while the parent document is loading.
            </summary>
      <remarks>
            Default value is <c>false</c>, so child documents will be loaded "lazily",
            i.e. their loading should be postponed until a direct access to specific child.
            Value <c>true</c> is indicating that their loading should be done immediately.
            </remarks>
    </member>
    <member name="P:Aspose.Note.NotebookLoadOptions.DeferredLoading">
      <summary>
            Gets or sets a value indicating whether children documents
            should be loaded explicitly later.
            </summary>
      <remarks>
            Default value is <c>false</c>, so child documents will be loaded implicitly.
            Value <c>true</c> is indicating that user should call <see cref="M:Aspose.Note.Notebook.LoadChildDocument(System.String)" /> or <seealso cref="M:Aspose.Note.Notebook.LoadChildNotebook(System.String)" />
            for each notebook's child node after notebook itself is loaded.
            If value is <c>true</c>, <see cref="P:Aspose.Note.NotebookLoadOptions.InstantLoading" /> option will be ignored.
            If notebook is loading from stream, the value is always <c>true</c> despite was explicitly set by user to <c>false</c>.
            </remarks>
      <example>Shows how to an encrypted notebook.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();
var notebook = new Notebook(dataDir + "test.onetoc2", new NotebookLoadOptions() { DeferredLoading = true });

notebook.LoadChildDocument(dataDir + "Aspose.one");  
notebook.LoadChildDocument(dataDir + "Locked Pass1.one", new LoadOptions() { DocumentPassword = "pass" });
notebook.LoadChildDocument(dataDir + "Locked Pass2.one", new LoadOptions() { DocumentPassword = "pass2" });</code></example>
    </member>
    <member name="T:Aspose.Note.Outline">
      <summary>
            Represents a Outline. 
            </summary>
      <example>Shows how to add new image with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Load an image
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "icon.jpg");

// Insert image in the document node
outlineElem.AppendChildLast(image);
image.Tags.Add(NoteTag.CreateYellowStar());

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddImageNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with chinese numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Initialize OneNote document
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize OneNote page
Aspose.Note.Page page = new Aspose.Note.Page(doc);
Outline outline = new Outline(doc);

// Apply text style settings
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

//------------------------
OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

//------------------------
OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

//------------------------
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "InsertChineseNumberList_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new bulleted lis.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply bullets
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };

// Initialize RichText class object and apply text style
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);
// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyBulletsOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply numbering
// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyNumberingOnText_out.one"; 
doc.Save(dataDir);</code></example>
    </member>
    <member name="M:Aspose.Note.Outline.#ctor(Aspose.Note.Document)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Outline" /> class.
            </summary>
      <param name="document">
            The parent document of the outline.
            </param>
    </member>
    <member name="M:Aspose.Note.Outline.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Outline" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Note.Outline.IndentPosition">
      <summary>
            Gets or sets the indent position.
            </summary>
    </member>
    <member name="P:Aspose.Note.Outline.LastModifiedTime">
      <summary>
            Gets or sets the last modified time.
            </summary>
    </member>
    <member name="P:Aspose.Note.Outline.MaxWidth">
      <summary>
            Gets or sets the max width.
            </summary>
    </member>
    <member name="P:Aspose.Note.Outline.MinWidth">
      <summary>
            Gets or sets the min width.
            </summary>
    </member>
    <member name="P:Aspose.Note.Outline.MaxHeight">
      <summary>
            Gets or sets the max height.
            </summary>
    </member>
    <member name="P:Aspose.Note.Outline.HorizontalOffset">
      <summary>
            Gets or sets the horizontal offset.
            </summary>
    </member>
    <member name="P:Aspose.Note.Outline.VerticalOffset">
      <summary>
            Gets or sets the vertical offset.
            </summary>
    </member>
    <member name="P:Aspose.Note.Outline.ReservedWidth">
      <summary>
            Gets or sets the reserved width.
            </summary>
    </member>
    <member name="P:Aspose.Note.Outline.DescendantsCannotBeMoved">
      <summary>
            Gets whether descendants of the outline can be moved.
            </summary>
    </member>
    <member name="M:Aspose.Note.Outline.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="T:Aspose.Note.OutlineElement">
      <summary>
            Represents a OutlineElement.
            </summary>
      <example>Shows how to add new image with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Load an image
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "icon.jpg");

// Insert image in the document node
outlineElem.AppendChildLast(image);
image.Tags.Add(NoteTag.CreateYellowStar());

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddImageNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to retrieve information about list's formatting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "ApplyNumberingOnText.one");

// Retrieve a collection nodes of the outline element
IList&lt;OutlineElement&gt; nodes = oneFile.GetChildNodes&lt;OutlineElement&gt;();

// Iterate through each node
foreach (OutlineElement node in nodes)
{
    if (node.NumberList != null)
    {
        NumberList list = node.NumberList;

        // Retrieve font name
        Console.WriteLine("Font Name: " + list.Font);

        // Retrieve font length
        Console.WriteLine("Font Length: " + list.Font.Length);

        // Retrieve font size
        Console.WriteLine("Font Size: " + list.FontSize);

        // Retrieve font color
        Console.WriteLine("Font Color: " + list.FontColor);

        // Retrieve format
        Console.WriteLine("Font format: " + list.Format);

        // Check bold
        Console.WriteLine("Is bold: " + list.IsBold);

        // Check italic
        Console.WriteLine("Is italic: " + list.IsItalic);
        Console.WriteLine();
    }
}</code></example>
      <example>Shows how to insert new list with chinese numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Initialize OneNote document
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize OneNote page
Aspose.Note.Page page = new Aspose.Note.Page(doc);
Outline outline = new Outline(doc);

// Apply text style settings
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

//------------------------
OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

//------------------------
OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

//------------------------
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "InsertChineseNumberList_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new bulleted lis.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply bullets
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };

// Initialize RichText class object and apply text style
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);
// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyBulletsOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply numbering
// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyNumberingOnText_out.one"; 
doc.Save(dataDir);</code></example>
    </member>
    <member name="M:Aspose.Note.OutlineElement.#ctor(Aspose.Note.Document)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.OutlineElement" /> class.
            </summary>
      <param name="document">
            The parent document of the outline element.
            </param>
    </member>
    <member name="M:Aspose.Note.OutlineElement.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.OutlineElement" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Note.OutlineElement.IndentPosition">
      <summary>
            Gets or sets the indent position.
            </summary>
    </member>
    <member name="P:Aspose.Note.OutlineElement.LastModifiedTime">
      <summary>
            Gets or sets the last modified time.
            </summary>
    </member>
    <member name="P:Aspose.Note.OutlineElement.CreationTime">
      <summary>
            Gets or sets the creation time.
            </summary>
    </member>
    <member name="P:Aspose.Note.OutlineElement.NumberList">
      <summary>
            Gets or sets the style for the numbered list header.
            </summary>
      <example>Shows how to retrieve information about list's formatting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "ApplyNumberingOnText.one");

// Retrieve a collection nodes of the outline element
IList&lt;OutlineElement&gt; nodes = oneFile.GetChildNodes&lt;OutlineElement&gt;();

// Iterate through each node
foreach (OutlineElement node in nodes)
{
    if (node.NumberList != null)
    {
        NumberList list = node.NumberList;

        // Retrieve font name
        Console.WriteLine("Font Name: " + list.Font);

        // Retrieve font length
        Console.WriteLine("Font Length: " + list.Font.Length);

        // Retrieve font size
        Console.WriteLine("Font Size: " + list.FontSize);

        // Retrieve font color
        Console.WriteLine("Font Color: " + list.FontColor);

        // Retrieve format
        Console.WriteLine("Font format: " + list.Format);

        // Check bold
        Console.WriteLine("Is bold: " + list.IsBold);

        // Check italic
        Console.WriteLine("Is italic: " + list.IsItalic);
        Console.WriteLine();
    }
}</code></example>
      <example>Shows how to insert new list with chinese numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Initialize OneNote document
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize OneNote page
Aspose.Note.Page page = new Aspose.Note.Page(doc);
Outline outline = new Outline(doc);

// Apply text style settings
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

//------------------------
OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

//------------------------
OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

//------------------------
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "InsertChineseNumberList_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new bulleted lis.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply bullets
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };

// Initialize RichText class object and apply text style
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);
// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyBulletsOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply numbering
// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyNumberingOnText_out.one"; 
doc.Save(dataDir);</code></example>
    </member>
    <member name="M:Aspose.Note.OutlineElement.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="T:Aspose.Note.OutlineGroup">
      <summary>
            Represents a OutlineGroup.
            </summary>
    </member>
    <member name="M:Aspose.Note.OutlineGroup.#ctor(Aspose.Note.Document)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.OutlineGroup" /> class.
            </summary>
      <param name="document">
            The document of the outline group.
            </param>
    </member>
    <member name="M:Aspose.Note.OutlineGroup.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.OutlineGroup" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Note.OutlineGroup.IndentPosition">
      <summary>
            Gets or sets the indent position.
            </summary>
    </member>
    <member name="M:Aspose.Note.OutlineGroup.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="T:Aspose.Note.Page">
      <summary>
            Represents a page.
            </summary>
      <example>Shows how to set page's background color.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(Path.Combine(dataDir, "Aspose.one"));

foreach (var page in document)
{
    page.BackgroundColor = Color.BlueViolet;
}

document.Save(Path.Combine(dataDir, "SetPageBackgroundColor.one"));</code></example>
      <example>Shows how to get meta information about a page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

foreach (Page page in oneFile)
{
    Console.WriteLine("LastModifiedTime: {0}", page.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", page.CreationTime);
    Console.WriteLine("Title: {0}", page.Title);
    Console.WriteLine("Level: {0}", page.Level);
    Console.WriteLine("Author: {0}", page.Author);
    Console.WriteLine();
}</code></example>
      <example>Shows how to set a title for a page.<code>
string dataDir = RunExamples.GetDataDir_Text();
string outputPath = dataDir + "CreateTitleMsStyle_out.one";

var doc = new Document();
var page = new Page(doc);

page.Title = new Title(doc)
{
    TitleText = new RichText(doc)
    {
        Text = "Title text.",
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleDate = new RichText(doc)
    {
        Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture),
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleTime = new RichText(doc)
    {
        Text = "12:34",
        ParagraphStyle = ParagraphStyle.Default
    }
};

doc.AppendChildLast(page);

doc.Save(outputPath);</code></example>
      <example>Shows how to get page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document document = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

// Get first page
Page firstPage = document.FirstChild;
foreach (Page pageRevision in document.GetPageHistory(firstPage))
{
    /*Use pageRevision like a regular page.*/
    Console.WriteLine("LastModifiedTime: {0}", pageRevision.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", pageRevision.CreationTime);
    Console.WriteLine("Title: {0}", pageRevision.Title);
    Console.WriteLine("Level: {0}", pageRevision.Level);
    Console.WriteLine("Author: {0}", pageRevision.Author);
    Console.WriteLine();
}</code></example>
      <example>Shows how to edit page's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(dataDir + "Aspose.one");
Page page = document.FirstChild;

// Reading Content Revision Summary for this page
var pageRevisionInfo = page.PageContentRevisionSummary;

Console.WriteLine(string.Format(
    "Author:\t{0}\nModified:\t{1}",
    pageRevisionInfo.AuthorMostRecent,
    pageRevisionInfo.LastModifiedTime.ToString("dd.MM.yyyy HH:mm:ss")));

// Update Page Revision Summary for this page
pageRevisionInfo.AuthorMostRecent = "New Author";
pageRevisionInfo.LastModifiedTime = DateTime.Now;

document.Save(dataDir + "WorkingWithPageRevisions_out.one");</code></example>
      <example>Shows how to pass through all pages and make a replacement in the text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

Dictionary&lt;string, string&gt; replacements = new Dictionary&lt;string, string&gt;();
replacements.Add("Some task here", "New Text Here");

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all RichText nodes
IList&lt;RichText&gt; textNodes = oneFile.GetChildNodes&lt;RichText&gt;();

foreach (RichText richText in textNodes)
{
    foreach (KeyValuePair&lt;string, string&gt; kvp in replacements)
    {
        // Replace text of a shape
        richText.Replace(kvp.Key, kvp.Value);
    }
}

dataDir = dataDir + "ReplaceTextOnAllPages_out.pdf";

// Save to any supported file format
oneFile.Save(dataDir, SaveFormat.Pdf);</code></example>
      <example>Shows how to pass through page's text and make a replacement.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

Dictionary&lt;string, string&gt; replacements = new Dictionary&lt;string, string&gt;();
replacements.Add("voice over", "voice over new text");

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

IList&lt;Page&gt; pageNodes = oneFile.GetChildNodes&lt;Page&gt;();

// Get all RichText nodes
IList&lt;RichText&gt; textNodes = pageNodes[0].GetChildNodes&lt;RichText&gt;();

foreach (RichText richText in textNodes)
{
    foreach (KeyValuePair&lt;string, string&gt; kvp in replacements)
    {
        // Replace text of a shape
        richText.Replace(kvp.Key, kvp.Value);
    }
}

// Save to any supported file format
dataDir = dataDir + "ReplaceTextOnParticularPage_out.pdf";
oneFile.Save(dataDir, SaveFormat.Pdf);</code></example>
      <example>Shows how to create a document and save it in html format using default options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();
Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
                 {
                     TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                     TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                     TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
                 };

// Save into HTML format
dataDir = dataDir + "CreateOneNoteDocAndSaveToHTML_out.html";
doc.Save(dataDir);</code></example>
      <example>Shows how to add new image with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Load an image
Aspose.Note.Image image = new Aspose.Note.Image(doc, dataDir + "icon.jpg");

// Insert image in the document node
outlineElem.AppendChildLast(image);
image.Tags.Add(NoteTag.CreateYellowStar());

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddImageNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to check if a page is a conflict page(i.e. it has changes that OneNote couldn't automatically merge).<code>
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document doc = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

var history = doc.GetPageHistory(doc.FirstChild);
for (int i = 0; i &lt; history.Count; i++)
{
    var historyPage = history[i];
    Console.Write("    {0}. Author: {1}, {2:dd.MM.yyyy hh.mm.ss}",
                    i,
                    historyPage.PageContentRevisionSummary.AuthorMostRecent,
                    historyPage.PageContentRevisionSummary.LastModifiedTime);
    Console.WriteLine(historyPage.IsConflictPage ? ", IsConflict: true" : string.Empty);

    // By default conflict pages are just skipped on saving.
    // If mark it as non-conflict then it will be saved as usual one in the history.
    if (historyPage.IsConflictPage)
        historyPage.IsConflictPage = false;
}

doc.Save(dataDir + "ConflictPageManipulation_out.one", SaveFormat.One);</code></example>
      <example>Shows how to create a document and save in html format specified range of pages.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();

Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
             {
                 TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
             };

// Save into HTML format
dataDir = dataDir + "CreateAndSavePageRange_out.html";
doc.Save(dataDir, new HtmlSaveOptions
                  {
                      PageCount = 1,
                      PageIndex = 0
                  });</code></example>
      <example>Shows how to create a document with titled page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Create an object of the Document class
Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Set page title properties
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append Page node in the document
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "CreateDocWithPageTitle_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to save a document in different formats.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize the new Document
Document doc = new Document() { AutomaticLayoutChangesDetectionEnabled = false };

// Initialize the new Page
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append page node
doc.AppendChildLast(page);

// Save OneNote document in different formats, set text font size and detect layout changes manually.
doc.Save(dataDir + "ConsequentExportOperations_out.html");            
doc.Save(dataDir + "ConsequentExportOperations_out.pdf");            
doc.Save(dataDir + "ConsequentExportOperations_out.jpg");            
textStyle.FontSize = 11;           
doc.DetectLayoutChanges();            
doc.Save(dataDir + "ConsequentExportOperations_out.bmp");</code></example>
      <example>Shows how to insert new list with chinese numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Initialize OneNote document
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize OneNote page
Aspose.Note.Page page = new Aspose.Note.Page(doc);
Outline outline = new Outline(doc);

// Apply text style settings
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

//------------------------
OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

//------------------------
OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

//------------------------
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "InsertChineseNumberList_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new bulleted lis.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply bullets
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };

// Initialize RichText class object and apply text style
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);
// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyBulletsOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply numbering
// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyNumberingOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to add a page with a subpage.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object and set its level
Aspose.Note.Page page1 = new Aspose.Note.Page(doc) { Level = 1 };

// Initialize Page class object and set its level
Aspose.Note.Page page2 = new Aspose.Note.Page(doc) { Level = 2 };

// Initialize Page class object and set its level
Aspose.Note.Page page3 = new Aspose.Note.Page(doc) { Level = 1 };

/*---------- Adding nodes to first Page ----------*/
Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
RichText text = new RichText(doc) { Text = "First page.", ParagraphStyle = textStyle };
outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page1.AppendChildLast(outline);

/*---------- Adding nodes to second Page ----------*/
var outline2 = new Outline(doc);
var outlineElem2 = new OutlineElement(doc);
var textStyle2 = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
var text2 = new RichText(doc) { Text = "Second page.", ParagraphStyle = textStyle2 };
outlineElem2.AppendChildLast(text2);
outline2.AppendChildLast(outlineElem2);
page2.AppendChildLast(outline2);

/*---------- Adding nodes to third Page ----------*/
var outline3 = new Outline(doc);
var outlineElem3 = new OutlineElement(doc);
var textStyle3 = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
var text3 = new RichText(doc) { Text = "Third page.", ParagraphStyle = textStyle3 };
outlineElem3.AppendChildLast(text3);
outline3.AppendChildLast(outlineElem3);
page3.AppendChildLast(outline3);

/*---------- Add pages to the OneNote Document ----------*/
doc.AppendChildLast(page1);
doc.AppendChildLast(page2);
doc.AppendChildLast(page3);

// Save OneNote document
dataDir = dataDir + "CreateDocWithRootAndSubPages_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="M:Aspose.Note.Page.#ctor(Aspose.Note.Document)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Page" /> class.
            </summary>
      <param name="document">
            The parent document of the page.
            </param>
    </member>
    <member name="M:Aspose.Note.Page.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Page" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Note.Page.PageContentRevisionSummary">
      <summary>
            Gets or sets the revision summary for the page and it's child nodes.
            </summary>
      <example>Shows how to edit page's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(dataDir + "Aspose.one");
Page page = document.FirstChild;

// Reading Content Revision Summary for this page
var pageRevisionInfo = page.PageContentRevisionSummary;

Console.WriteLine(string.Format(
    "Author:\t{0}\nModified:\t{1}",
    pageRevisionInfo.AuthorMostRecent,
    pageRevisionInfo.LastModifiedTime.ToString("dd.MM.yyyy HH:mm:ss")));

// Update Page Revision Summary for this page
pageRevisionInfo.AuthorMostRecent = "New Author";
pageRevisionInfo.LastModifiedTime = DateTime.Now;

document.Save(dataDir + "WorkingWithPageRevisions_out.one");</code></example>
      <example>Shows how to check if a page is a conflict page(i.e. it has changes that OneNote couldn't automatically merge).<code>
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document doc = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

var history = doc.GetPageHistory(doc.FirstChild);
for (int i = 0; i &lt; history.Count; i++)
{
    var historyPage = history[i];
    Console.Write("    {0}. Author: {1}, {2:dd.MM.yyyy hh.mm.ss}",
                    i,
                    historyPage.PageContentRevisionSummary.AuthorMostRecent,
                    historyPage.PageContentRevisionSummary.LastModifiedTime);
    Console.WriteLine(historyPage.IsConflictPage ? ", IsConflict: true" : string.Empty);

    // By default conflict pages are just skipped on saving.
    // If mark it as non-conflict then it will be saved as usual one in the history.
    if (historyPage.IsConflictPage)
        historyPage.IsConflictPage = false;
}

doc.Save(dataDir + "ConflictPageManipulation_out.one", SaveFormat.One);</code></example>
    </member>
    <member name="P:Aspose.Note.Page.Title">
      <summary>
            Gets or sets the title.
            </summary>
      <value>
            The <see cref="P:Aspose.Note.Page.Title" />.
            </value>
      <example>Shows how to get meta information about a page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

foreach (Page page in oneFile)
{
    Console.WriteLine("LastModifiedTime: {0}", page.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", page.CreationTime);
    Console.WriteLine("Title: {0}", page.Title);
    Console.WriteLine("Level: {0}", page.Level);
    Console.WriteLine("Author: {0}", page.Author);
    Console.WriteLine();
}</code></example>
      <example>Shows how to edit page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(dataDir + "Aspose.one");
Page page = document.FirstChild;

var pageHistory = document.GetPageHistory(page);

pageHistory.RemoveRange(0, 1);

pageHistory[0] = new Page(document);
if (pageHistory.Count &gt; 1)
{
    pageHistory[1].Title.TitleText.Text = "New Title";

    pageHistory.Add(new Page(document));

    pageHistory.Insert(1, new Page(document));

    document.Save(dataDir + "ModifyPageHistory_out.one");
}</code></example>
      <example>Shows how to set a title for a page.<code>
string dataDir = RunExamples.GetDataDir_Text();
string outputPath = dataDir + "CreateTitleMsStyle_out.one";

var doc = new Document();
var page = new Page(doc);

page.Title = new Title(doc)
{
    TitleText = new RichText(doc)
    {
        Text = "Title text.",
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleDate = new RichText(doc)
    {
        Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture),
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleTime = new RichText(doc)
    {
        Text = "12:34",
        ParagraphStyle = ParagraphStyle.Default
    }
};

doc.AppendChildLast(page);

doc.Save(outputPath);</code></example>
      <example>Shows how to get page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document document = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

// Get first page
Page firstPage = document.FirstChild;
foreach (Page pageRevision in document.GetPageHistory(firstPage))
{
    /*Use pageRevision like a regular page.*/
    Console.WriteLine("LastModifiedTime: {0}", pageRevision.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", pageRevision.CreationTime);
    Console.WriteLine("Title: {0}", pageRevision.Title);
    Console.WriteLine("Level: {0}", pageRevision.Level);
    Console.WriteLine("Author: {0}", pageRevision.Author);
    Console.WriteLine();
}</code></example>
      <example>Shows how to create a document and save it in html format using default options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();
Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
                 {
                     TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                     TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                     TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
                 };

// Save into HTML format
dataDir = dataDir + "CreateOneNoteDocAndSaveToHTML_out.html";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a document and save in html format specified range of pages.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();

Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
             {
                 TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
             };

// Save into HTML format
dataDir = dataDir + "CreateAndSavePageRange_out.html";
doc.Save(dataDir, new HtmlSaveOptions
                  {
                      PageCount = 1,
                      PageIndex = 0
                  });</code></example>
      <example>Shows how to create a document with titled page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Create an object of the Document class
Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Set page title properties
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append Page node in the document
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "CreateDocWithPageTitle_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to save a document in different formats.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize the new Document
Document doc = new Document() { AutomaticLayoutChangesDetectionEnabled = false };

// Initialize the new Page
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append page node
doc.AppendChildLast(page);

// Save OneNote document in different formats, set text font size and detect layout changes manually.
doc.Save(dataDir + "ConsequentExportOperations_out.html");            
doc.Save(dataDir + "ConsequentExportOperations_out.pdf");            
doc.Save(dataDir + "ConsequentExportOperations_out.jpg");            
textStyle.FontSize = 11;           
doc.DetectLayoutChanges();            
doc.Save(dataDir + "ConsequentExportOperations_out.bmp");</code></example>
    </member>
    <member name="P:Aspose.Note.Page.LastModifiedTime">
      <summary>
            Gets or sets the last modified time.
            </summary>
      <example>Shows how to get meta information about a page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

foreach (Page page in oneFile)
{
    Console.WriteLine("LastModifiedTime: {0}", page.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", page.CreationTime);
    Console.WriteLine("Title: {0}", page.Title);
    Console.WriteLine("Level: {0}", page.Level);
    Console.WriteLine("Author: {0}", page.Author);
    Console.WriteLine();
}</code></example>
      <example>Shows how to get page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document document = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

// Get first page
Page firstPage = document.FirstChild;
foreach (Page pageRevision in document.GetPageHistory(firstPage))
{
    /*Use pageRevision like a regular page.*/
    Console.WriteLine("LastModifiedTime: {0}", pageRevision.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", pageRevision.CreationTime);
    Console.WriteLine("Title: {0}", pageRevision.Title);
    Console.WriteLine("Level: {0}", pageRevision.Level);
    Console.WriteLine("Author: {0}", pageRevision.Author);
    Console.WriteLine();
}</code></example>
    </member>
    <member name="P:Aspose.Note.Page.CreationTime">
      <summary>
            Gets or sets the creation time.
            </summary>
      <example>Shows how to get meta information about a page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

foreach (Page page in oneFile)
{
    Console.WriteLine("LastModifiedTime: {0}", page.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", page.CreationTime);
    Console.WriteLine("Title: {0}", page.Title);
    Console.WriteLine("Level: {0}", page.Level);
    Console.WriteLine("Author: {0}", page.Author);
    Console.WriteLine();
}</code></example>
      <example>Shows how to get page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document document = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

// Get first page
Page firstPage = document.FirstChild;
foreach (Page pageRevision in document.GetPageHistory(firstPage))
{
    /*Use pageRevision like a regular page.*/
    Console.WriteLine("LastModifiedTime: {0}", pageRevision.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", pageRevision.CreationTime);
    Console.WriteLine("Title: {0}", pageRevision.Title);
    Console.WriteLine("Level: {0}", pageRevision.Level);
    Console.WriteLine("Author: {0}", pageRevision.Author);
    Console.WriteLine();
}</code></example>
    </member>
    <member name="P:Aspose.Note.Page.Level">
      <summary>
            Gets or sets the level.
            </summary>
      <example>Shows how to get meta information about a page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

foreach (Page page in oneFile)
{
    Console.WriteLine("LastModifiedTime: {0}", page.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", page.CreationTime);
    Console.WriteLine("Title: {0}", page.Title);
    Console.WriteLine("Level: {0}", page.Level);
    Console.WriteLine("Author: {0}", page.Author);
    Console.WriteLine();
}</code></example>
      <example>Shows how to get page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document document = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

// Get first page
Page firstPage = document.FirstChild;
foreach (Page pageRevision in document.GetPageHistory(firstPage))
{
    /*Use pageRevision like a regular page.*/
    Console.WriteLine("LastModifiedTime: {0}", pageRevision.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", pageRevision.CreationTime);
    Console.WriteLine("Title: {0}", pageRevision.Title);
    Console.WriteLine("Level: {0}", pageRevision.Level);
    Console.WriteLine("Author: {0}", pageRevision.Author);
    Console.WriteLine();
}</code></example>
      <example>Shows how to add a page with a subpage.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object and set its level
Aspose.Note.Page page1 = new Aspose.Note.Page(doc) { Level = 1 };

// Initialize Page class object and set its level
Aspose.Note.Page page2 = new Aspose.Note.Page(doc) { Level = 2 };

// Initialize Page class object and set its level
Aspose.Note.Page page3 = new Aspose.Note.Page(doc) { Level = 1 };

/*---------- Adding nodes to first Page ----------*/
Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
RichText text = new RichText(doc) { Text = "First page.", ParagraphStyle = textStyle };
outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page1.AppendChildLast(outline);

/*---------- Adding nodes to second Page ----------*/
var outline2 = new Outline(doc);
var outlineElem2 = new OutlineElement(doc);
var textStyle2 = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
var text2 = new RichText(doc) { Text = "Second page.", ParagraphStyle = textStyle2 };
outlineElem2.AppendChildLast(text2);
outline2.AppendChildLast(outlineElem2);
page2.AppendChildLast(outline2);

/*---------- Adding nodes to third Page ----------*/
var outline3 = new Outline(doc);
var outlineElem3 = new OutlineElement(doc);
var textStyle3 = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
var text3 = new RichText(doc) { Text = "Third page.", ParagraphStyle = textStyle3 };
outlineElem3.AppendChildLast(text3);
outline3.AppendChildLast(outlineElem3);
page3.AppendChildLast(outline3);

/*---------- Add pages to the OneNote Document ----------*/
doc.AppendChildLast(page1);
doc.AppendChildLast(page2);
doc.AppendChildLast(page3);

// Save OneNote document
dataDir = dataDir + "CreateDocWithRootAndSubPages_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.Page.Margin">
      <summary>
            Gets or sets the margin.
            </summary>
    </member>
    <member name="P:Aspose.Note.Page.Author">
      <summary>
            Gets or sets the author.
            </summary>
      <example>Shows how to get meta information about a page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

foreach (Page page in oneFile)
{
    Console.WriteLine("LastModifiedTime: {0}", page.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", page.CreationTime);
    Console.WriteLine("Title: {0}", page.Title);
    Console.WriteLine("Level: {0}", page.Level);
    Console.WriteLine("Author: {0}", page.Author);
    Console.WriteLine();
}</code></example>
      <example>Shows how to get page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document document = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

// Get first page
Page firstPage = document.FirstChild;
foreach (Page pageRevision in document.GetPageHistory(firstPage))
{
    /*Use pageRevision like a regular page.*/
    Console.WriteLine("LastModifiedTime: {0}", pageRevision.LastModifiedTime);
    Console.WriteLine("CreationTime: {0}", pageRevision.CreationTime);
    Console.WriteLine("Title: {0}", pageRevision.Title);
    Console.WriteLine("Level: {0}", pageRevision.Level);
    Console.WriteLine("Author: {0}", pageRevision.Author);
    Console.WriteLine();
}</code></example>
    </member>
    <member name="P:Aspose.Note.Page.BackgroundColor">
      <summary>
            Gets or sets page's background color.
            </summary>
      <example>Shows how to set page's background color.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(Path.Combine(dataDir, "Aspose.one"));

foreach (var page in document)
{
    page.BackgroundColor = Color.BlueViolet;
}

document.Save(Path.Combine(dataDir, "SetPageBackgroundColor.one"));</code></example>
      <example>Shows how to apply Dark theme style to a Document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document doc = new Document(Path.Combine(dataDir, "Aspose.one"));

foreach (var page in doc)
{
    page.BackgroundColor = Color.Black;
}

foreach (var node in doc.GetChildNodes&lt;RichText&gt;())
{
    var c = node.ParagraphStyle.FontColor;
    if (c.IsEmpty || Math.Abs(c.R - Color.Black.R) + Math.Abs(c.G - Color.Black.G) + Math.Abs(c.B - Color.Black.B) &lt;= 30)
    {
        node.ParagraphStyle.FontColor = Color.White;
    }
}

doc.Save(Path.Combine(dataDir, "AsposeDarkTheme.pdf"));</code></example>
    </member>
    <member name="P:Aspose.Note.Page.SizeType">
      <summary>
            Gets or sets the size type of a page.
            </summary>
      <remarks>
            By default, a page resizes automatically. The default value is <see cref="F:Aspose.Note.PageSizeType.SizeByContent" />.
            </remarks>
    </member>
    <member name="P:Aspose.Note.Page.PageLayoutSize">
      <summary>
            Gets or sets page's layout size displayed in the editor.
            </summary>
      <remarks>
            This value is used by Microsoft OneNote application to display underlying page layout when document is opened.
            It doesn't affect printing and saving of the document anyway.
            When Page.SizeType property is set to PageSizeType.SizeByContent this property returns real size of the content.
            </remarks>
    </member>
    <member name="P:Aspose.Note.Page.IsConflictPage">
      <summary>
            Gets or sets a value indicating whether this page is a conflict page.
            </summary>
      <remarks>
        <para>
            The conflict page arises when two users try to update the same content.
            In this case the changes of first user are written as usual.
            But changes of another user can't be merged.
            So just a copy of page is created and marked as conflict.
            </para>
        <para>
            At this version the conflicts are resolved in favor of the first user's changes.
            So if document has conflict pages then they will be shown in history but they will be skipped on saving.
            It is possible to reset this flag to save this pages in history as usual ones.
            </para>
        <para>
            Detailed sample of manipulating by conflict page can be found in the online documentation.
            </para>
      </remarks>
      <example>Shows how to check if a page is a conflict page(i.e. it has changes that OneNote couldn't automatically merge).<code>
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document doc = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

var history = doc.GetPageHistory(doc.FirstChild);
for (int i = 0; i &lt; history.Count; i++)
{
    var historyPage = history[i];
    Console.Write("    {0}. Author: {1}, {2:dd.MM.yyyy hh.mm.ss}",
                    i,
                    historyPage.PageContentRevisionSummary.AuthorMostRecent,
                    historyPage.PageContentRevisionSummary.LastModifiedTime);
    Console.WriteLine(historyPage.IsConflictPage ? ", IsConflict: true" : string.Empty);

    // By default conflict pages are just skipped on saving.
    // If mark it as non-conflict then it will be saved as usual one in the history.
    if (historyPage.IsConflictPage)
        historyPage.IsConflictPage = false;
}

doc.Save(dataDir + "ConflictPageManipulation_out.one", SaveFormat.One);</code></example>
    </member>
    <member name="M:Aspose.Note.Page.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="M:Aspose.Note.Page.GetChildNodes``1">
      <summary>
            Get all child nodes of the page by the node type.
            </summary>
      <typeparam name="T1">The type of elements in the returned list.</typeparam>
      <returns>A list of child nodes.</returns>
      <example>Shows how to get all text from the document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Retrieve text
string text = string.Join(Environment.NewLine, oneFile.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

// Print text on the output screen
Console.WriteLine(text);</code></example>
      <example>Shows how to get all text from the page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get list of page nodes
var page = oneFile.GetChildNodes&lt;Page&gt;().FirstOrDefault();

if (page != null)
{
    // Retrieve text
    string text = string.Join(Environment.NewLine, page.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;
    // Print text on the output screen
    Console.WriteLine(text);
}</code></example>
      <example>Shows how to pass through all pages and make a replacement in the text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

Dictionary&lt;string, string&gt; replacements = new Dictionary&lt;string, string&gt;();
replacements.Add("Some task here", "New Text Here");

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all RichText nodes
IList&lt;RichText&gt; textNodes = oneFile.GetChildNodes&lt;RichText&gt;();

foreach (RichText richText in textNodes)
{
    foreach (KeyValuePair&lt;string, string&gt; kvp in replacements)
    {
        // Replace text of a shape
        richText.Replace(kvp.Key, kvp.Value);
    }
}

dataDir = dataDir + "ReplaceTextOnAllPages_out.pdf";

// Save to any supported file format
oneFile.Save(dataDir, SaveFormat.Pdf);</code></example>
      <example>Shows how to pass through page's text and make a replacement.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

Dictionary&lt;string, string&gt; replacements = new Dictionary&lt;string, string&gt;();
replacements.Add("voice over", "voice over new text");

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

IList&lt;Page&gt; pageNodes = oneFile.GetChildNodes&lt;Page&gt;();

// Get all RichText nodes
IList&lt;RichText&gt; textNodes = pageNodes[0].GetChildNodes&lt;RichText&gt;();

foreach (RichText richText in textNodes)
{
    foreach (KeyValuePair&lt;string, string&gt; kvp in replacements)
    {
        // Replace text of a shape
        richText.Replace(kvp.Key, kvp.Value);
    }
}

// Save to any supported file format
dataDir = dataDir + "ReplaceTextOnParticularPage_out.pdf";
oneFile.Save(dataDir, SaveFormat.Pdf);</code></example>
    </member>
    <member name="M:Aspose.Note.Page.Clone(System.Boolean)">
      <summary>
            Clones the page.
            </summary>
      <param name="cloneHistory">
            Specifies if page's history should be cloned..
            </param>
      <returns>
            A clone of the page.
            </returns>
      <example>Shows how to push current version of a page to history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(dataDir + "Aspose.one");
Page page = document.FirstChild;

var pageHistory = document.GetPageHistory(page);

pageHistory.Add(page.Clone());

document.Save(dataDir + "PushCurrentPageVersion_out.one");</code></example>
      <example>Shows how to clone a page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document document = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

// Clone into new document without history
var cloned = new Document();
cloned.AppendChildLast(document.FirstChild.Clone());

// Clone into new document with history
cloned = new Document();
cloned.AppendChildLast(document.FirstChild.Clone(true));</code></example>
    </member>
    <member name="T:Aspose.Note.PageHistory">
      <summary>
            Represents the page history.
            </summary>
    </member>
    <member name="M:Aspose.Note.PageHistory.#ctor(Aspose.Note.Page)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.PageHistory" /> class.
            </summary>
      <param name="page">
            The current page version.
            </param>
    </member>
    <member name="P:Aspose.Note.PageHistory.Current">
      <summary>
            Gets the current page version.
            </summary>
    </member>
    <member name="P:Aspose.Note.PageHistory.Count">
      <summary>
            Gets the count of the page versions in the page history.
            </summary>
    </member>
    <member name="P:Aspose.Note.PageHistory.IsReadOnly">
      <summary>
            Gets a value indicating whether the page history is read only.
            </summary>
    </member>
    <member name="P:Aspose.Note.PageHistory.Item(System.Int32)">
      <summary>
            Gets or sets the page version at the specified index of the <see cref="T:Aspose.Note.PageHistory" />.
            </summary>
      <param name="index">
            The index.
            </param>
      <returns>
            The page version.
            </returns>
    </member>
    <member name="M:Aspose.Note.PageHistory.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through child nodes of the <see cref="T:Aspose.Note.PageHistory" />.
            </summary>
      <returns>
            The <see cref="T:System.Collections.IEnumerator" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.PageHistory.Contains(Aspose.Note.Page)">
      <summary>
            Determines whether the page history contains the page version.
            </summary>
      <param name="item">
            The page version.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.PageHistory.IndexOf(Aspose.Note.Page)">
      <summary>
            Determines the index of a specific page version in the page history.
            </summary>
      <param name="item">
            The page version.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.PageHistory.Add(Aspose.Note.Page)">
      <summary>
            Adds the page version to the end of the <see cref="T:Aspose.Note.PageHistory" />.
            </summary>
      <param name="item">
            The page version.
            </param>
    </member>
    <member name="M:Aspose.Note.PageHistory.AddRange(System.Collections.Generic.IEnumerable{Aspose.Note.Page})">
      <summary>
            Adds the page versions to the end of the <see cref="T:Aspose.Note.PageHistory" />.
            </summary>
      <param name="items">
            The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of page versions.
            </param>
    </member>
    <member name="M:Aspose.Note.PageHistory.Insert(System.Int32,Aspose.Note.Page)">
      <summary>
            Inserts a page version into the page history.
            </summary>
      <param name="index">
            The index.
            </param>
      <param name="item">
            The page version.
            </param>
    </member>
    <member name="M:Aspose.Note.PageHistory.Remove(Aspose.Note.Page)">
      <summary>
            Removes the page version from the <see cref="T:Aspose.Note.PageHistory" />.
            </summary>
      <param name="item">
            The page version.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.PageHistory.RemoveAt(System.Int32)">
      <summary>
            Removes the page version at the specified index of the <see cref="T:Aspose.Note.PageHistory" />.
            </summary>
      <param name="index">
            The index.
            </param>
    </member>
    <member name="M:Aspose.Note.PageHistory.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of the page versions from the <see cref="T:Aspose.Note.PageHistory" />.
            </summary>
      <param name="index">
            The index.
            </param>
      <param name="count">
            The count.
            </param>
    </member>
    <member name="M:Aspose.Note.PageHistory.Clear">
      <summary>
            Clears the page history.
            </summary>
    </member>
    <member name="M:Aspose.Note.PageHistory.CopyTo(Aspose.Note.Page[],System.Int32)">
      <summary>
            Copies the page versions to an array, starting at the beginning.
            </summary>
      <param name="array">
            The target array.
            </param>
      <param name="arrayIndex">
            The array index.
            </param>
    </member>
    <member name="T:Aspose.Note.RevisionSummary">
      <summary>
            Represents a summary for node's revision.
            </summary>
      <example>Shows how to edit page's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(dataDir + "Aspose.one");
Page page = document.FirstChild;

// Reading Content Revision Summary for this page
var pageRevisionInfo = page.PageContentRevisionSummary;

Console.WriteLine(string.Format(
    "Author:\t{0}\nModified:\t{1}",
    pageRevisionInfo.AuthorMostRecent,
    pageRevisionInfo.LastModifiedTime.ToString("dd.MM.yyyy HH:mm:ss")));

// Update Page Revision Summary for this page
pageRevisionInfo.AuthorMostRecent = "New Author";
pageRevisionInfo.LastModifiedTime = DateTime.Now;

document.Save(dataDir + "WorkingWithPageRevisions_out.one");</code></example>
      <example>Shows how to check if a page is a conflict page(i.e. it has changes that OneNote couldn't automatically merge).<code>
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document doc = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

var history = doc.GetPageHistory(doc.FirstChild);
for (int i = 0; i &lt; history.Count; i++)
{
    var historyPage = history[i];
    Console.Write("    {0}. Author: {1}, {2:dd.MM.yyyy hh.mm.ss}",
                    i,
                    historyPage.PageContentRevisionSummary.AuthorMostRecent,
                    historyPage.PageContentRevisionSummary.LastModifiedTime);
    Console.WriteLine(historyPage.IsConflictPage ? ", IsConflict: true" : string.Empty);

    // By default conflict pages are just skipped on saving.
    // If mark it as non-conflict then it will be saved as usual one in the history.
    if (historyPage.IsConflictPage)
        historyPage.IsConflictPage = false;
}

doc.Save(dataDir + "ConflictPageManipulation_out.one", SaveFormat.One);</code></example>
    </member>
    <member name="P:Aspose.Note.RevisionSummary.LastModifiedTime">
      <summary>
            Gets or sets the last modified time.
            </summary>
      <example>Shows how to edit page's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(dataDir + "Aspose.one");
Page page = document.FirstChild;

// Reading Content Revision Summary for this page
var pageRevisionInfo = page.PageContentRevisionSummary;

Console.WriteLine(string.Format(
    "Author:\t{0}\nModified:\t{1}",
    pageRevisionInfo.AuthorMostRecent,
    pageRevisionInfo.LastModifiedTime.ToString("dd.MM.yyyy HH:mm:ss")));

// Update Page Revision Summary for this page
pageRevisionInfo.AuthorMostRecent = "New Author";
pageRevisionInfo.LastModifiedTime = DateTime.Now;

document.Save(dataDir + "WorkingWithPageRevisions_out.one");</code></example>
      <example>Shows how to check if a page is a conflict page(i.e. it has changes that OneNote couldn't automatically merge).<code>
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document doc = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

var history = doc.GetPageHistory(doc.FirstChild);
for (int i = 0; i &lt; history.Count; i++)
{
    var historyPage = history[i];
    Console.Write("    {0}. Author: {1}, {2:dd.MM.yyyy hh.mm.ss}",
                    i,
                    historyPage.PageContentRevisionSummary.AuthorMostRecent,
                    historyPage.PageContentRevisionSummary.LastModifiedTime);
    Console.WriteLine(historyPage.IsConflictPage ? ", IsConflict: true" : string.Empty);

    // By default conflict pages are just skipped on saving.
    // If mark it as non-conflict then it will be saved as usual one in the history.
    if (historyPage.IsConflictPage)
        historyPage.IsConflictPage = false;
}

doc.Save(dataDir + "ConflictPageManipulation_out.one", SaveFormat.One);</code></example>
    </member>
    <member name="P:Aspose.Note.RevisionSummary.AuthorMostRecent">
      <summary>
            Gets or sets the most recent author.
            </summary>
      <example>Shows how to edit page's meta information.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(dataDir + "Aspose.one");
Page page = document.FirstChild;

// Reading Content Revision Summary for this page
var pageRevisionInfo = page.PageContentRevisionSummary;

Console.WriteLine(string.Format(
    "Author:\t{0}\nModified:\t{1}",
    pageRevisionInfo.AuthorMostRecent,
    pageRevisionInfo.LastModifiedTime.ToString("dd.MM.yyyy HH:mm:ss")));

// Update Page Revision Summary for this page
pageRevisionInfo.AuthorMostRecent = "New Author";
pageRevisionInfo.LastModifiedTime = DateTime.Now;

document.Save(dataDir + "WorkingWithPageRevisions_out.one");</code></example>
      <example>Shows how to check if a page is a conflict page(i.e. it has changes that OneNote couldn't automatically merge).<code>
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document
Document doc = new Document(dataDir + "Aspose.one", new LoadOptions { LoadHistory = true });

var history = doc.GetPageHistory(doc.FirstChild);
for (int i = 0; i &lt; history.Count; i++)
{
    var historyPage = history[i];
    Console.Write("    {0}. Author: {1}, {2:dd.MM.yyyy hh.mm.ss}",
                    i,
                    historyPage.PageContentRevisionSummary.AuthorMostRecent,
                    historyPage.PageContentRevisionSummary.LastModifiedTime);
    Console.WriteLine(historyPage.IsConflictPage ? ", IsConflict: true" : string.Empty);

    // By default conflict pages are just skipped on saving.
    // If mark it as non-conflict then it will be saved as usual one in the history.
    if (historyPage.IsConflictPage)
        historyPage.IsConflictPage = false;
}

doc.Save(dataDir + "ConflictPageManipulation_out.one", SaveFormat.One);</code></example>
    </member>
    <member name="T:Aspose.Note.RichText">
      <summary>
            Represents a rich text.
            </summary>
      <example>Shows how to get all text from the document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Retrieve text
string text = string.Join(Environment.NewLine, oneFile.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

// Print text on the output screen
Console.WriteLine(text);</code></example>
      <example>Shows how to get all text from the page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get list of page nodes
var page = oneFile.GetChildNodes&lt;Page&gt;().FirstOrDefault();

if (page != null)
{
    // Retrieve text
    string text = string.Join(Environment.NewLine, page.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;
    // Print text on the output screen
    Console.WriteLine(text);
}</code></example>
      <example>Let's emphasize page's titles among other headers by increasing font's size.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Iterate through page's titles.
foreach (var title in document.Select(e =&gt; e.Title.TitleText))
{
    title.ParagraphStyle.FontSize = 24;
    title.ParagraphStyle.IsBold = true;

    foreach (var run in title.TextRuns)
    {
        run.Style.FontSize = 24;
        run.Style.IsBold = true;
    }
}

document.Save(Path.Combine(dataDir, "ChangePageTitleStyle.pdf"));</code></example>
      <example>Shows how to get text from every table's row.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Sample1.one");

// Get a list of table nodes
IList&lt;Table&gt; nodes = document.GetChildNodes&lt;Table&gt;();

foreach (Table table in nodes)
{
    // Iterate through table rows
    foreach (TableRow row in table)
    {
        // Retrieve text
        string text = string.Join(Environment.NewLine, row.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

        // Print text on the output screen
        Console.WriteLine(text);
    }
}</code></example>
      <example>Shows how to get text from a table.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Sample1.one");

// Get a list of table nodes
IList&lt;Table&gt; nodes = document.GetChildNodes&lt;Table&gt;();

// Set table count
int tblCount = 0;

foreach (Table table in nodes)
{
    tblCount++;
    Console.WriteLine("table # " + tblCount);

    // Retrieve text
    string text = string.Join(Environment.NewLine, table.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

    // Print text on the output screen
    Console.WriteLine(text);
}</code></example>
      <example>Let's emphasize latest text's changes by highlighting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Get RichText nodes modified last week.
var richTextNodes = document.GetChildNodes&lt;RichText&gt;().Where(e =&gt; e.LastModifiedTime &gt;= DateTime.Today.Subtract(TimeSpan.FromDays(7)));

foreach (var node in richTextNodes)
{
    // Set highlight color
    node.ParagraphStyle.Highlight = Color.DarkGreen;
    foreach (var run in node.TextRuns)
    {
        // Set highlight color
        run.Style.Highlight = Color.DarkSeaGreen;
    }
}

document.Save(Path.Combine(dataDir, "HighlightAllRecentChanges.pdf"));</code></example>
      <example>Shows how to set a title for a page.<code>
string dataDir = RunExamples.GetDataDir_Text();
string outputPath = dataDir + "CreateTitleMsStyle_out.one";

var doc = new Document();
var page = new Page(doc);

page.Title = new Title(doc)
{
    TitleText = new RichText(doc)
    {
        Text = "Title text.",
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleDate = new RichText(doc)
    {
        Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture),
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleTime = new RichText(doc)
    {
        Text = "12:34",
        ParagraphStyle = ParagraphStyle.Default
    }
};

doc.AppendChildLast(page);

doc.Save(outputPath);</code></example>
      <example>Set proofing language for a text.<code>
var document = new Document();
var page = new Page();
var outline = new Outline();
var outlineElem = new OutlineElement();

var text = new RichText() { ParagraphStyle = ParagraphStyle.Default };
text.Append("United States", new TextStyle() { Language = CultureInfo.GetCultureInfo("en-US") })
    .Append(" Germany", new TextStyle() { Language = CultureInfo.GetCultureInfo("de-DE") })
    .Append(" China", new TextStyle() { Language = CultureInfo.GetCultureInfo("zh-CN") });

outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
document.AppendChildLast(page);

document.Save(Path.Combine(RunExamples.GetDataDir_Text(), "SetProofingLanguageForText.one"));</code></example>
      <example>Shows how to pass through all pages and make a replacement in the text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

Dictionary&lt;string, string&gt; replacements = new Dictionary&lt;string, string&gt;();
replacements.Add("Some task here", "New Text Here");

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all RichText nodes
IList&lt;RichText&gt; textNodes = oneFile.GetChildNodes&lt;RichText&gt;();

foreach (RichText richText in textNodes)
{
    foreach (KeyValuePair&lt;string, string&gt; kvp in replacements)
    {
        // Replace text of a shape
        richText.Replace(kvp.Key, kvp.Value);
    }
}

dataDir = dataDir + "ReplaceTextOnAllPages_out.pdf";

// Save to any supported file format
oneFile.Save(dataDir, SaveFormat.Pdf);</code></example>
      <example>Manipulate by text format using paragraph style.<code>
var document = new Document();
var page = new Page();
var outline = new Outline();
var outlineElem = new OutlineElement();

var text = new RichText() { ParagraphStyle = new ParagraphStyle() { FontName = "Courier New", FontSize = 20 } }
                .Append($"DefaultParagraphFontAndSize{Environment.NewLine}")
                .Append($"OnlyDefaultParagraphFont{Environment.NewLine}", new TextStyle() { FontSize = 14 })
                .Append("OnlyDefaultParagraphFontSize", new TextStyle() { FontName = "Verdana" });

outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
document.AppendChildLast(page);

document.Save(Path.Combine(RunExamples.GetDataDir_Text(), "SetDefaultParagraphStyle.one"));</code></example>
      <example>Shows how to get text from a table's cells.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Sample1.one");

// Get a list of table nodes
IList&lt;Table&gt; nodes = document.GetChildNodes&lt;Table&gt;();        

foreach (Table table in nodes)
{
    // Iterate through table rows
    foreach (TableRow row in table)
    {
        // Get list of TableCell nodes
        // Iterate through table cells
        foreach (TableCell cell in row)
        {
            // Retrieve text
            string text = string.Join(Environment.NewLine, cell.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

            // Print text on the output screen
            Console.WriteLine(text);
        }
    }
}</code></example>
      <example>Shows how to pass through page's text and make a replacement.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

Dictionary&lt;string, string&gt; replacements = new Dictionary&lt;string, string&gt;();
replacements.Add("voice over", "voice over new text");

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

IList&lt;Page&gt; pageNodes = oneFile.GetChildNodes&lt;Page&gt;();

// Get all RichText nodes
IList&lt;RichText&gt; textNodes = pageNodes[0].GetChildNodes&lt;RichText&gt;();

foreach (RichText richText in textNodes)
{
    foreach (KeyValuePair&lt;string, string&gt; kvp in replacements)
    {
        // Replace text of a shape
        richText.Replace(kvp.Key, kvp.Value);
    }
}

// Save to any supported file format
dataDir = dataDir + "ReplaceTextOnParticularPage_out.pdf";
oneFile.Save(dataDir, SaveFormat.Pdf);</code></example>
      <example>Shows how to create a document and save it in html format using default options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();
Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
                 {
                     TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                     TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                     TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
                 };

// Save into HTML format
dataDir = dataDir + "CreateOneNoteDocAndSaveToHTML_out.html";
doc.Save(dataDir);</code></example>
      <example>Shows how to add new paragraph with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
RichText text = new RichText(doc) { Text = "OneNote text.", ParagraphStyle = textStyle };
text.Tags.Add(NoteTag.CreateYellowStar());

// Add text node
outlineElem.AppendChildLast(text);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddTextNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a document and save in html format specified range of pages.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();

Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
             {
                 TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
             };

// Save into HTML format
dataDir = dataDir + "CreateAndSavePageRange_out.html";
doc.Save(dataDir, new HtmlSaveOptions
                  {
                      PageCount = 1,
                      PageIndex = 0
                  });</code></example>
      <example>Shows how to access details of a tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "TagFile.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tags = richText.Tags.OfType&lt;NoteTag&gt;();
    if (tags.Any())
    {
        Console.WriteLine($"Text: {richText.Text}");
        foreach (var noteTag in tags)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTag.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTag.CreationTime}");
            Console.WriteLine($"    Font Color: {noteTag.FontColor}");
            Console.WriteLine($"    Status: {noteTag.Status}");
            Console.WriteLine($"    Label: {noteTag.Label}");
            Console.WriteLine($"    Icon: {noteTag.Icon}");
            Console.WriteLine($"    High Light: {noteTag.Highlight}");
        }
    }
}</code></example>
      <example>Shows how to create a document with a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Page page = new Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize RichText class object and apply text style
RichText text = new RichText(doc) { Text = "Hello OneNote text!", ParagraphStyle = textStyle };

// Add RichText node
outlineElem.AppendChildLast(text);

// Add OutlineElement node
outline.AppendChildLast(outlineElem);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "CreateDocWithSimpleRichText_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with chinese numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Initialize OneNote document
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize OneNote page
Aspose.Note.Page page = new Aspose.Note.Page(doc);
Outline outline = new Outline(doc);

// Apply text style settings
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

//------------------------
OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

//------------------------
OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

//------------------------
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "InsertChineseNumberList_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new bulleted lis.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply bullets
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };

// Initialize RichText class object and apply text style
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);
// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyBulletsOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply numbering
// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyNumberingOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to prepare a template for weekly meeting.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
var headerStyle = new ParagraphStyle() { FontName = "Calibri", FontSize = 16 };
var bodyStyle = new ParagraphStyle() { FontName = "Calibri", FontSize = 12 };

var d = new Document();
bool restartFlag = true;
var outline = d.AppendChildLast(new Page()
                                    {
                                        Title = new Title() { TitleText = new RichText() { Text = $"Weekly meeting {DateTime.Today:d}", ParagraphStyle = ParagraphStyle.Default } }
                                    })
               .AppendChildLast(new Outline() { VerticalOffset = 30, HorizontalOffset = 30 });

outline.AppendChildLast(new OutlineElement())
       .AppendChildLast(new RichText() { Text = "Important", ParagraphStyle = headerStyle });
foreach (var e in new[] { "First", "Second", "Third" })
{
    outline.AppendChildLast(new OutlineElement() { NumberList = CreateListNumberingStyle(bodyStyle, restartFlag) })
           .AppendChildLast(new RichText() { Text = e, ParagraphStyle = bodyStyle });
    restartFlag = false;
}

outline.AppendChildLast(new OutlineElement())
       .AppendChildLast(new RichText() { Text = "TO DO", ParagraphStyle = headerStyle, SpaceBefore = 15 });
restartFlag = true;
foreach (var e in new[] { "First", "Second", "Third" })
{
    outline.AppendChildLast(new OutlineElement() { NumberList = CreateListNumberingStyle(bodyStyle, restartFlag) })
           .AppendChildLast(new RichText() { Text = e, ParagraphStyle = bodyStyle, Tags = { NoteCheckBox.CreateBlueCheckBox() } });
    restartFlag = false;
}

d.Save(Path.Combine(dataDir, "meetingNotes.one"));</code></example>
      <example>Shows how to bind a hyperlink to a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Create an object of the Document class
Document doc = new Document();

RichText titleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append("Title!");

Outline outline = new Outline()
                      {
                          MaxWidth = 200,
                          MaxHeight = 200,
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };

TextStyle textStyleRed = new TextStyle
                             {
                                 FontColor = Color.Red,
                                 FontName = "Arial",
                                 FontSize = 10,
                             };

TextStyle textStyleHyperlink = new TextStyle
                                   {
                                       IsHyperlink = true,
                                       HyperlinkAddress = "www.google.com"
                                   };

RichText text = new RichText() { ParagraphStyle = ParagraphStyle.Default }
                    .Append("This is ", textStyleRed)
                    .Append("hyperlink", textStyleHyperlink)
                    .Append(". This text is not a hyperlink.", TextStyle.Default);

OutlineElement outlineElem = new OutlineElement();
outlineElem.AppendChildLast(text);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Initialize Title class object
Title title = new Title() { TitleText = titleText };

// Initialize Page class object
Page page = new Note.Page() { Title = title };

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddHyperlink_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="M:Aspose.Note.RichText.#ctor(Aspose.Note.Document)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.RichText" /> class.
            </summary>
      <param name="document">
            The parent document of the rich text.
            </param>
    </member>
    <member name="M:Aspose.Note.RichText.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.RichText" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Note.RichText.LastModifiedTime">
      <summary>
            Gets or sets the last modified time.
            </summary>
      <example>Let's emphasize latest text's changes by highlighting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Get RichText nodes modified last week.
var richTextNodes = document.GetChildNodes&lt;RichText&gt;().Where(e =&gt; e.LastModifiedTime &gt;= DateTime.Today.Subtract(TimeSpan.FromDays(7)));

foreach (var node in richTextNodes)
{
    // Set highlight color
    node.ParagraphStyle.Highlight = Color.DarkGreen;
    foreach (var run in node.TextRuns)
    {
        // Set highlight color
        run.Style.Highlight = Color.DarkSeaGreen;
    }
}

document.Save(Path.Combine(dataDir, "HighlightAllRecentChanges.pdf"));</code></example>
    </member>
    <member name="P:Aspose.Note.RichText.Text">
      <summary>
            Gets or sets the text. The string MUST NOT contain any characters of the value 10 (line feed).
            </summary>
      <example>Shows how to get all text from the document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Retrieve text
string text = string.Join(Environment.NewLine, oneFile.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

// Print text on the output screen
Console.WriteLine(text);</code></example>
      <example>Shows how to get all text from the page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get list of page nodes
var page = oneFile.GetChildNodes&lt;Page&gt;().FirstOrDefault();

if (page != null)
{
    // Retrieve text
    string text = string.Join(Environment.NewLine, page.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;
    // Print text on the output screen
    Console.WriteLine(text);
}</code></example>
      <example>Shows how to get text from every table's row.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Sample1.one");

// Get a list of table nodes
IList&lt;Table&gt; nodes = document.GetChildNodes&lt;Table&gt;();

foreach (Table table in nodes)
{
    // Iterate through table rows
    foreach (TableRow row in table)
    {
        // Retrieve text
        string text = string.Join(Environment.NewLine, row.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

        // Print text on the output screen
        Console.WriteLine(text);
    }
}</code></example>
      <example>Shows how to get text from a table.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Sample1.one");

// Get a list of table nodes
IList&lt;Table&gt; nodes = document.GetChildNodes&lt;Table&gt;();

// Set table count
int tblCount = 0;

foreach (Table table in nodes)
{
    tblCount++;
    Console.WriteLine("table # " + tblCount);

    // Retrieve text
    string text = string.Join(Environment.NewLine, table.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

    // Print text on the output screen
    Console.WriteLine(text);
}</code></example>
      <example>Shows how to set a title for a page.<code>
string dataDir = RunExamples.GetDataDir_Text();
string outputPath = dataDir + "CreateTitleMsStyle_out.one";

var doc = new Document();
var page = new Page(doc);

page.Title = new Title(doc)
{
    TitleText = new RichText(doc)
    {
        Text = "Title text.",
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleDate = new RichText(doc)
    {
        Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture),
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleTime = new RichText(doc)
    {
        Text = "12:34",
        ParagraphStyle = ParagraphStyle.Default
    }
};

doc.AppendChildLast(page);

doc.Save(outputPath);</code></example>
      <example>Shows how to pass through all pages and make a replacement in the text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

Dictionary&lt;string, string&gt; replacements = new Dictionary&lt;string, string&gt;();
replacements.Add("Some task here", "New Text Here");

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all RichText nodes
IList&lt;RichText&gt; textNodes = oneFile.GetChildNodes&lt;RichText&gt;();

foreach (RichText richText in textNodes)
{
    foreach (KeyValuePair&lt;string, string&gt; kvp in replacements)
    {
        // Replace text of a shape
        richText.Replace(kvp.Key, kvp.Value);
    }
}

dataDir = dataDir + "ReplaceTextOnAllPages_out.pdf";

// Save to any supported file format
oneFile.Save(dataDir, SaveFormat.Pdf);</code></example>
      <example>Shows how to get text from a table's cells.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Sample1.one");

// Get a list of table nodes
IList&lt;Table&gt; nodes = document.GetChildNodes&lt;Table&gt;();        

foreach (Table table in nodes)
{
    // Iterate through table rows
    foreach (TableRow row in table)
    {
        // Get list of TableCell nodes
        // Iterate through table cells
        foreach (TableCell cell in row)
        {
            // Retrieve text
            string text = string.Join(Environment.NewLine, cell.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

            // Print text on the output screen
            Console.WriteLine(text);
        }
    }
}</code></example>
      <example>Shows how to create a document and save it in html format using default options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();
Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
                 {
                     TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                     TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                     TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
                 };

// Save into HTML format
dataDir = dataDir + "CreateOneNoteDocAndSaveToHTML_out.html";
doc.Save(dataDir);</code></example>
      <example>Shows how to add new paragraph with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
RichText text = new RichText(doc) { Text = "OneNote text.", ParagraphStyle = textStyle };
text.Tags.Add(NoteTag.CreateYellowStar());

// Add text node
outlineElem.AppendChildLast(text);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddTextNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a document and save in html format specified range of pages.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();

Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
             {
                 TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
             };

// Save into HTML format
dataDir = dataDir + "CreateAndSavePageRange_out.html";
doc.Save(dataDir, new HtmlSaveOptions
                  {
                      PageCount = 1,
                      PageIndex = 0
                  });</code></example>
      <example>Shows how to access details of a tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "TagFile.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tags = richText.Tags.OfType&lt;NoteTag&gt;();
    if (tags.Any())
    {
        Console.WriteLine($"Text: {richText.Text}");
        foreach (var noteTag in tags)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTag.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTag.CreationTime}");
            Console.WriteLine($"    Font Color: {noteTag.FontColor}");
            Console.WriteLine($"    Status: {noteTag.Status}");
            Console.WriteLine($"    Label: {noteTag.Label}");
            Console.WriteLine($"    Icon: {noteTag.Icon}");
            Console.WriteLine($"    High Light: {noteTag.Highlight}");
        }
    }
}</code></example>
      <example>Shows how to create a document with a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Page page = new Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize RichText class object and apply text style
RichText text = new RichText(doc) { Text = "Hello OneNote text!", ParagraphStyle = textStyle };

// Add RichText node
outlineElem.AppendChildLast(text);

// Add OutlineElement node
outline.AppendChildLast(outlineElem);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "CreateDocWithSimpleRichText_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with chinese numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Initialize OneNote document
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize OneNote page
Aspose.Note.Page page = new Aspose.Note.Page(doc);
Outline outline = new Outline(doc);

// Apply text style settings
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

//------------------------
OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

//------------------------
OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

//------------------------
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "InsertChineseNumberList_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new bulleted lis.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply bullets
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };

// Initialize RichText class object and apply text style
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);
// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyBulletsOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply numbering
// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyNumberingOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to prepare a template for weekly meeting.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
var headerStyle = new ParagraphStyle() { FontName = "Calibri", FontSize = 16 };
var bodyStyle = new ParagraphStyle() { FontName = "Calibri", FontSize = 12 };

var d = new Document();
bool restartFlag = true;
var outline = d.AppendChildLast(new Page()
                                    {
                                        Title = new Title() { TitleText = new RichText() { Text = $"Weekly meeting {DateTime.Today:d}", ParagraphStyle = ParagraphStyle.Default } }
                                    })
               .AppendChildLast(new Outline() { VerticalOffset = 30, HorizontalOffset = 30 });

outline.AppendChildLast(new OutlineElement())
       .AppendChildLast(new RichText() { Text = "Important", ParagraphStyle = headerStyle });
foreach (var e in new[] { "First", "Second", "Third" })
{
    outline.AppendChildLast(new OutlineElement() { NumberList = CreateListNumberingStyle(bodyStyle, restartFlag) })
           .AppendChildLast(new RichText() { Text = e, ParagraphStyle = bodyStyle });
    restartFlag = false;
}

outline.AppendChildLast(new OutlineElement())
       .AppendChildLast(new RichText() { Text = "TO DO", ParagraphStyle = headerStyle, SpaceBefore = 15 });
restartFlag = true;
foreach (var e in new[] { "First", "Second", "Third" })
{
    outline.AppendChildLast(new OutlineElement() { NumberList = CreateListNumberingStyle(bodyStyle, restartFlag) })
           .AppendChildLast(new RichText() { Text = e, ParagraphStyle = bodyStyle, Tags = { NoteCheckBox.CreateBlueCheckBox() } });
    restartFlag = false;
}

d.Save(Path.Combine(dataDir, "meetingNotes.one"));</code></example>
      <example>Shows how to bind a hyperlink to a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Create an object of the Document class
Document doc = new Document();

RichText titleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append("Title!");

Outline outline = new Outline()
                      {
                          MaxWidth = 200,
                          MaxHeight = 200,
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };

TextStyle textStyleRed = new TextStyle
                             {
                                 FontColor = Color.Red,
                                 FontName = "Arial",
                                 FontSize = 10,
                             };

TextStyle textStyleHyperlink = new TextStyle
                                   {
                                       IsHyperlink = true,
                                       HyperlinkAddress = "www.google.com"
                                   };

RichText text = new RichText() { ParagraphStyle = ParagraphStyle.Default }
                    .Append("This is ", textStyleRed)
                    .Append("hyperlink", textStyleHyperlink)
                    .Append(". This text is not a hyperlink.", TextStyle.Default);

OutlineElement outlineElem = new OutlineElement();
outlineElem.AppendChildLast(text);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Initialize Title class object
Title title = new Title() { TitleText = titleText };

// Initialize Page class object
Page page = new Note.Page() { Title = title };

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddHyperlink_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.RichText.Length">
      <summary>
            Gets the length of the text.
            </summary>
    </member>
    <member name="P:Aspose.Note.RichText.ParagraphStyle">
      <summary>
            Gets or sets the paragraph style.
            These settings are used if there is no matching TextStyle object in <see cref="P:Aspose.Note.RichText.Styles" /> collection either this object doesn't specify a needed setting.
            </summary>
      <example>Let's emphasize page's titles among other headers by increasing font's size.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Iterate through page's titles.
foreach (var title in document.Select(e =&gt; e.Title.TitleText))
{
    title.ParagraphStyle.FontSize = 24;
    title.ParagraphStyle.IsBold = true;

    foreach (var run in title.TextRuns)
    {
        run.Style.FontSize = 24;
        run.Style.IsBold = true;
    }
}

document.Save(Path.Combine(dataDir, "ChangePageTitleStyle.pdf"));</code></example>
      <example>Shows how to apply Dark theme style to a Document.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document doc = new Document(Path.Combine(dataDir, "Aspose.one"));

foreach (var page in doc)
{
    page.BackgroundColor = Color.Black;
}

foreach (var node in doc.GetChildNodes&lt;RichText&gt;())
{
    var c = node.ParagraphStyle.FontColor;
    if (c.IsEmpty || Math.Abs(c.R - Color.Black.R) + Math.Abs(c.G - Color.Black.G) + Math.Abs(c.B - Color.Black.B) &lt;= 30)
    {
        node.ParagraphStyle.FontColor = Color.White;
    }
}

doc.Save(Path.Combine(dataDir, "AsposeDarkTheme.pdf"));</code></example>
      <example>Let's emphasize latest text's changes by highlighting.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Aspose.one");

// Get RichText nodes modified last week.
var richTextNodes = document.GetChildNodes&lt;RichText&gt;().Where(e =&gt; e.LastModifiedTime &gt;= DateTime.Today.Subtract(TimeSpan.FromDays(7)));

foreach (var node in richTextNodes)
{
    // Set highlight color
    node.ParagraphStyle.Highlight = Color.DarkGreen;
    foreach (var run in node.TextRuns)
    {
        // Set highlight color
        run.Style.Highlight = Color.DarkSeaGreen;
    }
}

document.Save(Path.Combine(dataDir, "HighlightAllRecentChanges.pdf"));</code></example>
      <example>Shows how to set a title for a page.<code>
string dataDir = RunExamples.GetDataDir_Text();
string outputPath = dataDir + "CreateTitleMsStyle_out.one";

var doc = new Document();
var page = new Page(doc);

page.Title = new Title(doc)
{
    TitleText = new RichText(doc)
    {
        Text = "Title text.",
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleDate = new RichText(doc)
    {
        Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture),
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleTime = new RichText(doc)
    {
        Text = "12:34",
        ParagraphStyle = ParagraphStyle.Default
    }
};

doc.AppendChildLast(page);

doc.Save(outputPath);</code></example>
      <example>Manipulate by text format using paragraph style.<code>
var document = new Document();
var page = new Page();
var outline = new Outline();
var outlineElem = new OutlineElement();

var text = new RichText() { ParagraphStyle = new ParagraphStyle() { FontName = "Courier New", FontSize = 20 } }
                .Append($"DefaultParagraphFontAndSize{Environment.NewLine}")
                .Append($"OnlyDefaultParagraphFont{Environment.NewLine}", new TextStyle() { FontSize = 14 })
                .Append("OnlyDefaultParagraphFontSize", new TextStyle() { FontName = "Verdana" });

outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
document.AppendChildLast(page);

document.Save(Path.Combine(RunExamples.GetDataDir_Text(), "SetDefaultParagraphStyle.one"));</code></example>
      <example>Shows how to add new paragraph with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize OutlineElement class object
OutlineElement outlineElem = new OutlineElement(doc);
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
RichText text = new RichText(doc) { Text = "OneNote text.", ParagraphStyle = textStyle };
text.Tags.Add(NoteTag.CreateYellowStar());

// Add text node
outlineElem.AppendChildLast(text);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddTextNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to access details of a tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "TagFile.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tags = richText.Tags.OfType&lt;NoteTag&gt;();
    if (tags.Any())
    {
        Console.WriteLine($"Text: {richText.Text}");
        foreach (var noteTag in tags)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTag.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTag.CreationTime}");
            Console.WriteLine($"    Font Color: {noteTag.FontColor}");
            Console.WriteLine($"    Status: {noteTag.Status}");
            Console.WriteLine($"    Label: {noteTag.Label}");
            Console.WriteLine($"    Icon: {noteTag.Icon}");
            Console.WriteLine($"    High Light: {noteTag.Highlight}");
        }
    }
}</code></example>
      <example>Shows how to insert new list with chinese numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Initialize OneNote document
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize OneNote page
Aspose.Note.Page page = new Aspose.Note.Page(doc);
Outline outline = new Outline(doc);

// Apply text style settings
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

//------------------------
OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

//------------------------
OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.ChineseCounting, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

//------------------------
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "InsertChineseNumberList_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new bulleted lis.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Aspose.Note.Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply bullets
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };

// Initialize RichText class object and apply text style
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("*", "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);
// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyBulletsOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to insert new list with numbering.<code>
string dataDir = RunExamples.GetDataDir_Text();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize Outline class object
Outline outline = new Outline(doc);

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Initialize OutlineElement class objects and apply numbering
// Numbers in the same outline are automatically incremented.
OutlineElement outlineElem1 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text1 = new RichText(doc) { Text = "First", ParagraphStyle = defaultStyle };
outlineElem1.AppendChildLast(text1);

OutlineElement outlineElem2 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text2 = new RichText(doc) { Text = "Second", ParagraphStyle = defaultStyle };
outlineElem2.AppendChildLast(text2);

OutlineElement outlineElem3 = new OutlineElement(doc) { NumberList = new NumberList("{0})", NumberFormat.DecimalNumbers, "Arial", 10) };
RichText text3 = new RichText(doc) { Text = "Third", ParagraphStyle = defaultStyle };
outlineElem3.AppendChildLast(text3);

// Add outline elements
outline.AppendChildLast(outlineElem1);
outline.AppendChildLast(outlineElem2);
outline.AppendChildLast(outlineElem3);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "ApplyNumberingOnText_out.one"; 
doc.Save(dataDir);</code></example>
      <example>Shows how to prepare a template for weekly meeting.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
var headerStyle = new ParagraphStyle() { FontName = "Calibri", FontSize = 16 };
var bodyStyle = new ParagraphStyle() { FontName = "Calibri", FontSize = 12 };

var d = new Document();
bool restartFlag = true;
var outline = d.AppendChildLast(new Page()
                                    {
                                        Title = new Title() { TitleText = new RichText() { Text = $"Weekly meeting {DateTime.Today:d}", ParagraphStyle = ParagraphStyle.Default } }
                                    })
               .AppendChildLast(new Outline() { VerticalOffset = 30, HorizontalOffset = 30 });

outline.AppendChildLast(new OutlineElement())
       .AppendChildLast(new RichText() { Text = "Important", ParagraphStyle = headerStyle });
foreach (var e in new[] { "First", "Second", "Third" })
{
    outline.AppendChildLast(new OutlineElement() { NumberList = CreateListNumberingStyle(bodyStyle, restartFlag) })
           .AppendChildLast(new RichText() { Text = e, ParagraphStyle = bodyStyle });
    restartFlag = false;
}

outline.AppendChildLast(new OutlineElement())
       .AppendChildLast(new RichText() { Text = "TO DO", ParagraphStyle = headerStyle, SpaceBefore = 15 });
restartFlag = true;
foreach (var e in new[] { "First", "Second", "Third" })
{
    outline.AppendChildLast(new OutlineElement() { NumberList = CreateListNumberingStyle(bodyStyle, restartFlag) })
           .AppendChildLast(new RichText() { Text = e, ParagraphStyle = bodyStyle, Tags = { NoteCheckBox.CreateBlueCheckBox() } });
    restartFlag = false;
}

d.Save(Path.Combine(dataDir, "meetingNotes.one"));</code></example>
      <example>Shows how to bind a hyperlink to a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Create an object of the Document class
Document doc = new Document();

RichText titleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append("Title!");

Outline outline = new Outline()
                      {
                          MaxWidth = 200,
                          MaxHeight = 200,
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };

TextStyle textStyleRed = new TextStyle
                             {
                                 FontColor = Color.Red,
                                 FontName = "Arial",
                                 FontSize = 10,
                             };

TextStyle textStyleHyperlink = new TextStyle
                                   {
                                       IsHyperlink = true,
                                       HyperlinkAddress = "www.google.com"
                                   };

RichText text = new RichText() { ParagraphStyle = ParagraphStyle.Default }
                    .Append("This is ", textStyleRed)
                    .Append("hyperlink", textStyleHyperlink)
                    .Append(". This text is not a hyperlink.", TextStyle.Default);

OutlineElement outlineElem = new OutlineElement();
outlineElem.AppendChildLast(text);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Initialize Title class object
Title title = new Title() { TitleText = titleText };

// Initialize Page class object
Page page = new Note.Page() { Title = title };

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddHyperlink_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.RichText.Alignment">
      <summary>
            Gets or sets the alignment.
            </summary>
    </member>
    <member name="P:Aspose.Note.RichText.SpaceBefore">
      <summary>
            Gets or sets the minimum amount of space before.
            </summary>
    </member>
    <member name="P:Aspose.Note.RichText.SpaceAfter">
      <summary>
            Gets or sets the minimum amount of space after.
            </summary>
    </member>
    <member name="P:Aspose.Note.RichText.LineSpacing">
      <summary>
            Gets or sets the line spacing.
            </summary>
    </member>
    <member name="P:Aspose.Note.RichText.Styles">
      <summary>
            Gets the styles.
            </summary>
      <example>Shows how to compose a table having text with various styles.<code>
string dataDir = RunExamples.GetDataDir_Text();

var headerText = new RichText() { ParagraphStyle = new ParagraphStyle() { FontSize = 18, IsBold = true }, Alignment = HorizontalAlignment.Center }
                    .Append("Super contest for suppliers.");

var page = new Page();
var outline = page.AppendChildLast(new Outline() { HorizontalOffset = 50 });
outline.AppendChildLast(new OutlineElement()).AppendChildLast(headerText);

// Summary text before table
var bodyTextHeader = outline.AppendChildLast(new OutlineElement()).AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default });
bodyTextHeader.Append("This is the final ranking of proposals got from our suppliers.");

var ranking = outline.AppendChildLast(new OutlineElement()).AppendChildLast(new Table());
var headerRow = ranking.AppendChildFirst(new TableRow());

var headerStyle = ParagraphStyle.Default;
headerStyle.IsBold = true;

// Let's add a set of columns and a header row
var backGroundColor = Color.LightGray;
foreach (var header in new[] { "Supplier", "Contacts", "Score A", "Score B", "Score C", "Final score", "Attached materials", "Comments" })
{
    ranking.Columns.Add(new TableColumn());
    headerRow.AppendChildLast(new TableCell() { BackgroundColor = backGroundColor })
             .AppendChildLast(new OutlineElement())
             .AppendChildLast(new RichText() { ParagraphStyle = headerStyle })
                .Append(header);
}

// Let's 5 empty rows. Rows have interchanging background color
for (int i = 0; i &lt; 5; i++)
{
    backGroundColor = backGroundColor.IsEmpty ? Color.LightGray : Color.Empty;

    var row = ranking.AppendChildLast(new TableRow());
    for (int j = 0; j &lt; ranking.Columns.Count(); j++)
    {
        row.AppendChildLast(new TableCell() { BackgroundColor = backGroundColor })
           .AppendChildLast(new OutlineElement())
           .AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default });
    }
}

// Let's add some template for content in 'Contacts' column
foreach (var row in ranking.Skip(1))
{
    var contactsCell = row.ElementAt(1);
    contactsCell.AppendChildLast(new OutlineElement())
                .AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default })
                    .Append("Web: ").Append("link", new TextStyle() { HyperlinkAddress = "www.link.com", IsHyperlink = true });
    contactsCell.AppendChildLast(new OutlineElement())
                .AppendChildLast(new RichText() { ParagraphStyle = ParagraphStyle.Default })
                    .Append("E-mail: ").Append("mail", new TextStyle() { HyperlinkAddress = "mailto:hi@link.com", IsHyperlink = true });
}

var d = new Document();
d.AppendChildLast(page);
d.Save(Path.Combine(dataDir, "ComposeTable_out.one"));</code></example>
    </member>
    <member name="P:Aspose.Note.RichText.TextRuns">
      <summary>
            Gets the collection of text runs.
            </summary>
    </member>
    <member name="P:Aspose.Note.RichText.Tags">
      <summary>
            Gets the list of all tags of a paragraph.
            </summary>
      <example>Shows how to access details of outlook's tasks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Get all RichText nodes
IList&lt;RichText&gt; nodes = oneFile.GetChildNodes&lt;RichText&gt;();

// Iterate through each node
foreach (RichText richText in nodes)
{
    var tasks = richText.Tags.OfType&lt;NoteTask&gt;();
    if (tasks.Any())
    {
        Console.WriteLine($"Task: {richText.Text}");
        foreach (var noteTask in tasks)
        {
            // Retrieve properties
            Console.WriteLine($"    Completed Time: {noteTask.CompletedTime}");
            Console.WriteLine($"    Create Time: {noteTask.CreationTime}");
            Console.WriteLine($"    Due Date: {noteTask.DueDate}");
            Console.WriteLine($"    Status: {noteTask.Status}");
            Console.WriteLine($"    Icon: {noteTask.Icon}");
        }
    }
}</code></example>
    </member>
    <member name="M:Aspose.Note.RichText.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="M:Aspose.Note.RichText.Insert(System.Int32,System.String)">
      <summary>
            Inserts a specified string at a specified index position in this instance.
            </summary>
      <param name="startIndex">
            The start index.
            </param>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:Aspose.Note.RichText.Insert(System.Int32,System.String,Aspose.Note.TextStyle)">
      <summary>
            Inserts a specified string with specified style at a specified index position in this instance.
            </summary>
      <param name="startIndex">
            The start index.
            </param>
      <param name="value">
            The value.
            </param>
      <param name="style">
            The style.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:Aspose.Note.RichText.AppendFront(System.String)">
      <summary>
            Adds a string to the front of the first text range.
            </summary>
      <param name="value">
            The added value.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.AppendFront(System.String,Aspose.Note.TextStyle)">
      <summary>
            Adds a string to the front.
            </summary>
      <param name="value">
            The added value.
            </param>
      <param name="style">
            The style of added string.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.Append(System.String,Aspose.Note.TextStyle)">
      <summary>
            Adds a string to the end.
            </summary>
      <param name="value">
            The added value.
            </param>
      <param name="style">
            The style of added string.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
      <example>Set proofing language for a text.<code>
var document = new Document();
var page = new Page();
var outline = new Outline();
var outlineElem = new OutlineElement();

var text = new RichText() { ParagraphStyle = ParagraphStyle.Default };
text.Append("United States", new TextStyle() { Language = CultureInfo.GetCultureInfo("en-US") })
    .Append(" Germany", new TextStyle() { Language = CultureInfo.GetCultureInfo("de-DE") })
    .Append(" China", new TextStyle() { Language = CultureInfo.GetCultureInfo("zh-CN") });

outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
document.AppendChildLast(page);

document.Save(Path.Combine(RunExamples.GetDataDir_Text(), "SetProofingLanguageForText.one"));</code></example>
      <example>Manipulate by text format using paragraph style.<code>
var document = new Document();
var page = new Page();
var outline = new Outline();
var outlineElem = new OutlineElement();

var text = new RichText() { ParagraphStyle = new ParagraphStyle() { FontName = "Courier New", FontSize = 20 } }
                .Append($"DefaultParagraphFontAndSize{Environment.NewLine}")
                .Append($"OnlyDefaultParagraphFont{Environment.NewLine}", new TextStyle() { FontSize = 14 })
                .Append("OnlyDefaultParagraphFontSize", new TextStyle() { FontName = "Verdana" });

outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
document.AppendChildLast(page);

document.Save(Path.Combine(RunExamples.GetDataDir_Text(), "SetDefaultParagraphStyle.one"));</code></example>
      <example>Shows how to bind a hyperlink to a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Create an object of the Document class
Document doc = new Document();

RichText titleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append("Title!");

Outline outline = new Outline()
                      {
                          MaxWidth = 200,
                          MaxHeight = 200,
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };

TextStyle textStyleRed = new TextStyle
                             {
                                 FontColor = Color.Red,
                                 FontName = "Arial",
                                 FontSize = 10,
                             };

TextStyle textStyleHyperlink = new TextStyle
                                   {
                                       IsHyperlink = true,
                                       HyperlinkAddress = "www.google.com"
                                   };

RichText text = new RichText() { ParagraphStyle = ParagraphStyle.Default }
                    .Append("This is ", textStyleRed)
                    .Append("hyperlink", textStyleHyperlink)
                    .Append(". This text is not a hyperlink.", TextStyle.Default);

OutlineElement outlineElem = new OutlineElement();
outlineElem.AppendChildLast(text);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Initialize Title class object
Title title = new Title() { TitleText = titleText };

// Initialize Page class object
Page page = new Note.Page() { Title = title };

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddHyperlink_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a document with formatted rich text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Page page = new Page();

// Initialize Title class object
Title title = new Title();

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultTextStyle = new ParagraphStyle
                                      {
                                          FontColor = Color.Black,
                                          FontName = "Arial",
                                          FontSize = 10
                                      };

RichText titleText = new RichText() { ParagraphStyle = defaultTextStyle }.Append("Title!");
Outline outline = new Outline()
                      {
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };
OutlineElement outlineElem = new OutlineElement();

TextStyle textStyleForHelloWord = new TextStyle
                                      {
                                          FontColor = Color.Red,
                                          FontName = "Arial",
                                          FontSize = 10,
                                      };

TextStyle textStyleForOneNoteWord = new TextStyle
                                        {
                                            FontColor = Color.Green,
                                            FontName = "Calibri",
                                            FontSize = 10,
                                            IsItalic = true,
                                        };

TextStyle textStyleForTextWord = new TextStyle
                                     {
                                         FontColor = Color.Blue,
                                         FontName = "Arial",
                                         FontSize = 15,
                                         IsBold = true,
                                         IsItalic = true,
                                     };

RichText text = new RichText() { ParagraphStyle = defaultTextStyle }
                    .Append("Hello", textStyleForHelloWord)
                    .Append(" OneNote", textStyleForOneNoteWord)
                    .Append(" text", textStyleForTextWord)
                    .Append("!", TextStyle.Default);

title.TitleText = titleText;

// Set page title
page.Title = title;

// Add RichText node
outlineElem.AppendChildLast(text);

// Add OutlineElement node
outline.AppendChildLast(outlineElem);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "CreateDocWithFormattedRichText_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="M:Aspose.Note.RichText.Append(System.String)">
      <summary>
            Adds a string to the last text range.
            </summary>
      <param name="value">
            The added value.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
      <example>Manipulate by text format using paragraph style.<code>
var document = new Document();
var page = new Page();
var outline = new Outline();
var outlineElem = new OutlineElement();

var text = new RichText() { ParagraphStyle = new ParagraphStyle() { FontName = "Courier New", FontSize = 20 } }
                .Append($"DefaultParagraphFontAndSize{Environment.NewLine}")
                .Append($"OnlyDefaultParagraphFont{Environment.NewLine}", new TextStyle() { FontSize = 14 })
                .Append("OnlyDefaultParagraphFontSize", new TextStyle() { FontName = "Verdana" });

outlineElem.AppendChildLast(text);
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
document.AppendChildLast(page);

document.Save(Path.Combine(RunExamples.GetDataDir_Text(), "SetDefaultParagraphStyle.one"));</code></example>
      <example>Shows how to bind a hyperlink to a text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tasks();

// Create an object of the Document class
Document doc = new Document();

RichText titleText = new RichText() { ParagraphStyle = ParagraphStyle.Default }.Append("Title!");

Outline outline = new Outline()
                      {
                          MaxWidth = 200,
                          MaxHeight = 200,
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };

TextStyle textStyleRed = new TextStyle
                             {
                                 FontColor = Color.Red,
                                 FontName = "Arial",
                                 FontSize = 10,
                             };

TextStyle textStyleHyperlink = new TextStyle
                                   {
                                       IsHyperlink = true,
                                       HyperlinkAddress = "www.google.com"
                                   };

RichText text = new RichText() { ParagraphStyle = ParagraphStyle.Default }
                    .Append("This is ", textStyleRed)
                    .Append("hyperlink", textStyleHyperlink)
                    .Append(". This text is not a hyperlink.", TextStyle.Default);

OutlineElement outlineElem = new OutlineElement();
outlineElem.AppendChildLast(text);

// Add outline elements
outline.AppendChildLast(outlineElem);

// Initialize Title class object
Title title = new Title() { TitleText = titleText };

// Initialize Page class object
Page page = new Note.Page() { Title = title };

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddHyperlink_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="M:Aspose.Note.RichText.Remove(System.Int32,System.Int32)">
      <summary>
            Removes specified number of characters in the current instance beginning at a specified position.
            </summary>
      <param name="startIndex">
            The start index.
            </param>
      <param name="count">
            The count.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:Aspose.Note.RichText.Remove(System.Int32)">
      <summary>
            Removes all the characters in the current instance, beginning at a specified position and continuing through the last position.
            </summary>
      <param name="startIndex">
            The start index.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:Aspose.Note.RichText.Replace(System.Char,System.Char)">
      <summary>
            Replaces all occurrences of a specified Unicode character in this instance with another specified Unicode character.
            </summary>
      <param name="oldChar">
            The old char.
            </param>
      <param name="newChar">
            The new char.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.Replace(System.String,System.String)">
      <summary>
            Replaces all occurrences of a specified string in the current instance with another specified string.
            </summary>
      <param name="oldValue">
            The old value.
            </param>
      <param name="newValue">
            The new value.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
      </exception>
      <exception cref="T:System.ArgumentException">
      </exception>
      <example>Shows how to pass through page's text and make a replacement.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Text();

Dictionary&lt;string, string&gt; replacements = new Dictionary&lt;string, string&gt;();
replacements.Add("voice over", "voice over new text");

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

IList&lt;Page&gt; pageNodes = oneFile.GetChildNodes&lt;Page&gt;();

// Get all RichText nodes
IList&lt;RichText&gt; textNodes = pageNodes[0].GetChildNodes&lt;RichText&gt;();

foreach (RichText richText in textNodes)
{
    foreach (KeyValuePair&lt;string, string&gt; kvp in replacements)
    {
        // Replace text of a shape
        richText.Replace(kvp.Key, kvp.Value);
    }
}

// Save to any supported file format
dataDir = dataDir + "ReplaceTextOnParticularPage_out.pdf";
oneFile.Save(dataDir, SaveFormat.Pdf);</code></example>
      <example>Shows how to generate a new document by replacing special text pieces in a template.<code>
string dataDir = RunExamples.GetDataDir_Text();

var D = new Dictionary&lt;string, string&gt;
            {
                { "Company", "Atlas Shrugged Ltd" },
                { "CandidateName", "John Galt" },
                { "JobTitle", "Chief Entrepreneur Officer" },
                { "Department", "Sales" },
                { "Salary", "123456 USD" },
                { "Vacation", "30" },
                { "StartDate", "29 Feb 2024" },
                { "YourName", "Ayn Rand" }
            };

// Load the template document into Aspose.Note.
var d = new Document(Path.Combine(dataDir, "JobOffer.one"));

// Let's replace all template words
foreach (var e in d.GetChildNodes&lt;RichText&gt;())
{
    foreach (var replace in D)
    {
        e.Replace($"${{{replace.Key}}}", replace.Value);
    }
}

d.Save(Path.Combine(dataDir, "JobOffer_out.one"));</code></example>
    </member>
    <member name="M:Aspose.Note.RichText.Replace(System.String,System.String,Aspose.Note.TextStyle)">
      <summary>
            Replaces all occurrences of a specified string in the current instance with another specified string in specified style.
            </summary>
      <param name="oldValue">
            The old value.
            </param>
      <param name="newValue">
            The new value.
            </param>
      <param name="style">
            The style of the new value.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
      </exception>
      <exception cref="T:System.ArgumentException">
      </exception>
    </member>
    <member name="M:Aspose.Note.RichText.Trim(System.Char[])">
      <summary>
            Removes all leading and trailing occurrences of a set of characters specified in an array.
            </summary>
      <param name="trimChars">
            The trim chars.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.Trim(System.Char)">
      <summary>
            Removes all leading and trailing instances of a characte.
            </summary>
      <param name="trimChar">
            The trim char.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.Trim">
      <summary>
            Removes all leading and trailing white-space characters.
            </summary>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.TrimStart(System.Char[])">
      <summary>
            Removes all the leading occurrences of a set of characters specified in an array.
            </summary>
      <param name="trimChars">
            The trim chars.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.TrimStart(System.Char)">
      <summary>
            Removes all the leading occurrences of a specified character.
            </summary>
      <param name="trimChar">
            The trim char.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.TrimStart">
      <summary>
            Removes all the leading white-space characters.
            </summary>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.TrimEnd(System.Char[])">
      <summary>
            Removes all the trailing occurrences of a set of characters specified in an array.
            </summary>
      <param name="trimChars">
            The trim chars.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.TrimEnd(System.Char)">
      <summary>
            Removes all the trailing occurrences of a character.
            </summary>
      <param name="trimChar">
            The trim char.
            </param>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.TrimEnd">
      <summary>
            Removes all the trailing white-space characters.
            </summary>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>
            Returns the zero-based index of the first occurrence of the specified string in the current instance.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="startIndex">
            The starting search position
            </param>
      <param name="count">
            The count.
            </param>
      <param name="comparisonType">
            The type of search to use for the specified string
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>
            Returns the zero-based index of the first occurrence of the specified string in the current instance. Parameters specify the starting search position in the current string and the type of search to use for the specified string.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="startIndex">
            The starting search position
            </param>
      <param name="comparisonType">
            The type of search to use for the specified string
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>
            Returns the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="startIndex">
            The starting search position
            </param>
      <param name="count">
            The count.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.IndexOf(System.String,System.StringComparison)">
      <summary>
            Returns the zero-based index of the first occurrence of the specified string in the current instance. A parameter specifies the type of search to use for the specified string.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="comparisonType">
            The type of search to use for the specified string
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>
            Returns the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="startIndex">
            The starting search position
            </param>
      <param name="count">
            The count.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.IndexOf(System.Char,System.Int32)">
      <summary>
            Returns the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="startIndex">
            The starting search position
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.IndexOf(System.String)">
      <summary>
            Returns the zero-based index of the first occurrence of the specified string in this instance.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.IndexOf(System.Char)">
      <summary>
            Returns the zero-based index of the first occurrence of the specified Unicode character in this string.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.IndexOf(System.String,System.Int32)">
      <summary>
            Returns the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="startIndex">
            The starting search position
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.Clear">
      <summary>
            Clears content of this instance.
            </summary>
      <returns>
            The <see cref="T:Aspose.Note.RichText" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.RichText.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through characters of this RichText object.
            </summary>
      <returns>
            The <see cref="T:System.Collections.IEnumerator" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.Saving.AlwaysSplitObjectsAlgorithm">
      <summary>
            Splits an object into several parts in case it doesn't fit in original page.
            </summary>
      <example>When long OneNote pages are saved in pdf format they are split across pages. The example shows how to configure the splitting logic of objects located on page's breaks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");
var pdfSaveOptions = new PdfSaveOptions();
pdfSaveOptions.PageSplittingAlgorithm = new AlwaysSplitObjectsAlgorithm();
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm();
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm();

float heightLimitOfClonedPart = 500;
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(heightLimitOfClonedPart);
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(heightLimitOfClonedPart);

pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(100);
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(400);

dataDir = dataDir + "UsingKeepSOlidObjectsAlgorithm_out.pdf";
doc.Save(dataDir);</code></example>
    </member>
    <member name="T:Aspose.Note.Saving.BinarizationMethod">
      <summary>
            Specifies binarization method for an image.
            </summary>
      <example>Shows how to save a document as binary image using Otsu's method.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingOtsuMethod_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                        {
                            ColorMode = ColorMode.BlackAndWhite,
                            BinarizationOptions = new ImageBinarizationOptions()
                                                  {
                                                      BinarizationMethod = BinarizationMethod.Otsu,
                                                  }
                        });</code></example>
      <example>Shows how to save a document as binary image using fixed threshold.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingFixedThreshold_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.BlackAndWhite,
                              BinarizationOptions = new ImageBinarizationOptions()
                                                        {
                                                            BinarizationMethod = BinarizationMethod.FixedThreshold,
                                                            BinarizationThreshold = 123
                                                        }
                          });</code></example>
    </member>
    <member name="F:Aspose.Note.Saving.BinarizationMethod.FixedThreshold">
      <summary>
            The image's binarization is performed using specified fixed threshold.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.BinarizationMethod.Otsu">
      <summary>
            The image's binarization is performed adaptively using Otsu's method to evaluate threshold.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.ColorMode">
      <summary>
            The color mode of the image.
            </summary>
      <example>Shows how to save a document as grayscale image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveAsGrayscaleImage_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.GrayScale
                          });</code></example>
      <example>Shows how to save a document as image in Tiff format using CCITT Group 3 fax compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingCcitt3Compression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          ColorMode = ColorMode.BlackAndWhite,
                          TiffCompression = TiffCompression.Ccitt3
                      });</code></example>
      <example>Shows how to save a document as binary image using Otsu's method.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingOtsuMethod_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                        {
                            ColorMode = ColorMode.BlackAndWhite,
                            BinarizationOptions = new ImageBinarizationOptions()
                                                  {
                                                      BinarizationMethod = BinarizationMethod.Otsu,
                                                  }
                        });</code></example>
      <example>Shows how to save a document as binary image using fixed threshold.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingFixedThreshold_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.BlackAndWhite,
                              BinarizationOptions = new ImageBinarizationOptions()
                                                        {
                                                            BinarizationMethod = BinarizationMethod.FixedThreshold,
                                                            BinarizationThreshold = 123
                                                        }
                          });</code></example>
    </member>
    <member name="F:Aspose.Note.Saving.ColorMode.Normal">
      <summary>
            Full color image 
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.ColorMode.GrayScale">
      <summary>
            Gray scale image 
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.ColorMode.BlackAndWhite">
      <summary>
            Binary image: only black and white colors are used
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.HtmlSaveOptions">
      <summary>
            Allows to specify additional options when saving document to HTML format.
            </summary>
      <example>Shows how to save a document in html format with storing all resources(css/fonts/images) to a separate files.<code>
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

var options = new HtmlSaveOptions()
             {
                 ExportCss = ResourceExportType.ExportAsStream,
                 ExportFonts = ResourceExportType.ExportAsStream,
                 ExportImages = ResourceExportType.ExportAsStream,
                 FontFaceTypes = FontFaceType.Ttf
             };
document.Save(dataDir + "document_out.html", options);</code></example>
      <example>Shows how to save a document to a stream in html format with embedding of all resources(css/fonts/images).<code>
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

var options = new HtmlSaveOptions()
             {
                 ExportCss = ResourceExportType.ExportEmbedded,
                 ExportFonts = ResourceExportType.ExportEmbedded,
                 ExportImages = ResourceExportType.ExportEmbedded,
                 FontFaceTypes = FontFaceType.Ttf
             };

var r = new MemoryStream();
document.Save(r, options);</code></example>
      <example>Shows how to create a document and save in html format specified range of pages.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();

Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
             {
                 TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
             };

// Save into HTML format
dataDir = dataDir + "CreateAndSavePageRange_out.html";
doc.Save(dataDir, new HtmlSaveOptions
                  {
                      PageCount = 1,
                      PageIndex = 0
                  });</code></example>
      <example>Shows how to save a document in html format with storing all resources(css/fonts/images) by using user-defined callbacks.<code>
// The code below creates 'documentFolder' folder containing document.html, 'css' folder with 'style.css' file, 'images' folder with images and 'fonts' folder with fonts.
// 'style.css' file will contain at the end the following string "/* This line is appended to stream manually by user */"
var savingCallbacks = new UserSavingCallbacks()
                          {
                              RootFolder = "documentFolder",
                              CssFolder = "css",
                              KeepCssStreamOpened = true,
                              ImagesFolder = "images",
                              FontsFolder = "fonts"
                          };
var options = new HtmlSaveOptions
              {
                  FontFaceTypes = FontFaceType.Ttf,
                  CssSavingCallback = savingCallbacks,
                  FontSavingCallback = savingCallbacks,
                  ImageSavingCallback = savingCallbacks
              };

if (!Directory.Exists(savingCallbacks.RootFolder))
{
    Directory.CreateDirectory(savingCallbacks.RootFolder);
}

string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

using (var stream = File.Create(Path.Combine(savingCallbacks.RootFolder, "document.html")))
{
    document.Save(stream, options);
}

using (var writer = new StreamWriter(savingCallbacks.CssStream))
{
    writer.WriteLine();
    writer.WriteLine("/* This line is appended to stream manually by user */");
}</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.HtmlSaveOptions.ExportFonts">
      <summary>
            Gets or sets the way fonts are exported.
            </summary>
      <example>Shows how to save a document in html format with storing all resources(css/fonts/images) to a separate files.<code>
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

var options = new HtmlSaveOptions()
             {
                 ExportCss = ResourceExportType.ExportAsStream,
                 ExportFonts = ResourceExportType.ExportAsStream,
                 ExportImages = ResourceExportType.ExportAsStream,
                 FontFaceTypes = FontFaceType.Ttf
             };
document.Save(dataDir + "document_out.html", options);</code></example>
      <example>Shows how to save a document to a stream in html format with embedding of all resources(css/fonts/images).<code>
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

var options = new HtmlSaveOptions()
             {
                 ExportCss = ResourceExportType.ExportEmbedded,
                 ExportFonts = ResourceExportType.ExportEmbedded,
                 ExportImages = ResourceExportType.ExportEmbedded,
                 FontFaceTypes = FontFaceType.Ttf
             };

var r = new MemoryStream();
document.Save(r, options);</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.HtmlSaveOptions.ExportCss">
      <summary>
            Gets or sets  the way css is exported.
            </summary>
      <example>Shows how to save a document in html format with storing all resources(css/fonts/images) to a separate files.<code>
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

var options = new HtmlSaveOptions()
             {
                 ExportCss = ResourceExportType.ExportAsStream,
                 ExportFonts = ResourceExportType.ExportAsStream,
                 ExportImages = ResourceExportType.ExportAsStream,
                 FontFaceTypes = FontFaceType.Ttf
             };
document.Save(dataDir + "document_out.html", options);</code></example>
      <example>Shows how to save a document to a stream in html format with embedding of all resources(css/fonts/images).<code>
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

var options = new HtmlSaveOptions()
             {
                 ExportCss = ResourceExportType.ExportEmbedded,
                 ExportFonts = ResourceExportType.ExportEmbedded,
                 ExportImages = ResourceExportType.ExportEmbedded,
                 FontFaceTypes = FontFaceType.Ttf
             };

var r = new MemoryStream();
document.Save(r, options);</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.HtmlSaveOptions.ExportImages">
      <summary>
            Gets or sets  the way images are exported.
            </summary>
      <example>Shows how to save a document in html format with storing all resources(css/fonts/images) to a separate files.<code>
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

var options = new HtmlSaveOptions()
             {
                 ExportCss = ResourceExportType.ExportAsStream,
                 ExportFonts = ResourceExportType.ExportAsStream,
                 ExportImages = ResourceExportType.ExportAsStream,
                 FontFaceTypes = FontFaceType.Ttf
             };
document.Save(dataDir + "document_out.html", options);</code></example>
      <example>Shows how to save a document to a stream in html format with embedding of all resources(css/fonts/images).<code>
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

var options = new HtmlSaveOptions()
             {
                 ExportCss = ResourceExportType.ExportEmbedded,
                 ExportFonts = ResourceExportType.ExportEmbedded,
                 ExportImages = ResourceExportType.ExportEmbedded,
                 FontFaceTypes = FontFaceType.Ttf
             };

var r = new MemoryStream();
document.Save(r, options);</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.HtmlSaveOptions.FontFaceTypes">
      <summary>
            Gets or sets the font face types.
            </summary>
      <value>
            The font face types.
            </value>
      <example>Shows how to save a document in html format with storing all resources(css/fonts/images) to a separate files.<code>
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

var options = new HtmlSaveOptions()
             {
                 ExportCss = ResourceExportType.ExportAsStream,
                 ExportFonts = ResourceExportType.ExportAsStream,
                 ExportImages = ResourceExportType.ExportAsStream,
                 FontFaceTypes = FontFaceType.Ttf
             };
document.Save(dataDir + "document_out.html", options);</code></example>
      <example>Shows how to save a document to a stream in html format with embedding of all resources(css/fonts/images).<code>
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

var options = new HtmlSaveOptions()
             {
                 ExportCss = ResourceExportType.ExportEmbedded,
                 ExportFonts = ResourceExportType.ExportEmbedded,
                 ExportImages = ResourceExportType.ExportEmbedded,
                 FontFaceTypes = FontFaceType.Ttf
             };

var r = new MemoryStream();
document.Save(r, options);</code></example>
      <example>Shows how to save a document in html format with storing all resources(css/fonts/images) by using user-defined callbacks.<code>
// The code below creates 'documentFolder' folder containing document.html, 'css' folder with 'style.css' file, 'images' folder with images and 'fonts' folder with fonts.
// 'style.css' file will contain at the end the following string "/* This line is appended to stream manually by user */"
var savingCallbacks = new UserSavingCallbacks()
                          {
                              RootFolder = "documentFolder",
                              CssFolder = "css",
                              KeepCssStreamOpened = true,
                              ImagesFolder = "images",
                              FontsFolder = "fonts"
                          };
var options = new HtmlSaveOptions
              {
                  FontFaceTypes = FontFaceType.Ttf,
                  CssSavingCallback = savingCallbacks,
                  FontSavingCallback = savingCallbacks,
                  ImageSavingCallback = savingCallbacks
              };

if (!Directory.Exists(savingCallbacks.RootFolder))
{
    Directory.CreateDirectory(savingCallbacks.RootFolder);
}

string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

using (var stream = File.Create(Path.Combine(savingCallbacks.RootFolder, "document.html")))
{
    document.Save(stream, options);
}

using (var writer = new StreamWriter(savingCallbacks.CssStream))
{
    writer.WriteLine();
    writer.WriteLine("/* This line is appended to stream manually by user */");
}</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.HtmlSaveOptions.DocumentPerPageGeneration">
      <summary>
            Gets or sets a value indicating whether document per page generation is enabled.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.HtmlSaveOptions.CssPerPageGeneration">
      <summary>
            Gets or sets whether the StyleSheet file will be generated for each new page separately.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.HtmlSaveOptions.CssSavingCallback">
      <summary>
            Gets or sets the callback that is called to create resource to store CSS.
            </summary>
      <example>Shows how to save a document in html format with storing all resources(css/fonts/images) by using user-defined callbacks.<code>
// The code below creates 'documentFolder' folder containing document.html, 'css' folder with 'style.css' file, 'images' folder with images and 'fonts' folder with fonts.
// 'style.css' file will contain at the end the following string "/* This line is appended to stream manually by user */"
var savingCallbacks = new UserSavingCallbacks()
                          {
                              RootFolder = "documentFolder",
                              CssFolder = "css",
                              KeepCssStreamOpened = true,
                              ImagesFolder = "images",
                              FontsFolder = "fonts"
                          };
var options = new HtmlSaveOptions
              {
                  FontFaceTypes = FontFaceType.Ttf,
                  CssSavingCallback = savingCallbacks,
                  FontSavingCallback = savingCallbacks,
                  ImageSavingCallback = savingCallbacks
              };

if (!Directory.Exists(savingCallbacks.RootFolder))
{
    Directory.CreateDirectory(savingCallbacks.RootFolder);
}

string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

using (var stream = File.Create(Path.Combine(savingCallbacks.RootFolder, "document.html")))
{
    document.Save(stream, options);
}

using (var writer = new StreamWriter(savingCallbacks.CssStream))
{
    writer.WriteLine();
    writer.WriteLine("/* This line is appended to stream manually by user */");
}</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.HtmlSaveOptions.FontSavingCallback">
      <summary>
            Gets or sets the callback that is called to create resource to store font.
            </summary>
      <example>Shows how to save a document in html format with storing all resources(css/fonts/images) by using user-defined callbacks.<code>
// The code below creates 'documentFolder' folder containing document.html, 'css' folder with 'style.css' file, 'images' folder with images and 'fonts' folder with fonts.
// 'style.css' file will contain at the end the following string "/* This line is appended to stream manually by user */"
var savingCallbacks = new UserSavingCallbacks()
                          {
                              RootFolder = "documentFolder",
                              CssFolder = "css",
                              KeepCssStreamOpened = true,
                              ImagesFolder = "images",
                              FontsFolder = "fonts"
                          };
var options = new HtmlSaveOptions
              {
                  FontFaceTypes = FontFaceType.Ttf,
                  CssSavingCallback = savingCallbacks,
                  FontSavingCallback = savingCallbacks,
                  ImageSavingCallback = savingCallbacks
              };

if (!Directory.Exists(savingCallbacks.RootFolder))
{
    Directory.CreateDirectory(savingCallbacks.RootFolder);
}

string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

using (var stream = File.Create(Path.Combine(savingCallbacks.RootFolder, "document.html")))
{
    document.Save(stream, options);
}

using (var writer = new StreamWriter(savingCallbacks.CssStream))
{
    writer.WriteLine();
    writer.WriteLine("/* This line is appended to stream manually by user */");
}</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.HtmlSaveOptions.ImageSavingCallback">
      <summary>
            Gets or sets the callback that is called to create resource to store image.
            </summary>
      <example>Shows how to save a document in html format with storing all resources(css/fonts/images) by using user-defined callbacks.<code>
// The code below creates 'documentFolder' folder containing document.html, 'css' folder with 'style.css' file, 'images' folder with images and 'fonts' folder with fonts.
// 'style.css' file will contain at the end the following string "/* This line is appended to stream manually by user */"
var savingCallbacks = new UserSavingCallbacks()
                          {
                              RootFolder = "documentFolder",
                              CssFolder = "css",
                              KeepCssStreamOpened = true,
                              ImagesFolder = "images",
                              FontsFolder = "fonts"
                          };
var options = new HtmlSaveOptions
              {
                  FontFaceTypes = FontFaceType.Ttf,
                  CssSavingCallback = savingCallbacks,
                  FontSavingCallback = savingCallbacks,
                  ImageSavingCallback = savingCallbacks
              };

if (!Directory.Exists(savingCallbacks.RootFolder))
{
    Directory.CreateDirectory(savingCallbacks.RootFolder);
}

string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
var document = new Document(Path.Combine(dataDir, "Aspose.one"));

using (var stream = File.Create(Path.Combine(savingCallbacks.RootFolder, "document.html")))
{
    document.Save(stream, options);
}

using (var writer = new StreamWriter(savingCallbacks.CssStream))
{
    writer.WriteLine();
    writer.WriteLine("/* This line is appended to stream manually by user */");
}</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.HtmlSaveOptions.PageSavingCallback">
      <summary>
            Gets or sets the callback that is called to create resource to store page.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.ImageBinarizationOptions">
      <summary>
            Options for image's binarization.
            </summary>
      <example>Shows how to save a document as binary image using Otsu's method.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingOtsuMethod_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                        {
                            ColorMode = ColorMode.BlackAndWhite,
                            BinarizationOptions = new ImageBinarizationOptions()
                                                  {
                                                      BinarizationMethod = BinarizationMethod.Otsu,
                                                  }
                        });</code></example>
      <example>Shows how to save a document as binary image using fixed threshold.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingFixedThreshold_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.BlackAndWhite,
                              BinarizationOptions = new ImageBinarizationOptions()
                                                        {
                                                            BinarizationMethod = BinarizationMethod.FixedThreshold,
                                                            BinarizationThreshold = 123
                                                        }
                          });</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.ImageBinarizationOptions.BinarizationThreshold">
      <summary>
            Gets or sets threshold value for fixed threshold binarization method.
            The default value is 128.
            </summary>
      <example>Shows how to save a document as binary image using fixed threshold.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingFixedThreshold_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.BlackAndWhite,
                              BinarizationOptions = new ImageBinarizationOptions()
                                                        {
                                                            BinarizationMethod = BinarizationMethod.FixedThreshold,
                                                            BinarizationThreshold = 123
                                                        }
                          });</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.ImageBinarizationOptions.BinarizationMethod">
      <summary>
            Gets or sets the binarization method.
            The default value is <see cref="F:Aspose.Note.Saving.BinarizationMethod.FixedThreshold" />.
            </summary>
      <example>Shows how to save a document as binary image using Otsu's method.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingOtsuMethod_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                        {
                            ColorMode = ColorMode.BlackAndWhite,
                            BinarizationOptions = new ImageBinarizationOptions()
                                                  {
                                                      BinarizationMethod = BinarizationMethod.Otsu,
                                                  }
                        });</code></example>
      <example>Shows how to save a document as binary image using fixed threshold.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingFixedThreshold_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.BlackAndWhite,
                              BinarizationOptions = new ImageBinarizationOptions()
                                                        {
                                                            BinarizationMethod = BinarizationMethod.FixedThreshold,
                                                            BinarizationThreshold = 123
                                                        }
                          });</code></example>
    </member>
    <member name="T:Aspose.Note.Saving.ImageSaveOptions">
      <summary>
            Allows to specify additional options when rendering document pages to images.
            </summary>
      <example>Shows how to save a document as image in Jpeg format using SaveFormat.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToJpegImageUsingSaveFormat_out.jpg";

// Save the document.
oneFile.Save(dataDir, SaveFormat.Jpeg);</code></example>
      <example>Shows how to set a image quality when saving document as image in JPEG format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SetOutputImageResolution_out.jpg";

// Save the document.
doc.Save(dataDir, new ImageSaveOptions(SaveFormat.Jpeg) { Quality = 100 });</code></example>
      <example>Shows how to save a document as image in Bmp format using ImageSaveOptions.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBmpImageUsingImageSaveOptions_out.bmp";

// Save the document.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Bmp));</code></example>
      <example>Shows how to set a image resolution when saving document as image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SetOutputImageResolution_out.jpg";

// Save the document.
doc.Save(dataDir, new ImageSaveOptions(SaveFormat.Jpeg) { Resolution = 220 });</code></example>
      <example>Shows how to save a document as grayscale image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveAsGrayscaleImage_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.GrayScale
                          });</code></example>
      <example>Shows how to save a document as image in Tiff format using PackBits compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingPackBitsCompression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          TiffCompression = TiffCompression.PackBits
                      });</code></example>
      <example>Shows how to save notebook as image with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

var notebookSaveOptions = new NotebookImageSaveOptions(SaveFormat.Png);

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.Resolution = 400;

dataDir = dataDir + "ConvertToImageWithOptions_out.png";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
      <example>Shows how to save a document as image in Tiff format using Jpeg compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingJpegCompression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          TiffCompression = TiffCompression.Jpeg,
                          Quality = 93
                      });</code></example>
      <example>Shows how to save flattened notebook as image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch öffnen.onetoc2");

var notebookSaveOptions = new NotebookImageSaveOptions(SaveFormat.Png);

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.Resolution = 400;
notebookSaveOptions.Flatten = true;

dataDir = dataDir + "ConvertToImageAsFlattenedNotebook_out.png";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
      <example>Shows how to save a document as image in Tiff format using CCITT Group 3 fax compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingCcitt3Compression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          ColorMode = ColorMode.BlackAndWhite,
                          TiffCompression = TiffCompression.Ccitt3
                      });</code></example>
      <example>Shows how to save a document in png format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Initialize ImageSaveOptions object 
ImageSaveOptions opts = new ImageSaveOptions(SaveFormat.Png)
                            {
                                // Set page index
                                PageIndex = 1
                            };

dataDir = dataDir + "ConvertSpecificPageToImage_out.png";

// Save the document as PNG.
oneFile.Save(dataDir, opts);</code></example>
      <example>Shows how to save a document as binary image using Otsu's method.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingOtsuMethod_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                        {
                            ColorMode = ColorMode.BlackAndWhite,
                            BinarizationOptions = new ImageBinarizationOptions()
                                                  {
                                                      BinarizationMethod = BinarizationMethod.Otsu,
                                                  }
                        });</code></example>
      <example>Shows how to save a document as binary image using fixed threshold.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingFixedThreshold_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.BlackAndWhite,
                              BinarizationOptions = new ImageBinarizationOptions()
                                                        {
                                                            BinarizationMethod = BinarizationMethod.FixedThreshold,
                                                            BinarizationThreshold = 123
                                                        }
                          });</code></example>
    </member>
    <member name="M:Aspose.Note.Saving.ImageSaveOptions.#ctor(Aspose.Note.SaveFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Saving.ImageSaveOptions" /> class.
            </summary>
      <param name="format">
            The format in which the document is saved.
            </param>
    </member>
    <member name="P:Aspose.Note.Saving.ImageSaveOptions.Resolution">
      <summary>
            Gets or sets the resolution for the generated images, in dots per inch.
            </summary>
      <remarks>
            The default value is 96.
            </remarks>
      <example>Shows how to set a image resolution when saving document as image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SetOutputImageResolution_out.jpg";

// Save the document.
doc.Save(dataDir, new ImageSaveOptions(SaveFormat.Jpeg) { Resolution = 220 });</code></example>
      <example>Shows how to save notebook as image with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

var notebookSaveOptions = new NotebookImageSaveOptions(SaveFormat.Png);

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.Resolution = 400;

dataDir = dataDir + "ConvertToImageWithOptions_out.png";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
      <example>Shows how to save flattened notebook as image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch öffnen.onetoc2");

var notebookSaveOptions = new NotebookImageSaveOptions(SaveFormat.Png);

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.Resolution = 400;
notebookSaveOptions.Flatten = true;

dataDir = dataDir + "ConvertToImageAsFlattenedNotebook_out.png";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.ImageSaveOptions.Quality">
      <summary>
            Gets or sets a value determining the quality of saved image.
            This value is passed to codec as System.Drawing.Imaging.Encoder.Quality parameter.
            </summary>
      <remarks>
            The range of useful values for the quality category is from 0 to 100.
            The lower the number specified, the higher the compression and therefore the lower the quality of the image.
            Zero would give you the lowest quality image and 100 the highest.
            The default value is 90.
            </remarks>
      <example>Shows how to set a image quality when saving document as image in JPEG format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SetOutputImageResolution_out.jpg";

// Save the document.
doc.Save(dataDir, new ImageSaveOptions(SaveFormat.Jpeg) { Quality = 100 });</code></example>
      <example>Shows how to save a document as image in Tiff format using Jpeg compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingJpegCompression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          TiffCompression = TiffCompression.Jpeg,
                          Quality = 93
                      });</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.ImageSaveOptions.ColorMode">
      <summary>
            Gets or sets <see cref="P:Aspose.Note.Saving.ImageSaveOptions.ColorMode" /> for the output image.
            </summary>
      <example>Shows how to save a document as grayscale image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveAsGrayscaleImage_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.GrayScale
                          });</code></example>
      <example>Shows how to save a document as image in Tiff format using CCITT Group 3 fax compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingCcitt3Compression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          ColorMode = ColorMode.BlackAndWhite,
                          TiffCompression = TiffCompression.Ccitt3
                      });</code></example>
      <example>Shows how to save a document as binary image using Otsu's method.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingOtsuMethod_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                        {
                            ColorMode = ColorMode.BlackAndWhite,
                            BinarizationOptions = new ImageBinarizationOptions()
                                                  {
                                                      BinarizationMethod = BinarizationMethod.Otsu,
                                                  }
                        });</code></example>
      <example>Shows how to save a document as binary image using fixed threshold.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingFixedThreshold_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.BlackAndWhite,
                              BinarizationOptions = new ImageBinarizationOptions()
                                                        {
                                                            BinarizationMethod = BinarizationMethod.FixedThreshold,
                                                            BinarizationThreshold = 123
                                                        }
                          });</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.ImageSaveOptions.BinarizationOptions">
      <summary>
            Gets or sets options for image's binarization.
            </summary>
      <example>Shows how to save a document as binary image using Otsu's method.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingOtsuMethod_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                        {
                            ColorMode = ColorMode.BlackAndWhite,
                            BinarizationOptions = new ImageBinarizationOptions()
                                                  {
                                                      BinarizationMethod = BinarizationMethod.Otsu,
                                                  }
                        });</code></example>
      <example>Shows how to save a document as binary image using fixed threshold.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingFixedThreshold_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.BlackAndWhite,
                              BinarizationOptions = new ImageBinarizationOptions()
                                                        {
                                                            BinarizationMethod = BinarizationMethod.FixedThreshold,
                                                            BinarizationThreshold = 123
                                                        }
                          });</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.ImageSaveOptions.TiffCompression">
      <summary>
            Gets or sets the type of compression to use when saving generated images to the TIFF format.
            </summary>
      <example>Shows how to save a document as image in Tiff format using PackBits compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingPackBitsCompression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          TiffCompression = TiffCompression.PackBits
                      });</code></example>
      <example>Shows how to save a document as image in Tiff format using Jpeg compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingJpegCompression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          TiffCompression = TiffCompression.Jpeg,
                          Quality = 93
                      });</code></example>
      <example>Shows how to save a document as image in Tiff format using CCITT Group 3 fax compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingCcitt3Compression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          ColorMode = ColorMode.BlackAndWhite,
                          TiffCompression = TiffCompression.Ccitt3
                      });</code></example>
    </member>
    <member name="T:Aspose.Note.Saving.NotebookHtmlSaveOptions">
      <summary>
            Allows to specify additional options when saving notebook to HTML format.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.NotebookImageSaveOptions">
      <summary>
            Allows to specify additional options when rendering notebook pages to images.
            </summary>
      <example>Shows how to save flattened notebook in pdf format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

// Save the Notebook
dataDir = dataDir + "ConvertToPDFAsFlattened_out.pdf";
notebook.Save(
    dataDir,
    new NotebookPdfSaveOptions
    {
        Flatten = true
    });</code></example>
      <example>Shows how to save notebook as image with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

var notebookSaveOptions = new NotebookImageSaveOptions(SaveFormat.Png);

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.Resolution = 400;

dataDir = dataDir + "ConvertToImageWithOptions_out.png";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
      <example>Shows how to save flattened notebook as image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch öffnen.onetoc2");

var notebookSaveOptions = new NotebookImageSaveOptions(SaveFormat.Png);

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.Resolution = 400;
notebookSaveOptions.Flatten = true;

dataDir = dataDir + "ConvertToImageAsFlattenedNotebook_out.png";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
    </member>
    <member name="M:Aspose.Note.Saving.NotebookImageSaveOptions.#ctor(Aspose.Note.SaveFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Saving.NotebookImageSaveOptions" /> class.
            </summary>
      <param name="format">
            The format in which the notebook is saved.
            </param>
    </member>
    <member name="T:Aspose.Note.Saving.NotebookOneSaveOptions">
      <summary>
            Allows to specify additional options when saving notebook to OneNote format.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.NotebookPdfSaveOptions">
      <summary>
            Allows to specify additional options when rendering notebook pages to PDF.
            </summary>
      <example>Shows how to save notebook in pdf format with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

var notebookSaveOptions = new NotebookPdfSaveOptions();

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm();

dataDir = dataDir + "ConvertToPDF_out.pdf";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
    </member>
    <member name="T:Aspose.Note.Saving.NotebookSaveOptions">
      <summary>
            An abstract base class which represents notebook saving options for a particular format.
            </summary>
      <example>Shows how to save flattened notebook in pdf format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

// Save the Notebook
dataDir = dataDir + "ConvertToPDFAsFlattened_out.pdf";
notebook.Save(
    dataDir,
    new NotebookPdfSaveOptions
    {
        Flatten = true
    });</code></example>
      <example>Shows how to save notebook in pdf format with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

var notebookSaveOptions = new NotebookPdfSaveOptions();

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm();

dataDir = dataDir + "ConvertToPDF_out.pdf";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
      <example>Shows how to save flattened notebook as image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch öffnen.onetoc2");

var notebookSaveOptions = new NotebookImageSaveOptions(SaveFormat.Png);

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.Resolution = 400;
notebookSaveOptions.Flatten = true;

dataDir = dataDir + "ConvertToImageAsFlattenedNotebook_out.png";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.NotebookSaveOptions.SaveFormat">
      <summary>
            Gets the format in which the notebook is saved.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.NotebookSaveOptions.Flatten">
      <summary>
            Gets or sets a value indicating whether the notebook children hierarchy is saved flattened.
            </summary>
      <example>Shows how to save flattened notebook in pdf format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

// Save the Notebook
dataDir = dataDir + "ConvertToPDFAsFlattened_out.pdf";
notebook.Save(
    dataDir,
    new NotebookPdfSaveOptions
    {
        Flatten = true
    });</code></example>
      <example>Shows how to save flattened notebook as image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch öffnen.onetoc2");

var notebookSaveOptions = new NotebookImageSaveOptions(SaveFormat.Png);

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.Resolution = 400;
notebookSaveOptions.Flatten = true;

dataDir = dataDir + "ConvertToImageAsFlattenedNotebook_out.png";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.NotebookSaveOptions.DeferredSaving">
      <summary>
            Gets or sets a value indicating whether children documents
            should be saved explicitly.
            </summary>
      <remarks>
            Default value is <c>false</c>, so child documents will be saved implicitly.
            Value <c>true</c> is indicating that user should save each notebook's child node explicitly.
            If notebook is saving to stream, the value is always <c>true</c> despite was explicitly set by user to <c>false</c>.
            </remarks>
    </member>
    <member name="M:Aspose.Note.Saving.NotebookSaveOptions.GetDocumentSaveOptions">
      <summary>
            Gets the save options for all notebook's child documents.
            </summary>
      <returns>
            The <see cref="T:Aspose.Note.Saving.SaveOptions" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.Saving.NotebookSaveOptions`1">
      <summary>
            An abstract base class which represents notebook saving options for a particular format
            and provides common saving options for all document child nodes.
            </summary>
      <typeparam name="TDocumentSaveOptions">
            The save options for all notebook's child documents.
            </typeparam>
      <example>Shows how to save notebook in pdf format with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

var notebookSaveOptions = new NotebookPdfSaveOptions();

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm();

dataDir = dataDir + "ConvertToPDF_out.pdf";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.NotebookSaveOptions`1.DocumentSaveOptions">
      <summary>
            Gets or sets the save options for all notebook's child documents.
            </summary>
      <example>Shows how to save notebook in pdf format with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

var notebookSaveOptions = new NotebookPdfSaveOptions();

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm();

dataDir = dataDir + "ConvertToPDF_out.pdf";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.NotebookSaveOptions`1.SaveFormat">
      <summary>
            Gets the format in which the notebook is saved.
            </summary>
    </member>
    <member name="M:Aspose.Note.Saving.NotebookSaveOptions`1.GetDocumentSaveOptions">
      <summary>
            Gets the save options for all notebook's child documents.
            </summary>
      <returns>
            The <see cref="T:Aspose.Note.Saving.SaveOptions" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.Saving.OneSaveOptions">
      <summary>
            Allows to specify additional options when saving document to OneNote format.
            </summary>
      <example>Shows how to save document with encryption.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

Document document = new Document();
document.Save(dataDir + "CreatingPasswordProtectedDoc_out.one", new OneSaveOptions() { DocumentPassword = "pass" });</code></example>
      <example>Shows how to save a document using OneSaveOptions.<code>
string inputFile = "Sample1.one";
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string outputFile = "SaveDocToOneNoteFormatUsingOneSaveOptions_out.one";

Document document = new Document(dataDir + inputFile);

document.Save(dataDir + outputFile, new OneSaveOptions());</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.OneSaveOptions.DocumentPassword">
      <summary>
            Gets or sets a password to encrypt the document content.
            </summary>
      <example>Shows how to save document with encryption.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

Document document = new Document();
document.Save(dataDir + "CreatingPasswordProtectedDoc_out.one", new OneSaveOptions() { DocumentPassword = "pass" });</code></example>
    </member>
    <member name="T:Aspose.Note.Saving.PdfSaveOptions">
      <summary>
            Allows to specify additional options when rendering document pages to PDF.
            </summary>
      <example>Shows how to save a document in Pdf format with Letter page layout.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "OneNote.one");

var dst = Path.Combine(dataDir, "SaveToPdfUsingLetterPageSettings.pdf");

// Save the document.
oneFile.Save(dst, new PdfSaveOptions() { PageSettings = PageSettings.Letter });</code></example>
      <example>Shows how to save a document in Pdf format with A4 page layout without height limit.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "OneNote.one");

var dst = Path.Combine(dataDir, "SaveToPdfUsingA4PageSettingsWithoutHeightLimit.pdf");

// Save the document.
oneFile.Save(dst, new PdfSaveOptions() { PageSettings = PageSettings.A4NoHeightLimit });</code></example>
      <example>Shows how to save notebook in pdf format with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

var notebookSaveOptions = new NotebookPdfSaveOptions();

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm();

dataDir = dataDir + "ConvertToPDF_out.pdf";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
      <example>When long OneNote pages are saved in pdf format they are split across pages. The sample shows how to configure the splitting logic of objects located on page's breaks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

var pdfSaveOptions = new PdfSaveOptions();

pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(100);
// or
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(400);

dataDir = dataDir + "PageSplittUsingKeepPartAndCloneSolidObjectToNextPageAlgorithm_out.pdf";
doc.Save(dataDir);</code></example>
      <example>Shows how to save a document in pdf format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Initialize PdfSaveOptions object
PdfSaveOptions opts = new PdfSaveOptions
                          {
                              // Set page index of first page to be saved
                              PageIndex = 0,

                              // Set page count
                              PageCount = 1,
                          };

// Save the document as PDF
dataDir = dataDir + "SaveRangeOfPagesAsPDF_out.pdf";
oneFile.Save(dataDir, opts);</code></example>
      <example>Shows how to save a document in pdf format using specific settings.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

// Initialize PdfSaveOptions object
PdfSaveOptions opts = new PdfSaveOptions
                          {
                              // Use Jpeg compression
                              ImageCompression = Saving.Pdf.PdfImageCompression.Jpeg,

                              // Quality for JPEG compression
                              JpegQuality = 90
                          };

dataDir = dataDir + "Document.SaveWithOptions_out.pdf";
doc.Save(dataDir, opts);</code></example>
      <example>When long OneNote pages are saved in pdf format they are split across pages. The example shows how to configure the splitting logic of objects located on page's breaks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");
var pdfSaveOptions = new PdfSaveOptions();
pdfSaveOptions.PageSplittingAlgorithm = new AlwaysSplitObjectsAlgorithm();
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm();
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm();

float heightLimitOfClonedPart = 500;
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(heightLimitOfClonedPart);
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(heightLimitOfClonedPart);

pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(100);
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(400);

dataDir = dataDir + "UsingKeepSOlidObjectsAlgorithm_out.pdf";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.PdfSaveOptions.ImageCompression">
      <summary>
            Gets or sets the type of compression applied to images in the PDF file.
            </summary>
      <example>Shows how to save a document in pdf format using specific settings.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

// Initialize PdfSaveOptions object
PdfSaveOptions opts = new PdfSaveOptions
                          {
                              // Use Jpeg compression
                              ImageCompression = Saving.Pdf.PdfImageCompression.Jpeg,

                              // Quality for JPEG compression
                              JpegQuality = 90
                          };

dataDir = dataDir + "Document.SaveWithOptions_out.pdf";
doc.Save(dataDir, opts);</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.PdfSaveOptions.JpegQuality">
      <summary>
            Gets or sets a value determining the quality of the JPEG images inside PDF document.
            The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100 means best quality but minimum compression.
            </summary>
      <remarks>
            The default value is 90.
            </remarks>
      <example>Shows how to save a document in pdf format using specific settings.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

// Initialize PdfSaveOptions object
PdfSaveOptions opts = new PdfSaveOptions
                          {
                              // Use Jpeg compression
                              ImageCompression = Saving.Pdf.PdfImageCompression.Jpeg,

                              // Quality for JPEG compression
                              JpegQuality = 90
                          };

dataDir = dataDir + "Document.SaveWithOptions_out.pdf";
doc.Save(dataDir, opts);</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.PdfSaveOptions.PageSplittingAlgorithm">
      <summary>
            Gets or sets algorithm used for page splitting.
            </summary>
      <value>
            The <see cref="P:Aspose.Note.Saving.PdfSaveOptions.PageSplittingAlgorithm" />.
            </value>
      <example>Shows how to save notebook in pdf format with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

var notebookSaveOptions = new NotebookPdfSaveOptions();

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm();

dataDir = dataDir + "ConvertToPDF_out.pdf";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
      <example>When long OneNote pages are saved in pdf format they are split across pages. The sample shows how to configure the splitting logic of objects located on page's breaks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

var pdfSaveOptions = new PdfSaveOptions();

pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(100);
// or
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(400);

dataDir = dataDir + "PageSplittUsingKeepPartAndCloneSolidObjectToNextPageAlgorithm_out.pdf";
doc.Save(dataDir);</code></example>
      <example>When long OneNote pages are saved in pdf format they are split across pages. The example shows how to configure the splitting logic of objects located on page's breaks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");
var pdfSaveOptions = new PdfSaveOptions();
pdfSaveOptions.PageSplittingAlgorithm = new AlwaysSplitObjectsAlgorithm();
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm();
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm();

float heightLimitOfClonedPart = 500;
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(heightLimitOfClonedPart);
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(heightLimitOfClonedPart);

pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(100);
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(400);

dataDir = dataDir + "UsingKeepSOlidObjectsAlgorithm_out.pdf";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.PdfSaveOptions.PageSettings">
      <summary>
            Gets or sets the page settings for each page in document.
            By default depends on CurrentUICulture, *US cultures have letter setting, other have A4 settings.
            </summary>
      <example>Shows how to save a document in Pdf format with Letter page layout.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "OneNote.one");

var dst = Path.Combine(dataDir, "SaveToPdfUsingLetterPageSettings.pdf");

// Save the document.
oneFile.Save(dst, new PdfSaveOptions() { PageSettings = PageSettings.Letter });</code></example>
      <example>Shows how to save a document in Pdf format with A4 page layout without height limit.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "OneNote.one");

var dst = Path.Combine(dataDir, "SaveToPdfUsingA4PageSettingsWithoutHeightLimit.pdf");

// Save the document.
oneFile.Save(dst, new PdfSaveOptions() { PageSettings = PageSettings.A4NoHeightLimit });</code></example>
    </member>
    <member name="T:Aspose.Note.Saving.PrintOptions">
      <summary>
            Options used to print a document.
            </summary>
      <example>Shows how to sent document to a printer using standard Windows dialog with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

var document = new Aspose.Note.Document(dataDir + "Aspose.one");

var printerSettings = new PrinterSettings() { FromPage = 0, ToPage = 10 };
printerSettings.DefaultPageSettings.Landscape = true;
printerSettings.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50, 50, 150, 50);

document.Print(new PrintOptions()
               {
                   PrinterSettings = printerSettings,
                   Resolution = 1200,
                   PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(),
                   DocumentName = "Test.one"
               });</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.PrintOptions.PrinterSettings">
      <summary>
            Gets or sets the printer settings.
            </summary>
      <example>Shows how to sent document to a printer using standard Windows dialog with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

var document = new Aspose.Note.Document(dataDir + "Aspose.one");

var printerSettings = new PrinterSettings() { FromPage = 0, ToPage = 10 };
printerSettings.DefaultPageSettings.Landscape = true;
printerSettings.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50, 50, 150, 50);

document.Print(new PrintOptions()
               {
                   PrinterSettings = printerSettings,
                   Resolution = 1200,
                   PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(),
                   DocumentName = "Test.one"
               });</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.PrintOptions.DocumentName">
      <summary>
            Gets or sets the document name to display (for example, in a print status dialog box or printer queue) while printing the document.
            </summary>
      <example>Shows how to sent document to a printer using standard Windows dialog with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

var document = new Aspose.Note.Document(dataDir + "Aspose.one");

var printerSettings = new PrinterSettings() { FromPage = 0, ToPage = 10 };
printerSettings.DefaultPageSettings.Landscape = true;
printerSettings.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50, 50, 150, 50);

document.Print(new PrintOptions()
               {
                   PrinterSettings = printerSettings,
                   Resolution = 1200,
                   PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(),
                   DocumentName = "Test.one"
               });</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.PrintOptions.Resolution">
      <summary>
            Gets or sets the resolution for the generated images, in dots per inch.
            </summary>
      <remarks>
            The default value is 96.
            </remarks>
      <example>Shows how to sent document to a printer using standard Windows dialog with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

var document = new Aspose.Note.Document(dataDir + "Aspose.one");

var printerSettings = new PrinterSettings() { FromPage = 0, ToPage = 10 };
printerSettings.DefaultPageSettings.Landscape = true;
printerSettings.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50, 50, 150, 50);

document.Print(new PrintOptions()
               {
                   PrinterSettings = printerSettings,
                   Resolution = 1200,
                   PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(),
                   DocumentName = "Test.one"
               });</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.PrintOptions.PageSplittingAlgorithm">
      <summary>
            Gets or sets algorithm used for page splitting.
            </summary>
      <value>
            The <see cref="P:Aspose.Note.Saving.PrintOptions.PageSplittingAlgorithm" />.
            </value>
      <example>Shows how to sent document to a printer using standard Windows dialog with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

var document = new Aspose.Note.Document(dataDir + "Aspose.one");

var printerSettings = new PrinterSettings() { FromPage = 0, ToPage = 10 };
printerSettings.DefaultPageSettings.Landscape = true;
printerSettings.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50, 50, 150, 50);

document.Print(new PrintOptions()
               {
                   PrinterSettings = printerSettings,
                   Resolution = 1200,
                   PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(),
                   DocumentName = "Test.one"
               });</code></example>
    </member>
    <member name="T:Aspose.Note.Saving.SaveOptions">
      <summary>
            An abstract base class which represents document saving options for a particular format.
            </summary>
    </member>
    <member name="M:Aspose.Note.Saving.SaveOptions.#ctor(Aspose.Note.SaveFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Saving.SaveOptions" /> class.
            </summary>
      <param name="saveFormat">
            The save Format.
            </param>
    </member>
    <member name="P:Aspose.Note.Saving.SaveOptions.SaveFormat">
      <summary>
            Gets the format in which the document is saved.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.SaveOptions.FontsSubsystem">
      <summary>
            Gets or sets font's settings to be used while saving
            </summary>
      <example>Shows how to save a document in pdf format using specified default font.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "missing-font.one"));

// Save the document as PDF
dataDir = dataDir + "SaveUsingDocumentFontsSubsystemWithDefaultFontName_out.pdf";
oneFile.Save(dataDir, new PdfSaveOptions() 
                      {
                          FontsSubsystem = DocumentFontsSubsystem.UsingDefaultFont("Times New Roman")
                      });</code></example>
      <example>Shows how to save a document in pdf format using default font from a file.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

string fontFile = Path.Combine(dataDir, "geo_1.ttf");

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "missing-font.one"));

// Save the document as PDF
dataDir = dataDir + "SaveUsingDocumentFontsSubsystemWithDefaultFontFromFile_out.pdf";
oneFile.Save(dataDir, new PdfSaveOptions()
                          {
                              FontsSubsystem = DocumentFontsSubsystem.UsingDefaultFontFromFile(fontFile)
                          });</code></example>
      <example>Shows how to save a document in pdf format using default font from a stream.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

string fontFile = Path.Combine(dataDir, "geo_1.ttf");

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "missing-font.one"));

// Save the document as PDF
dataDir = dataDir + "SaveUsingDocumentFontsSubsystemWithDefaultFontFromStream_out.pdf";

using (var stream = File.Open(fontFile, FileMode.Open, FileAccess.Read, FileShare.Read))
{
    oneFile.Save(dataDir, new PdfSaveOptions()
                              {
                                  FontsSubsystem = DocumentFontsSubsystem.UsingDefaultFontFromStream(stream)
                              });
}</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.SaveOptions.PageIndex">
      <summary>
            Gets or sets the index of the first page to save. By default is 0.
            </summary>
      <example>Shows how to save a document in png format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Initialize ImageSaveOptions object 
ImageSaveOptions opts = new ImageSaveOptions(SaveFormat.Png)
                            {
                                // Set page index
                                PageIndex = 1
                            };

dataDir = dataDir + "ConvertSpecificPageToImage_out.png";

// Save the document as PNG.
oneFile.Save(dataDir, opts);</code></example>
      <example>Shows how to save a document in pdf format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Initialize PdfSaveOptions object
PdfSaveOptions opts = new PdfSaveOptions
                          {
                              // Set page index of first page to be saved
                              PageIndex = 0,

                              // Set page count
                              PageCount = 1,
                          };

// Save the document as PDF
dataDir = dataDir + "SaveRangeOfPagesAsPDF_out.pdf";
oneFile.Save(dataDir, opts);</code></example>
      <example>Shows how to save a document in pdf format using specific settings.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

// Initialize PdfSaveOptions object
PdfSaveOptions opts = new PdfSaveOptions
                          {
                              // Use Jpeg compression
                              ImageCompression = Saving.Pdf.PdfImageCompression.Jpeg,

                              // Quality for JPEG compression
                              JpegQuality = 90
                          };

dataDir = dataDir + "Document.SaveWithOptions_out.pdf";
doc.Save(dataDir, opts);</code></example>
      <example>Shows how to create a document and save in html format specified range of pages.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();

Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
             {
                 TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
             };

// Save into HTML format
dataDir = dataDir + "CreateAndSavePageRange_out.html";
doc.Save(dataDir, new HtmlSaveOptions
                  {
                      PageCount = 1,
                      PageIndex = 0
                  });</code></example>
      <example>Shows how to create a document with formatted rich text.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Page page = new Page();

// Initialize Title class object
Title title = new Title();

// Initialize TextStyle class object and set formatting properties
ParagraphStyle defaultTextStyle = new ParagraphStyle
                                      {
                                          FontColor = Color.Black,
                                          FontName = "Arial",
                                          FontSize = 10
                                      };

RichText titleText = new RichText() { ParagraphStyle = defaultTextStyle }.Append("Title!");
Outline outline = new Outline()
                      {
                          VerticalOffset = 100,
                          HorizontalOffset = 100
                      };
OutlineElement outlineElem = new OutlineElement();

TextStyle textStyleForHelloWord = new TextStyle
                                      {
                                          FontColor = Color.Red,
                                          FontName = "Arial",
                                          FontSize = 10,
                                      };

TextStyle textStyleForOneNoteWord = new TextStyle
                                        {
                                            FontColor = Color.Green,
                                            FontName = "Calibri",
                                            FontSize = 10,
                                            IsItalic = true,
                                        };

TextStyle textStyleForTextWord = new TextStyle
                                     {
                                         FontColor = Color.Blue,
                                         FontName = "Arial",
                                         FontSize = 15,
                                         IsBold = true,
                                         IsItalic = true,
                                     };

RichText text = new RichText() { ParagraphStyle = defaultTextStyle }
                    .Append("Hello", textStyleForHelloWord)
                    .Append(" OneNote", textStyleForOneNoteWord)
                    .Append(" text", textStyleForTextWord)
                    .Append("!", TextStyle.Default);

title.TitleText = titleText;

// Set page title
page.Title = title;

// Add RichText node
outlineElem.AppendChildLast(text);

// Add OutlineElement node
outline.AppendChildLast(outlineElem);

// Add Outline node
page.AppendChildLast(outline);

// Add Page node
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "CreateDocWithFormattedRichText_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.SaveOptions.PageCount">
      <summary>
            Gets or sets the number of pages to save. By default is <see cref="F:System.Int32.MaxValue" />
            which means all pages of the document will be rendered.
            </summary>
      <example>Shows how to save a document in pdf format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Initialize PdfSaveOptions object
PdfSaveOptions opts = new PdfSaveOptions
                          {
                              // Set page index of first page to be saved
                              PageIndex = 0,

                              // Set page count
                              PageCount = 1,
                          };

// Save the document as PDF
dataDir = dataDir + "SaveRangeOfPagesAsPDF_out.pdf";
oneFile.Save(dataDir, opts);</code></example>
      <example>Shows how to save a document in pdf format using specific settings.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

// Initialize PdfSaveOptions object
PdfSaveOptions opts = new PdfSaveOptions
                          {
                              // Use Jpeg compression
                              ImageCompression = Saving.Pdf.PdfImageCompression.Jpeg,

                              // Quality for JPEG compression
                              JpegQuality = 90
                          };

dataDir = dataDir + "Document.SaveWithOptions_out.pdf";
doc.Save(dataDir, opts);</code></example>
      <example>Shows how to create a document and save in html format specified range of pages.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();

Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
             {
                 TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
             };

// Save into HTML format
dataDir = dataDir + "CreateAndSavePageRange_out.html";
doc.Save(dataDir, new HtmlSaveOptions
                  {
                      PageCount = 1,
                      PageIndex = 0
                  });</code></example>
    </member>
    <member name="T:Aspose.Note.Saving.TiffCompression">
      <summary>
            Specifies what type of compression to use when saving a document to the TIFF format.
            </summary>
      <example>Shows how to save a document as image in Tiff format using PackBits compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingPackBitsCompression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          TiffCompression = TiffCompression.PackBits
                      });</code></example>
      <example>Shows how to save a document as image in Tiff format using Jpeg compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingJpegCompression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          TiffCompression = TiffCompression.Jpeg,
                          Quality = 93
                      });</code></example>
      <example>Shows how to save a document as image in Tiff format using CCITT Group 3 fax compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingCcitt3Compression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          ColorMode = ColorMode.BlackAndWhite,
                          TiffCompression = TiffCompression.Ccitt3
                      });</code></example>
    </member>
    <member name="F:Aspose.Note.Saving.TiffCompression.None">
      <summary>
            Specifies no compression.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.TiffCompression.Rle">
      <summary>
            Specifies RLE compression.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.TiffCompression.Ccitt3">
      <summary>
            Specifies CCITT Group 3 fax encoding.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.TiffCompression.Ccitt4">
      <summary>
            Specifies CCITT Group 4 fax encoding.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.TiffCompression.Lzw">
      <summary>
            Specifies LZW compression.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.TiffCompression.PackBits">
      <summary>
            Specifies Macintosh RLE compression.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.TiffCompression.Jpeg">
      <summary>
            Specifies JPEG DCT compression compression.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.Html.CssSavingArgs">
      <summary>
            Provides data for CssSaving event.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.Html.FontFaceType">
      <summary>
            Enumerates font face types
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.FontFaceType.NotSpecified">
      <summary>
            Font type is not spefied
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.FontFaceType.Ttf">
      <summary>
            The true type fot
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.FontFaceType.Eot">
      <summary>
            The eot font
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.FontFaceType.Woff">
      <summary>
            The woff font
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.Html.FontSavingArgs">
      <summary>
            Provides data for FontSaving event.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.Html.FontSavingArgs.FontFamilyName">
      <summary>
            Gets the family name of the font to be saved.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.Html.FontSavingArgs.IsBold">
      <summary>
            Gets a value indicating whether font under saving is bold.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.Html.FontSavingArgs.IsItalic">
      <summary>
            Gets a value indicating whether font under saving is italic.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.Html.HtmlImageType">
      <summary>
            Represents HTML image type.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.HtmlImageType.Jpeg">
      <summary>
            JPEG JFIF.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.HtmlImageType.Png">
      <summary>
            Portable Network Graphics.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.HtmlImageType.Bmp">
      <summary>
            Windows Bitmap.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.HtmlImageType.Gif">
      <summary>
            Gif image format
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.HtmlImageType.Tiff">
      <summary>
            Tiff image format
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.HtmlImageType.Svg">
      <summary>
            SVG image format
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.HtmlImageType.Svgz">
      <summary>
            Compressed SVG
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.HtmlImageType.Unknown">
      <summary>
            Unknown format
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.Html.ICssSavingCallback">
      <summary>
            Implement this interface if you want to control how Aspose.Note saves CSS (Cascading Style Sheet) when saving a document to HTML.
            </summary>
    </member>
    <member name="M:Aspose.Note.Saving.Html.ICssSavingCallback.CssSaving(Aspose.Note.Saving.Html.CssSavingArgs)">
      <summary>
            Called when Aspose.Note saves an CSS(Cascading Style Sheet).
            </summary>
      <param name="args">
            Saving parameters.
            </param>
    </member>
    <member name="T:Aspose.Note.Saving.Html.IFontSavingCallback">
      <summary>
            Implement this interface if you want to control how Aspose.Note saves fonts when saving a document to HTML.
            </summary>
    </member>
    <member name="M:Aspose.Note.Saving.Html.IFontSavingCallback.FontSaving(Aspose.Note.Saving.Html.FontSavingArgs)">
      <summary>
            Called when Aspose.Note saves a font.
            </summary>
      <param name="args">
            Saving parameters.
            </param>
    </member>
    <member name="T:Aspose.Note.Saving.Html.IImageSavingCallback">
      <summary>
            Implement this interface if you want to control how Aspose.Note saves images when saving a document to HTML.
            </summary>
    </member>
    <member name="M:Aspose.Note.Saving.Html.IImageSavingCallback.ImageSaving(Aspose.Note.Saving.Html.ImageSavingArgs)">
      <summary>
            Called when Aspose.Note saves an image.
            </summary>
      <param name="args">
            Saving parameters.
            </param>
    </member>
    <member name="T:Aspose.Note.Saving.Html.ImageSavingArgs">
      <summary>
            Provides data for ImageSaving event.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.Html.ImageSavingArgs.ImageType">
      <summary>
            Gets type of image to be saved.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.Html.IPageSavingCallback">
      <summary>
            Implement this interface if you want to control how Aspose.Note saves separate pages.
            </summary>
    </member>
    <member name="M:Aspose.Note.Saving.Html.IPageSavingCallback.PageSaving(Aspose.Note.Saving.Html.PageSavingArgs)">
      <summary>
            Called when Aspose.Note saves a separate page.
            </summary>
      <param name="args">
            Saving parameters.
            </param>
    </member>
    <member name="T:Aspose.Note.Saving.Html.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Note.Saving.Html" /> namespace contains classes which perform saving to HTML format.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.Html.PageSavingArgs">
      <summary>
            Provides data for PageSaving event.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.Html.PageSavingArgs.PageIndex">
      <summary>
            Current page index.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.Html.ResourceExportType">
      <summary>
            Enumerates ways a resource can be exported
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.ResourceExportType.NoExport">
      <summary>
            The resource is skipped
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.ResourceExportType.ExportAsStream">
      <summary>
            The resource is exported to a stream.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Html.ResourceExportType.ExportEmbedded">
      <summary>
            The resource exported as base64-encoded value into HTML page
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.Html.ResourceSavingArgs">
      <summary>
            Provides data for ResourceSaving event.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.Html.ResourceSavingArgs.Document">
      <summary>
            Gets the saving document.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.Html.ResourceSavingArgs.FileName">
      <summary>
            Gets the file name.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.Html.ResourceSavingArgs.Stream">
      <summary>
            Gets or sets the stream used to store the resource.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.Html.ResourceSavingArgs.KeepStreamOpen">
      <summary>
            Gets or sets a value indicating whether keep stream open.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.Html.ResourceSavingArgs.Uri">
      <summary>
            Gets or sets the uri to access stored resource.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.KeepPartAndCloneSolidObjectToNextPageAlgorithm">
      <summary>
            Adds object's top part to the bottom of the page and clones full object to the next page in case it doesn't fit in original page.
            </summary>
      <example>When long OneNote pages are saved in pdf format they are split across pages. The sample shows how to configure the splitting logic of objects located on page's breaks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

var pdfSaveOptions = new PdfSaveOptions();

pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(100);
// or
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(400);

dataDir = dataDir + "PageSplittUsingKeepPartAndCloneSolidObjectToNextPageAlgorithm_out.pdf";
doc.Save(dataDir);</code></example>
      <example>When long OneNote pages are saved in pdf format they are split across pages. The example shows how to configure the splitting logic of objects located on page's breaks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");
var pdfSaveOptions = new PdfSaveOptions();
pdfSaveOptions.PageSplittingAlgorithm = new AlwaysSplitObjectsAlgorithm();
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm();
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm();

float heightLimitOfClonedPart = 500;
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(heightLimitOfClonedPart);
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(heightLimitOfClonedPart);

pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(100);
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(400);

dataDir = dataDir + "UsingKeepSOlidObjectsAlgorithm_out.pdf";
doc.Save(dataDir);</code></example>
    </member>
    <member name="F:Aspose.Note.Saving.KeepPartAndCloneSolidObjectToNextPageAlgorithm.DefaultHeightLimitOfClonedPart">
      <summary>
            The default max size of cloned part.
            </summary>
    </member>
    <member name="M:Aspose.Note.Saving.KeepPartAndCloneSolidObjectToNextPageAlgorithm.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Saving.KeepPartAndCloneSolidObjectToNextPageAlgorithm" /> class, using default height limit of cloned part.
            </summary>
    </member>
    <member name="M:Aspose.Note.Saving.KeepPartAndCloneSolidObjectToNextPageAlgorithm.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Saving.KeepPartAndCloneSolidObjectToNextPageAlgorithm" /> class, using specific height limit of cloned part.
            </summary>
      <param name="heightLimitOfClonedPart">
            The max height of cloned part.
            </param>
    </member>
    <member name="P:Aspose.Note.Saving.KeepPartAndCloneSolidObjectToNextPageAlgorithm.HeightLimitOfClonedPart">
      <summary>
            Gets the height limit of cloned part.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.KeepSolidObjectsAlgorithm">
      <summary>
            Shifts full object to the next page in case it doesn't fit in original page.
            </summary>
      <example>Shows how to save notebook in pdf format with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_NoteBook();

// Load a OneNote Notebook
var notebook = new Notebook(dataDir + "Notizbuch �ffnen.onetoc2");

var notebookSaveOptions = new NotebookPdfSaveOptions();

var documentSaveOptions = notebookSaveOptions.DocumentSaveOptions;

documentSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm();

dataDir = dataDir + "ConvertToPDF_out.pdf";

// Save the Notebook
notebook.Save(dataDir, notebookSaveOptions);</code></example>
      <example>Shows how to sent document to a printer using standard Windows dialog with specified options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

var document = new Aspose.Note.Document(dataDir + "Aspose.one");

var printerSettings = new PrinterSettings() { FromPage = 0, ToPage = 10 };
printerSettings.DefaultPageSettings.Landscape = true;
printerSettings.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(50, 50, 150, 50);

document.Print(new PrintOptions()
               {
                   PrinterSettings = printerSettings,
                   Resolution = 1200,
                   PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(),
                   DocumentName = "Test.one"
               });</code></example>
      <example>When long OneNote pages are saved in pdf format they are split across pages. The example shows how to configure the splitting logic of objects located on page's breaks.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");
var pdfSaveOptions = new PdfSaveOptions();
pdfSaveOptions.PageSplittingAlgorithm = new AlwaysSplitObjectsAlgorithm();
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm();
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm();

float heightLimitOfClonedPart = 500;
pdfSaveOptions.PageSplittingAlgorithm = new KeepPartAndCloneSolidObjectToNextPageAlgorithm(heightLimitOfClonedPart);
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(heightLimitOfClonedPart);

pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(100);
// Or
pdfSaveOptions.PageSplittingAlgorithm = new KeepSolidObjectsAlgorithm(400);

dataDir = dataDir + "UsingKeepSOlidObjectsAlgorithm_out.pdf";
doc.Save(dataDir);</code></example>
    </member>
    <member name="F:Aspose.Note.Saving.KeepSolidObjectsAlgorithm.DefaultHeightLimitOfClonedPart">
      <summary>
            The default max size of cloned part.
            </summary>
    </member>
    <member name="M:Aspose.Note.Saving.KeepSolidObjectsAlgorithm.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Saving.KeepSolidObjectsAlgorithm" /> class using default height limit of cloned part.
            </summary>
    </member>
    <member name="M:Aspose.Note.Saving.KeepSolidObjectsAlgorithm.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Saving.KeepSolidObjectsAlgorithm" /> class using specific height limit of cloned part.
            </summary>
      <param name="heightLimitOfClonedPart">
            The max height of cloned part.
            </param>
    </member>
    <member name="P:Aspose.Note.Saving.KeepSolidObjectsAlgorithm.HeightLimitOfClonedPart">
      <summary>
            Gets the height limit of cloned part.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Note.Saving" /> namespace contains classes which perform saving to different formats.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.PageSettings">
      <summary>
            Represents the layout settings for a page.
            </summary>
      <example>Shows how to save a document in Pdf format with Letter page layout.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "OneNote.one");

var dst = Path.Combine(dataDir, "SaveToPdfUsingLetterPageSettings.pdf");

// Save the document.
oneFile.Save(dst, new PdfSaveOptions() { PageSettings = PageSettings.Letter });</code></example>
      <example>Shows how to save a document in Pdf format with A4 page layout without height limit.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "OneNote.one");

var dst = Path.Combine(dataDir, "SaveToPdfUsingA4PageSettingsWithoutHeightLimit.pdf");

// Save the document.
oneFile.Save(dst, new PdfSaveOptions() { PageSettings = PageSettings.A4NoHeightLimit });</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.PageSettings.A4">
      <summary>
            Gets settings for the A4-format page.
            </summary>
    </member>
    <member name="P:Aspose.Note.Saving.PageSettings.A4NoHeightLimit">
      <summary>
            Gets settings for the A4-format page with limitless height.
            </summary>
      <example>Shows how to save a document in Pdf format with A4 page layout without height limit.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "OneNote.one");

var dst = Path.Combine(dataDir, "SaveToPdfUsingA4PageSettingsWithoutHeightLimit.pdf");

// Save the document.
oneFile.Save(dst, new PdfSaveOptions() { PageSettings = PageSettings.A4NoHeightLimit });</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.PageSettings.Letter">
      <summary>
            Gets settings for the Letter-format page.
            </summary>
      <example>Shows how to save a document in Pdf format with Letter page layout.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "OneNote.one");

var dst = Path.Combine(dataDir, "SaveToPdfUsingLetterPageSettings.pdf");

// Save the document.
oneFile.Save(dst, new PdfSaveOptions() { PageSettings = PageSettings.Letter });</code></example>
    </member>
    <member name="P:Aspose.Note.Saving.PageSettings.LetterNoHeightLimit">
      <summary>
            Gets settings for the Letter-format page with limitless height.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.PageSplittingAlgorithm">
      <summary>
            Base class for splitting an object in case it doesn't fit in original page.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.Pdf.NamespaceDoc">
      <summary>
            The <see cref="N:Aspose.Note.Saving.Pdf" /> namespace contains classes which perform saving to PDF format.
            </summary>
    </member>
    <member name="T:Aspose.Note.Saving.Pdf.PdfImageCompression">
      <summary>
            Specifies the type of compression applied to images in the PDF file.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Pdf.PdfImageCompression.None">
      <summary>
            No compression is used when saving images.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Pdf.PdfImageCompression.Auto">
      <summary>
            Automatically selects the most appropriate compression for each image.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Pdf.PdfImageCompression.Jpeg">
      <summary>
            Jpeg compression. Does not support transparency.
            </summary>
    </member>
    <member name="F:Aspose.Note.Saving.Pdf.PdfImageCompression.Flate">
      <summary>
            Flate compression(lossless).
            </summary>
    </member>
    <member name="T:Aspose.Note.SaveFormat">
      <summary>
            Indicates the format in which the document is saved.
            </summary>
      <example>Shows how to save a document using SaveFormat enumeration.<code>
string inputFile = "Sample1.one";
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string outputFile = "SaveDocToOneNoteFormatUsingSaveFormat_out.one";

Document document = new Document(dataDir + inputFile);

document.Save(dataDir + outputFile, SaveFormat.One);</code></example>
      <example>Shows how to save a document in pdf format using default settings.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

// Save the document as PDF
dataDir = dataDir + "SaveWithDefaultSettings_out.pdf";
oneFile.Save(dataDir, SaveFormat.Pdf);</code></example>
      <example>Shows how to save a document as image in Jpeg format using SaveFormat.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToJpegImageUsingSaveFormat_out.jpg";

// Save the document.
oneFile.Save(dataDir, SaveFormat.Jpeg);</code></example>
      <example>Shows how to save a document in gif format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToImageDefaultOptions_out.gif";

// Save the document as gif.
oneFile.Save(dataDir, SaveFormat.Gif);</code></example>
      <example>Shows how to set a image quality when saving document as image in JPEG format.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SetOutputImageResolution_out.jpg";

// Save the document.
doc.Save(dataDir, new ImageSaveOptions(SaveFormat.Jpeg) { Quality = 100 });</code></example>
      <example>Shows how to save a document as image in Bmp format using ImageSaveOptions.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBmpImageUsingImageSaveOptions_out.bmp";

// Save the document.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Bmp));</code></example>
      <example>Shows how to set a image resolution when saving document as image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document doc = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SetOutputImageResolution_out.jpg";

// Save the document.
doc.Save(dataDir, new ImageSaveOptions(SaveFormat.Jpeg) { Resolution = 220 });</code></example>
      <example>Shows how to save a document as grayscale image.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveAsGrayscaleImage_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.GrayScale
                          });</code></example>
      <example>Shows how to save a document as image in Tiff format using PackBits compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingPackBitsCompression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          TiffCompression = TiffCompression.PackBits
                      });</code></example>
      <example>Shows how to save a document as image in Tiff format using Jpeg compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingJpegCompression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          TiffCompression = TiffCompression.Jpeg,
                          Quality = 93
                      });</code></example>
      <example>Shows how to save a document as image in Tiff format using CCITT Group 3 fax compression.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(Path.Combine(dataDir, "Aspose.one"));

var dst = Path.Combine(dataDir, "SaveToTiffUsingCcitt3Compression.tiff");

// Save the document.
oneFile.Save(dst, new ImageSaveOptions(SaveFormat.Tiff)
                      {
                          ColorMode = ColorMode.BlackAndWhite,
                          TiffCompression = TiffCompression.Ccitt3
                      });</code></example>
      <example>Shows how to save a document as binary image using Otsu's method.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingOtsuMethod_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                        {
                            ColorMode = ColorMode.BlackAndWhite,
                            BinarizationOptions = new ImageBinarizationOptions()
                                                  {
                                                      BinarizationMethod = BinarizationMethod.Otsu,
                                                  }
                        });</code></example>
      <example>Shows how to save a document as binary image using fixed threshold.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Load the document into Aspose.Note.
Document oneFile = new Document(dataDir + "Aspose.one");

dataDir = dataDir + "SaveToBinaryImageUsingFixedThreshold_out.png";

// Save the document as gif.
oneFile.Save(dataDir, new ImageSaveOptions(SaveFormat.Png)
                          {
                              ColorMode = ColorMode.BlackAndWhite,
                              BinarizationOptions = new ImageBinarizationOptions()
                                                        {
                                                            BinarizationMethod = BinarizationMethod.FixedThreshold,
                                                            BinarizationThreshold = 123
                                                        }
                          });</code></example>
    </member>
    <member name="F:Aspose.Note.SaveFormat.Png">
      <summary>
            Specifies that the output is a PNG file.
            </summary>
    </member>
    <member name="F:Aspose.Note.SaveFormat.Bmp">
      <summary>
            Specifies that the output is a BMP file.
            </summary>
    </member>
    <member name="F:Aspose.Note.SaveFormat.Jpeg">
      <summary>
            Specifies that the output is a JPEG file.
            </summary>
    </member>
    <member name="F:Aspose.Note.SaveFormat.Gif">
      <summary>
            Specifies that the output is a GIF file.
            </summary>
    </member>
    <member name="F:Aspose.Note.SaveFormat.Tiff">
      <summary>
            Specifies that the output is a TIFF file.
            </summary>
    </member>
    <member name="F:Aspose.Note.SaveFormat.Pdf">
      <summary>
            Specifies that the output is a PDF file.
            </summary>
    </member>
    <member name="F:Aspose.Note.SaveFormat.One">
      <summary>
            Specifies that the output is a OneNote file.
            </summary>
    </member>
    <member name="F:Aspose.Note.SaveFormat.Html">
      <summary>
            Specifies that the output is a HTML file.
            </summary>
    </member>
    <member name="T:Aspose.Note.Table">
      <summary>
            Represents a table.
            </summary>
      <example>Shows how to get text from every table's row.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Sample1.one");

// Get a list of table nodes
IList&lt;Table&gt; nodes = document.GetChildNodes&lt;Table&gt;();

foreach (Table table in nodes)
{
    // Iterate through table rows
    foreach (TableRow row in table)
    {
        // Retrieve text
        string text = string.Join(Environment.NewLine, row.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

        // Print text on the output screen
        Console.WriteLine(text);
    }
}</code></example>
      <example>Shows how to get text from a table.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Sample1.one");

// Get a list of table nodes
IList&lt;Table&gt; nodes = document.GetChildNodes&lt;Table&gt;();

// Set table count
int tblCount = 0;

foreach (Table table in nodes)
{
    tblCount++;
    Console.WriteLine("table # " + tblCount);

    // Retrieve text
    string text = string.Join(Environment.NewLine, table.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

    // Print text on the output screen
    Console.WriteLine(text);
}</code></example>
      <example>Shows how to get text from a table's cells.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Sample1.one");

// Get a list of table nodes
IList&lt;Table&gt; nodes = document.GetChildNodes&lt;Table&gt;();        

foreach (Table table in nodes)
{
    // Iterate through table rows
    foreach (TableRow row in table)
    {
        // Get list of TableCell nodes
        // Iterate through table cells
        foreach (TableCell cell in row)
        {
            // Retrieve text
            string text = string.Join(Environment.NewLine, cell.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

            // Print text on the output screen
            Console.WriteLine(text);
        }
    }
}</code></example>
      <example>Shows how to set a background color for a cell.<code>
// Create an object of the Document class
Document doc = new Document();

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
cell11.BackgroundColor = Color.Coral;

// Initialize TableRow class object
TableRow row = new TableRow(doc);
row.AppendChildLast(cell11);

Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn() { Width = 200 } }
              };
table.AppendChildLast(row);

OutlineElement oe = new OutlineElement(doc);
oe.AppendChildLast(table);

Outline o = new Outline(doc);
o.AppendChildLast(oe);

// Initialize Page class object
Page page = new Page(doc);
page.AppendChildLast(o);

doc.AppendChildLast(page);

doc.Save(Path.Combine(RunExamples.GetDataDir_Tables(), "SettingCellBackGroundColor.pdf"));</code></example>
      <example>Shows how to add new table with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row = new TableRow(doc);

// Initialize TableCell class object
TableCell cell = new TableCell(doc);

// Insert cell content
cell.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Single cell."));

// Add cell to row node
row.AppendChildLast(cell);

// Initialize table node
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70 } }
              };

// Insert row node in table
table.AppendChildLast(row);

// Add tag to this table node
table.Tags.Add(NoteTag.CreateQuestionMark());

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline elements
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddTableNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a table with a locked column.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
row1.AppendChildLast(cell11);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell21 = new TableCell(doc);
cell21.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Long   text    with    several   words and    spaces."));
row2.AppendChildLast(cell21);

// Initialize Table class object
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70, LockedWidth = true } }
              };

// Add rows
table.AppendChildLast(row1);
table.AppendChildLast(row2);

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);
dataDir = dataDir + "CreateTableWithLockedColumns_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a new table.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class objects
TableCell cell11 = new TableCell(doc);
TableCell cell12 = new TableCell(doc);
TableCell cell13 = new TableCell(doc);

// Append outline elements in the table cell
cell11.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.1"));
cell12.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.2"));
cell13.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.3"));

// Table cells to rows
row1.AppendChildLast(cell11);
row1.AppendChildLast(cell12);
row1.AppendChildLast(cell13);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// initialize TableCell class objects
TableCell cell21 = new TableCell(doc);
TableCell cell22 = new TableCell(doc);
TableCell cell23 = new TableCell(doc);

// Append outline elements in the table cell
cell21.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.1"));
cell22.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.2"));
cell23.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.3"));

// Append table cells to rows
row2.AppendChildLast(cell21);
row2.AppendChildLast(cell22);
row2.AppendChildLast(cell23);

// Initialize Table class object and set column widths
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 200 }, new TableColumn { Width = 200 }, new TableColumn { Width = 200 } }
              };

// Append table rows to table
table.AppendChildLast(row1);
table.AppendChildLast(row2);

// Initialize Outline object
Outline outline = new Outline(doc);

// Initialize OutlineElement object
OutlineElement outlineElem = new OutlineElement(doc);

// Add table to outline element node
outlineElem.AppendChildLast(table);

// Add outline element to outline
outline.AppendChildLast(outlineElem);

// Add outline to page node
page.AppendChildLast(outline);

// Add page to document node
doc.AppendChildLast(page);
dataDir = dataDir + "InsertTable_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="M:Aspose.Note.Table.#ctor(Aspose.Note.Document)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Table" /> class.
            </summary>
      <param name="document">
            The parent document of the table.
            </param>
    </member>
    <member name="M:Aspose.Note.Table.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Table" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Note.Table.LastModifiedTime">
      <summary>
            Gets or sets the last modified time.
            </summary>
    </member>
    <member name="P:Aspose.Note.Table.IsBordersVisible">
      <summary>
            Gets or sets a value indicating whether the table border is visible.
            </summary>
      <example>Shows how to set a background color for a cell.<code>
// Create an object of the Document class
Document doc = new Document();

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
cell11.BackgroundColor = Color.Coral;

// Initialize TableRow class object
TableRow row = new TableRow(doc);
row.AppendChildLast(cell11);

Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn() { Width = 200 } }
              };
table.AppendChildLast(row);

OutlineElement oe = new OutlineElement(doc);
oe.AppendChildLast(table);

Outline o = new Outline(doc);
o.AppendChildLast(oe);

// Initialize Page class object
Page page = new Page(doc);
page.AppendChildLast(o);

doc.AppendChildLast(page);

doc.Save(Path.Combine(RunExamples.GetDataDir_Tables(), "SettingCellBackGroundColor.pdf"));</code></example>
      <example>Shows how to add new table with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row = new TableRow(doc);

// Initialize TableCell class object
TableCell cell = new TableCell(doc);

// Insert cell content
cell.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Single cell."));

// Add cell to row node
row.AppendChildLast(cell);

// Initialize table node
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70 } }
              };

// Insert row node in table
table.AppendChildLast(row);

// Add tag to this table node
table.Tags.Add(NoteTag.CreateQuestionMark());

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline elements
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddTableNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a table with a locked column.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
row1.AppendChildLast(cell11);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell21 = new TableCell(doc);
cell21.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Long   text    with    several   words and    spaces."));
row2.AppendChildLast(cell21);

// Initialize Table class object
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70, LockedWidth = true } }
              };

// Add rows
table.AppendChildLast(row1);
table.AppendChildLast(row2);

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);
dataDir = dataDir + "CreateTableWithLockedColumns_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a new table.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class objects
TableCell cell11 = new TableCell(doc);
TableCell cell12 = new TableCell(doc);
TableCell cell13 = new TableCell(doc);

// Append outline elements in the table cell
cell11.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.1"));
cell12.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.2"));
cell13.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.3"));

// Table cells to rows
row1.AppendChildLast(cell11);
row1.AppendChildLast(cell12);
row1.AppendChildLast(cell13);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// initialize TableCell class objects
TableCell cell21 = new TableCell(doc);
TableCell cell22 = new TableCell(doc);
TableCell cell23 = new TableCell(doc);

// Append outline elements in the table cell
cell21.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.1"));
cell22.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.2"));
cell23.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.3"));

// Append table cells to rows
row2.AppendChildLast(cell21);
row2.AppendChildLast(cell22);
row2.AppendChildLast(cell23);

// Initialize Table class object and set column widths
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 200 }, new TableColumn { Width = 200 }, new TableColumn { Width = 200 } }
              };

// Append table rows to table
table.AppendChildLast(row1);
table.AppendChildLast(row2);

// Initialize Outline object
Outline outline = new Outline(doc);

// Initialize OutlineElement object
OutlineElement outlineElem = new OutlineElement(doc);

// Add table to outline element node
outlineElem.AppendChildLast(table);

// Add outline element to outline
outline.AppendChildLast(outlineElem);

// Add outline to page node
page.AppendChildLast(outline);

// Add page to document node
doc.AppendChildLast(page);
dataDir = dataDir + "InsertTable_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.Table.Columns">
      <summary>
            Gets the columns of the table.
            </summary>
      <example>Shows how to set a background color for a cell.<code>
// Create an object of the Document class
Document doc = new Document();

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
cell11.BackgroundColor = Color.Coral;

// Initialize TableRow class object
TableRow row = new TableRow(doc);
row.AppendChildLast(cell11);

Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn() { Width = 200 } }
              };
table.AppendChildLast(row);

OutlineElement oe = new OutlineElement(doc);
oe.AppendChildLast(table);

Outline o = new Outline(doc);
o.AppendChildLast(oe);

// Initialize Page class object
Page page = new Page(doc);
page.AppendChildLast(o);

doc.AppendChildLast(page);

doc.Save(Path.Combine(RunExamples.GetDataDir_Tables(), "SettingCellBackGroundColor.pdf"));</code></example>
      <example>Shows how to add new table with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row = new TableRow(doc);

// Initialize TableCell class object
TableCell cell = new TableCell(doc);

// Insert cell content
cell.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Single cell."));

// Add cell to row node
row.AppendChildLast(cell);

// Initialize table node
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70 } }
              };

// Insert row node in table
table.AppendChildLast(row);

// Add tag to this table node
table.Tags.Add(NoteTag.CreateQuestionMark());

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline elements
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddTableNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a table with a locked column.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
row1.AppendChildLast(cell11);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell21 = new TableCell(doc);
cell21.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Long   text    with    several   words and    spaces."));
row2.AppendChildLast(cell21);

// Initialize Table class object
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70, LockedWidth = true } }
              };

// Add rows
table.AppendChildLast(row1);
table.AppendChildLast(row2);

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);
dataDir = dataDir + "CreateTableWithLockedColumns_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a new table.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class objects
TableCell cell11 = new TableCell(doc);
TableCell cell12 = new TableCell(doc);
TableCell cell13 = new TableCell(doc);

// Append outline elements in the table cell
cell11.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.1"));
cell12.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.2"));
cell13.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.3"));

// Table cells to rows
row1.AppendChildLast(cell11);
row1.AppendChildLast(cell12);
row1.AppendChildLast(cell13);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// initialize TableCell class objects
TableCell cell21 = new TableCell(doc);
TableCell cell22 = new TableCell(doc);
TableCell cell23 = new TableCell(doc);

// Append outline elements in the table cell
cell21.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.1"));
cell22.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.2"));
cell23.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.3"));

// Append table cells to rows
row2.AppendChildLast(cell21);
row2.AppendChildLast(cell22);
row2.AppendChildLast(cell23);

// Initialize Table class object and set column widths
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 200 }, new TableColumn { Width = 200 }, new TableColumn { Width = 200 } }
              };

// Append table rows to table
table.AppendChildLast(row1);
table.AppendChildLast(row2);

// Initialize Outline object
Outline outline = new Outline(doc);

// Initialize OutlineElement object
OutlineElement outlineElem = new OutlineElement(doc);

// Add table to outline element node
outlineElem.AppendChildLast(table);

// Add outline element to outline
outline.AppendChildLast(outlineElem);

// Add outline to page node
page.AppendChildLast(outline);

// Add page to document node
doc.AppendChildLast(page);
dataDir = dataDir + "InsertTable_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="P:Aspose.Note.Table.Tags">
      <summary>
            Gets the list of all tags of a paragraph.
            </summary>
    </member>
    <member name="M:Aspose.Note.Table.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="T:Aspose.Note.TableCell">
      <summary>
            Represents a table cell.
            </summary>
      <example>Shows how to get text from a table's cells.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Sample1.one");

// Get a list of table nodes
IList&lt;Table&gt; nodes = document.GetChildNodes&lt;Table&gt;();        

foreach (Table table in nodes)
{
    // Iterate through table rows
    foreach (TableRow row in table)
    {
        // Get list of TableCell nodes
        // Iterate through table cells
        foreach (TableCell cell in row)
        {
            // Retrieve text
            string text = string.Join(Environment.NewLine, cell.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

            // Print text on the output screen
            Console.WriteLine(text);
        }
    }
}</code></example>
      <example>Shows how to set a background color for a cell.<code>
// Create an object of the Document class
Document doc = new Document();

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
cell11.BackgroundColor = Color.Coral;

// Initialize TableRow class object
TableRow row = new TableRow(doc);
row.AppendChildLast(cell11);

Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn() { Width = 200 } }
              };
table.AppendChildLast(row);

OutlineElement oe = new OutlineElement(doc);
oe.AppendChildLast(table);

Outline o = new Outline(doc);
o.AppendChildLast(oe);

// Initialize Page class object
Page page = new Page(doc);
page.AppendChildLast(o);

doc.AppendChildLast(page);

doc.Save(Path.Combine(RunExamples.GetDataDir_Tables(), "SettingCellBackGroundColor.pdf"));</code></example>
      <example>Shows how to add new table with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row = new TableRow(doc);

// Initialize TableCell class object
TableCell cell = new TableCell(doc);

// Insert cell content
cell.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Single cell."));

// Add cell to row node
row.AppendChildLast(cell);

// Initialize table node
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70 } }
              };

// Insert row node in table
table.AppendChildLast(row);

// Add tag to this table node
table.Tags.Add(NoteTag.CreateQuestionMark());

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline elements
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddTableNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a table with a locked column.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
row1.AppendChildLast(cell11);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell21 = new TableCell(doc);
cell21.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Long   text    with    several   words and    spaces."));
row2.AppendChildLast(cell21);

// Initialize Table class object
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70, LockedWidth = true } }
              };

// Add rows
table.AppendChildLast(row1);
table.AppendChildLast(row2);

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);
dataDir = dataDir + "CreateTableWithLockedColumns_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a new table.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class objects
TableCell cell11 = new TableCell(doc);
TableCell cell12 = new TableCell(doc);
TableCell cell13 = new TableCell(doc);

// Append outline elements in the table cell
cell11.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.1"));
cell12.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.2"));
cell13.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.3"));

// Table cells to rows
row1.AppendChildLast(cell11);
row1.AppendChildLast(cell12);
row1.AppendChildLast(cell13);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// initialize TableCell class objects
TableCell cell21 = new TableCell(doc);
TableCell cell22 = new TableCell(doc);
TableCell cell23 = new TableCell(doc);

// Append outline elements in the table cell
cell21.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.1"));
cell22.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.2"));
cell23.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.3"));

// Append table cells to rows
row2.AppendChildLast(cell21);
row2.AppendChildLast(cell22);
row2.AppendChildLast(cell23);

// Initialize Table class object and set column widths
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 200 }, new TableColumn { Width = 200 }, new TableColumn { Width = 200 } }
              };

// Append table rows to table
table.AppendChildLast(row1);
table.AppendChildLast(row2);

// Initialize Outline object
Outline outline = new Outline(doc);

// Initialize OutlineElement object
OutlineElement outlineElem = new OutlineElement(doc);

// Add table to outline element node
outlineElem.AppendChildLast(table);

// Add outline element to outline
outline.AppendChildLast(outlineElem);

// Add outline to page node
page.AppendChildLast(outline);

// Add page to document node
doc.AppendChildLast(page);
dataDir = dataDir + "InsertTable_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="M:Aspose.Note.TableCell.#ctor(Aspose.Note.Document)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.TableCell" /> class.
            </summary>
      <param name="document">
            The parent document of the table cell.
            </param>
    </member>
    <member name="M:Aspose.Note.TableCell.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.TableCell" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Note.TableCell.LastModifiedTime">
      <summary>
            Gets or sets the last modified time.
            </summary>
    </member>
    <member name="P:Aspose.Note.TableCell.MaxWidth">
      <summary>
            Gets the max width.
            </summary>
    </member>
    <member name="P:Aspose.Note.TableCell.BackgroundColor">
      <summary>
            Gets or sets the background color.
            </summary>
      <example>Shows how to set a background color for a cell.<code>
// Create an object of the Document class
Document doc = new Document();

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
cell11.BackgroundColor = Color.Coral;

// Initialize TableRow class object
TableRow row = new TableRow(doc);
row.AppendChildLast(cell11);

Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn() { Width = 200 } }
              };
table.AppendChildLast(row);

OutlineElement oe = new OutlineElement(doc);
oe.AppendChildLast(table);

Outline o = new Outline(doc);
o.AppendChildLast(oe);

// Initialize Page class object
Page page = new Page(doc);
page.AppendChildLast(o);

doc.AppendChildLast(page);

doc.Save(Path.Combine(RunExamples.GetDataDir_Tables(), "SettingCellBackGroundColor.pdf"));</code></example>
    </member>
    <member name="M:Aspose.Note.TableCell.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="T:Aspose.Note.TableRow">
      <summary>
            Represents a table row.
            </summary>
      <example>Shows how to get text from every table's row.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Sample1.one");

// Get a list of table nodes
IList&lt;Table&gt; nodes = document.GetChildNodes&lt;Table&gt;();

foreach (Table table in nodes)
{
    // Iterate through table rows
    foreach (TableRow row in table)
    {
        // Retrieve text
        string text = string.Join(Environment.NewLine, row.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

        // Print text on the output screen
        Console.WriteLine(text);
    }
}</code></example>
      <example>Shows how to get text from a table's cells.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Load the document into Aspose.Note.
Document document = new Document(dataDir + "Sample1.one");

// Get a list of table nodes
IList&lt;Table&gt; nodes = document.GetChildNodes&lt;Table&gt;();        

foreach (Table table in nodes)
{
    // Iterate through table rows
    foreach (TableRow row in table)
    {
        // Get list of TableCell nodes
        // Iterate through table cells
        foreach (TableCell cell in row)
        {
            // Retrieve text
            string text = string.Join(Environment.NewLine, cell.GetChildNodes&lt;RichText&gt;().Select(e =&gt; e.Text)) + Environment.NewLine;

            // Print text on the output screen
            Console.WriteLine(text);
        }
    }
}</code></example>
      <example>Shows how to set a background color for a cell.<code>
// Create an object of the Document class
Document doc = new Document();

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
cell11.BackgroundColor = Color.Coral;

// Initialize TableRow class object
TableRow row = new TableRow(doc);
row.AppendChildLast(cell11);

Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn() { Width = 200 } }
              };
table.AppendChildLast(row);

OutlineElement oe = new OutlineElement(doc);
oe.AppendChildLast(table);

Outline o = new Outline(doc);
o.AppendChildLast(oe);

// Initialize Page class object
Page page = new Page(doc);
page.AppendChildLast(o);

doc.AppendChildLast(page);

doc.Save(Path.Combine(RunExamples.GetDataDir_Tables(), "SettingCellBackGroundColor.pdf"));</code></example>
      <example>Shows how to add new table with tag.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tags();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row = new TableRow(doc);

// Initialize TableCell class object
TableCell cell = new TableCell(doc);

// Insert cell content
cell.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Single cell."));

// Add cell to row node
row.AppendChildLast(cell);

// Initialize table node
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70 } }
              };

// Insert row node in table
table.AppendChildLast(row);

// Add tag to this table node
table.Tags.Add(NoteTag.CreateQuestionMark());

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline elements
outline.AppendChildLast(outlineElem);
page.AppendChildLast(outline);
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "AddTableNodeWithTag_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a table with a locked column.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell11 = new TableCell(doc);
cell11.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Small text"));
row1.AppendChildLast(cell11);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// Initialize TableCell class object and set text content
TableCell cell21 = new TableCell(doc);
cell21.AppendChildLast(InsertTable.GetOutlineElementWithText(doc, "Long   text    with    several   words and    spaces."));
row2.AppendChildLast(cell21);

// Initialize Table class object
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 70, LockedWidth = true } }
              };

// Add rows
table.AppendChildLast(row1);
table.AppendChildLast(row2);

Outline outline = new Outline(doc);
OutlineElement outlineElem = new OutlineElement(doc);

// Add table node
outlineElem.AppendChildLast(table);

// Add outline element node
outline.AppendChildLast(outlineElem);

// Add outline node
page.AppendChildLast(outline);

// Add page node
doc.AppendChildLast(page);
dataDir = dataDir + "CreateTableWithLockedColumns_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a new table.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Tables();

// Create an object of the Document class
Document doc = new Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Initialize TableRow class object
TableRow row1 = new TableRow(doc);

// Initialize TableCell class objects
TableCell cell11 = new TableCell(doc);
TableCell cell12 = new TableCell(doc);
TableCell cell13 = new TableCell(doc);

// Append outline elements in the table cell
cell11.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.1"));
cell12.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.2"));
cell13.AppendChildLast(GetOutlineElementWithText(doc, "cell_1.3"));

// Table cells to rows
row1.AppendChildLast(cell11);
row1.AppendChildLast(cell12);
row1.AppendChildLast(cell13);

// Initialize TableRow class object
TableRow row2 = new TableRow(doc);

// initialize TableCell class objects
TableCell cell21 = new TableCell(doc);
TableCell cell22 = new TableCell(doc);
TableCell cell23 = new TableCell(doc);

// Append outline elements in the table cell
cell21.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.1"));
cell22.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.2"));
cell23.AppendChildLast(GetOutlineElementWithText(doc, "cell_2.3"));

// Append table cells to rows
row2.AppendChildLast(cell21);
row2.AppendChildLast(cell22);
row2.AppendChildLast(cell23);

// Initialize Table class object and set column widths
Table table = new Table(doc)
              {
                  IsBordersVisible = true,
                  Columns = { new TableColumn { Width = 200 }, new TableColumn { Width = 200 }, new TableColumn { Width = 200 } }
              };

// Append table rows to table
table.AppendChildLast(row1);
table.AppendChildLast(row2);

// Initialize Outline object
Outline outline = new Outline(doc);

// Initialize OutlineElement object
OutlineElement outlineElem = new OutlineElement(doc);

// Add table to outline element node
outlineElem.AppendChildLast(table);

// Add outline element to outline
outline.AppendChildLast(outlineElem);

// Add outline to page node
page.AppendChildLast(outline);

// Add page to document node
doc.AppendChildLast(page);
dataDir = dataDir + "InsertTable_out.one";
doc.Save(dataDir);</code></example>
    </member>
    <member name="M:Aspose.Note.TableRow.#ctor(Aspose.Note.Document)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.TableRow" /> class.
            </summary>
      <param name="document">
            The parent document of the table row.
            </param>
    </member>
    <member name="M:Aspose.Note.TableRow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.TableRow" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Note.TableRow.LastModifiedTime">
      <summary>
            Gets or sets the last modified time.
            </summary>
    </member>
    <member name="M:Aspose.Note.TableRow.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="T:Aspose.Note.TextRun">
      <summary>
            The class representing a piece of text with associated style.
            </summary>
    </member>
    <member name="M:Aspose.Note.TextRun.#ctor(System.String,Aspose.Note.TextStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.TextRun" /> class.
            </summary>
      <param name="text">
            The associated text.
            </param>
      <param name="style">
            The style.
            </param>
    </member>
    <member name="M:Aspose.Note.TextRun.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.TextRun" /> class with default style.
            </summary>
      <param name="text">
            The associated text.
            </param>
    </member>
    <member name="M:Aspose.Note.TextRun.#ctor(Aspose.Note.TextStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.TextRun" /> class with empty text.
            </summary>
      <param name="style">
            The style.
            </param>
    </member>
    <member name="M:Aspose.Note.TextRun.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.TextRun" /> class with empty text and default style.
            </summary>
    </member>
    <member name="P:Aspose.Note.TextRun.Text">
      <summary>
            Gets or sets the text.
            </summary>
    </member>
    <member name="P:Aspose.Note.TextRun.Style">
      <summary>
            Gets or sets the style.
            </summary>
    </member>
    <member name="P:Aspose.Note.TextRun.Length">
      <summary>
            Gets the length of the associated text.
            </summary>
    </member>
    <member name="T:Aspose.Note.Title">
      <summary>
            Represents a title.
            </summary>
      <example>Shows how to edit page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(dataDir + "Aspose.one");
Page page = document.FirstChild;

var pageHistory = document.GetPageHistory(page);

pageHistory.RemoveRange(0, 1);

pageHistory[0] = new Page(document);
if (pageHistory.Count &gt; 1)
{
    pageHistory[1].Title.TitleText.Text = "New Title";

    pageHistory.Add(new Page(document));

    pageHistory.Insert(1, new Page(document));

    document.Save(dataDir + "ModifyPageHistory_out.one");
}</code></example>
      <example>Shows how to set a title for a page.<code>
string dataDir = RunExamples.GetDataDir_Text();
string outputPath = dataDir + "CreateTitleMsStyle_out.one";

var doc = new Document();
var page = new Page(doc);

page.Title = new Title(doc)
{
    TitleText = new RichText(doc)
    {
        Text = "Title text.",
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleDate = new RichText(doc)
    {
        Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture),
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleTime = new RichText(doc)
    {
        Text = "12:34",
        ParagraphStyle = ParagraphStyle.Default
    }
};

doc.AppendChildLast(page);

doc.Save(outputPath);</code></example>
      <example>Shows how to create a document and save it in html format using default options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();
Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
                 {
                     TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                     TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                     TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
                 };

// Save into HTML format
dataDir = dataDir + "CreateOneNoteDocAndSaveToHTML_out.html";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a document and save in html format specified range of pages.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();

Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
             {
                 TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
             };

// Save into HTML format
dataDir = dataDir + "CreateAndSavePageRange_out.html";
doc.Save(dataDir, new HtmlSaveOptions
                  {
                      PageCount = 1,
                      PageIndex = 0
                  });</code></example>
      <example>Shows how to create a document with titled page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Create an object of the Document class
Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Set page title properties
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append Page node in the document
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "CreateDocWithPageTitle_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to save a document in different formats.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize the new Document
Document doc = new Document() { AutomaticLayoutChangesDetectionEnabled = false };

// Initialize the new Page
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append page node
doc.AppendChildLast(page);

// Save OneNote document in different formats, set text font size and detect layout changes manually.
doc.Save(dataDir + "ConsequentExportOperations_out.html");            
doc.Save(dataDir + "ConsequentExportOperations_out.pdf");            
doc.Save(dataDir + "ConsequentExportOperations_out.jpg");            
textStyle.FontSize = 11;           
doc.DetectLayoutChanges();            
doc.Save(dataDir + "ConsequentExportOperations_out.bmp");</code></example>
    </member>
    <member name="M:Aspose.Note.Title.#ctor(Aspose.Note.Document)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Title" /> class.
            </summary>
      <param name="document">
            The parent document of the title.
            </param>
    </member>
    <member name="M:Aspose.Note.Title.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Title" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Note.Title.IsComposite">
      <summary>
            Gets a value indicating whether this node is composite. If true the node can have child nodes.
            </summary>
    </member>
    <member name="P:Aspose.Note.Title.LastModifiedTime">
      <summary>
            Gets or sets the last modified time.
            </summary>
    </member>
    <member name="P:Aspose.Note.Title.TitleText">
      <summary>
            Gets or sets the text of the title.
            </summary>
      <example>Shows how to edit page's history.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_Pages();

// Load OneNote document and get first child           
Document document = new Document(dataDir + "Aspose.one");
Page page = document.FirstChild;

var pageHistory = document.GetPageHistory(page);

pageHistory.RemoveRange(0, 1);

pageHistory[0] = new Page(document);
if (pageHistory.Count &gt; 1)
{
    pageHistory[1].Title.TitleText.Text = "New Title";

    pageHistory.Add(new Page(document));

    pageHistory.Insert(1, new Page(document));

    document.Save(dataDir + "ModifyPageHistory_out.one");
}</code></example>
      <example>Shows how to set a title for a page.<code>
string dataDir = RunExamples.GetDataDir_Text();
string outputPath = dataDir + "CreateTitleMsStyle_out.one";

var doc = new Document();
var page = new Page(doc);

page.Title = new Title(doc)
{
    TitleText = new RichText(doc)
    {
        Text = "Title text.",
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleDate = new RichText(doc)
    {
        Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture),
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleTime = new RichText(doc)
    {
        Text = "12:34",
        ParagraphStyle = ParagraphStyle.Default
    }
};

doc.AppendChildLast(page);

doc.Save(outputPath);</code></example>
      <example>Shows how to create a document and save it in html format using default options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();
Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
                 {
                     TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                     TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                     TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
                 };

// Save into HTML format
dataDir = dataDir + "CreateOneNoteDocAndSaveToHTML_out.html";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a document and save in html format specified range of pages.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();

Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
             {
                 TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
             };

// Save into HTML format
dataDir = dataDir + "CreateAndSavePageRange_out.html";
doc.Save(dataDir, new HtmlSaveOptions
                  {
                      PageCount = 1,
                      PageIndex = 0
                  });</code></example>
      <example>Shows how to create a document with titled page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Create an object of the Document class
Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Set page title properties
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append Page node in the document
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "CreateDocWithPageTitle_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to save a document in different formats.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize the new Document
Document doc = new Document() { AutomaticLayoutChangesDetectionEnabled = false };

// Initialize the new Page
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append page node
doc.AppendChildLast(page);

// Save OneNote document in different formats, set text font size and detect layout changes manually.
doc.Save(dataDir + "ConsequentExportOperations_out.html");            
doc.Save(dataDir + "ConsequentExportOperations_out.pdf");            
doc.Save(dataDir + "ConsequentExportOperations_out.jpg");            
textStyle.FontSize = 11;           
doc.DetectLayoutChanges();            
doc.Save(dataDir + "ConsequentExportOperations_out.bmp");</code></example>
    </member>
    <member name="P:Aspose.Note.Title.TitleDate">
      <summary>
            Gets or sets a string representation of the date in the title.
            </summary>
      <example>Shows how to set a title for a page.<code>
string dataDir = RunExamples.GetDataDir_Text();
string outputPath = dataDir + "CreateTitleMsStyle_out.one";

var doc = new Document();
var page = new Page(doc);

page.Title = new Title(doc)
{
    TitleText = new RichText(doc)
    {
        Text = "Title text.",
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleDate = new RichText(doc)
    {
        Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture),
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleTime = new RichText(doc)
    {
        Text = "12:34",
        ParagraphStyle = ParagraphStyle.Default
    }
};

doc.AppendChildLast(page);

doc.Save(outputPath);</code></example>
      <example>Shows how to create a document and save it in html format using default options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();
Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
                 {
                     TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                     TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                     TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
                 };

// Save into HTML format
dataDir = dataDir + "CreateOneNoteDocAndSaveToHTML_out.html";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a document and save in html format specified range of pages.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();

Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
             {
                 TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
             };

// Save into HTML format
dataDir = dataDir + "CreateAndSavePageRange_out.html";
doc.Save(dataDir, new HtmlSaveOptions
                  {
                      PageCount = 1,
                      PageIndex = 0
                  });</code></example>
      <example>Shows how to create a document with titled page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Create an object of the Document class
Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Set page title properties
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append Page node in the document
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "CreateDocWithPageTitle_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to save a document in different formats.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize the new Document
Document doc = new Document() { AutomaticLayoutChangesDetectionEnabled = false };

// Initialize the new Page
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append page node
doc.AppendChildLast(page);

// Save OneNote document in different formats, set text font size and detect layout changes manually.
doc.Save(dataDir + "ConsequentExportOperations_out.html");            
doc.Save(dataDir + "ConsequentExportOperations_out.pdf");            
doc.Save(dataDir + "ConsequentExportOperations_out.jpg");            
textStyle.FontSize = 11;           
doc.DetectLayoutChanges();            
doc.Save(dataDir + "ConsequentExportOperations_out.bmp");</code></example>
    </member>
    <member name="P:Aspose.Note.Title.TitleTime">
      <summary>
            Gets or sets a string representation of the time in the title.
            </summary>
      <example>Shows how to set a title for a page.<code>
string dataDir = RunExamples.GetDataDir_Text();
string outputPath = dataDir + "CreateTitleMsStyle_out.one";

var doc = new Document();
var page = new Page(doc);

page.Title = new Title(doc)
{
    TitleText = new RichText(doc)
    {
        Text = "Title text.",
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleDate = new RichText(doc)
    {
        Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture),
        ParagraphStyle = ParagraphStyle.Default
    },
    TitleTime = new RichText(doc)
    {
        Text = "12:34",
        ParagraphStyle = ParagraphStyle.Default
    }
};

doc.AppendChildLast(page);

doc.Save(outputPath);</code></example>
      <example>Shows how to create a document and save it in html format using default options.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();
Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
                 {
                     TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                     TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                     TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
                 };

// Save into HTML format
dataDir = dataDir + "CreateOneNoteDocAndSaveToHTML_out.html";
doc.Save(dataDir);</code></example>
      <example>Shows how to create a document and save in html format specified range of pages.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize OneNote document
Document doc = new Document();

Page page = doc.AppendChildLast(new Page());

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title()
             {
                 TitleText = new RichText() { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText() { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText() { Text = "12:34", ParagraphStyle = textStyle }
             };

// Save into HTML format
dataDir = dataDir + "CreateAndSavePageRange_out.html";
doc.Save(dataDir, new HtmlSaveOptions
                  {
                      PageCount = 1,
                      PageIndex = 0
                  });</code></example>
      <example>Shows how to create a document with titled page.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Create an object of the Document class
Document doc = new Aspose.Note.Document();

// Initialize Page class object
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };

// Set page title properties
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append Page node in the document
doc.AppendChildLast(page);

// Save OneNote document
dataDir = dataDir + "CreateDocWithPageTitle_out.one";
doc.Save(dataDir);</code></example>
      <example>Shows how to save a document in different formats.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();

// Initialize the new Document
Document doc = new Document() { AutomaticLayoutChangesDetectionEnabled = false };

// Initialize the new Page
Aspose.Note.Page page = new Aspose.Note.Page(doc);

// Default style for all text in the document.
ParagraphStyle textStyle = new ParagraphStyle { FontColor = Color.Black, FontName = "Arial", FontSize = 10 };
page.Title = new Title(doc)
             {
                 TitleText = new RichText(doc) { Text = "Title text.", ParagraphStyle = textStyle },
                 TitleDate = new RichText(doc) { Text = new DateTime(2011, 11, 11).ToString("D", CultureInfo.InvariantCulture), ParagraphStyle = textStyle },
                 TitleTime = new RichText(doc) { Text = "12:34", ParagraphStyle = textStyle }
             };

// Append page node
doc.AppendChildLast(page);

// Save OneNote document in different formats, set text font size and detect layout changes manually.
doc.Save(dataDir + "ConsequentExportOperations_out.html");            
doc.Save(dataDir + "ConsequentExportOperations_out.pdf");            
doc.Save(dataDir + "ConsequentExportOperations_out.jpg");            
textStyle.FontSize = 11;           
doc.DetectLayoutChanges();            
doc.Save(dataDir + "ConsequentExportOperations_out.bmp");</code></example>
    </member>
    <member name="P:Aspose.Note.Title.HorizontalOffset">
      <summary>
            Gets or sets the horizontal offset.
            </summary>
    </member>
    <member name="P:Aspose.Note.Title.VerticalOffset">
      <summary>
            Gets or sets the vertical offset.
            </summary>
    </member>
    <member name="M:Aspose.Note.Title.Accept(Aspose.Note.DocumentVisitor)">
      <summary>
            Accepts the visitor of the node.
            </summary>
      <param name="visitor">
            The object of a class derived from the <see cref="T:Aspose.Note.DocumentVisitor" />.
            </param>
    </member>
    <member name="M:Aspose.Note.Title.GetChildNodes(Aspose.Note.NodeType)">
      <summary>
            Get all child nodes by node type.
            </summary>
      <param name="type">
            The node type.
            </param>
      <returns>
            A list of child nodes.
            </returns>
    </member>
    <member name="M:Aspose.Note.Title.GetChildNodes``1">
      <summary>
            Get all child nodes by the node type.
            </summary>
      <typeparam name="T1">The type of elements in the returned list.</typeparam>
      <returns>A list of child nodes.</returns>
    </member>
    <member name="M:Aspose.Note.Title.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through child nodes of the <see cref="T:Aspose.Note.Title" />.
            </summary>
      <returns>
            The <see cref="T:System.Collections.IEnumerator" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.DisplayUnitsConverter">
      <summary>
            The class contains the methods for converting values.
            </summary>
    </member>
    <member name="M:Aspose.Note.DisplayUnitsConverter.PointToPixel(System.Single,System.Single)">
      <summary>
            Converts points to pixels at the specified pixel resolution.
            </summary>
      <param name="points">
            The value to convert in points.
            </param>
      <param name="dpi">
            Screen resolution.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.DisplayUnitsConverter.PixelToPoint(System.Int32,System.Single)">
      <summary>
            Converts pixels to points at the specified pixel resolution.
            </summary>
      <param name="pixels">
            The value to convert in pixels.
            </param>
      <param name="dpi">
            Screen resolution.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.DisplayUnitsConverter.InchToPoint(System.Single)">
      <summary>
            Converts inches to points.
            </summary>
      <param name="inches">
            The value to convert in inches.
            </param>
      <returns>
            The <see cref="T:System.Single" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.DisplayUnitsConverter.PointToInch(System.Single)">
      <summary>
            Converts points to inches.
            </summary>
      <param name="points">
            The value to convert in points.
            </param>
      <returns>
            The <see cref="T:System.Single" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.DisplayUnitsConverter.MillimeterToInch(System.Single)">
      <summary>
            Converts millimeters to inches.
            </summary>
      <param name="mm">
            The value to convert in millimeters.
            </param>
      <returns>
            The <see cref="T:System.Single" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.DisplayUnitsConverter.MillimeterToPoint(System.Single)">
      <summary>
            Converts millimeters to points.
            </summary>
      <param name="mm">
            The value to convert in millimeters.
            </param>
      <returns>
            The <see cref="T:System.Single" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.FileCorruptedException">
      <summary>
            Thrown during document load, when the document appears to be corrupted and impossible to load.
            </summary>
    </member>
    <member name="M:Aspose.Note.FileCorruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.FileCorruptedException" /> class.
            </summary>
      <param name="serializationInfo">
            The serialization info.
            </param>
      <param name="synchronizationContext">
            The synchronization context.
            </param>
    </member>
    <member name="T:Aspose.Note.FileFormat">
      <summary>
            Represents OneNote file format.
            </summary>
      <example>Shows how to check if a document load is failed because OneNote 2007 format is not supported.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "OneNote2007.one");

try
{
    new Document(fileName);
}
catch (UnsupportedFileFormatException e)
{
    if (e.FileFormat == FileFormat.OneNote2007)
    {
        Console.WriteLine("It looks like the provided file is in OneNote 2007 format that is not supported.");
    }
    else
        throw;
}</code></example>
    </member>
    <member name="F:Aspose.Note.FileFormat.Unknown">
      <summary>
            Unknown file format.
            </summary>
    </member>
    <member name="F:Aspose.Note.FileFormat.OneNote2007">
      <summary>
            OneNote 2010.
            </summary>
    </member>
    <member name="F:Aspose.Note.FileFormat.OneNote2010">
      <summary>
            OneNote 2010.
            </summary>
    </member>
    <member name="F:Aspose.Note.FileFormat.OneNoteOnline">
      <summary>
            OneNote Online.
            </summary>
    </member>
    <member name="T:Aspose.Note.HorizontalAlignment">
      <summary>
            Specifies the alignment.
            </summary>
    </member>
    <member name="F:Aspose.Note.HorizontalAlignment.Left">
      <summary>
            Text is aligned to the left.
            </summary>
    </member>
    <member name="F:Aspose.Note.HorizontalAlignment.Center">
      <summary>
            Text is centered.
            </summary>
    </member>
    <member name="F:Aspose.Note.HorizontalAlignment.Right">
      <summary>
            Text is aligned to the right.
            </summary>
    </member>
    <member name="T:Aspose.Note.IncorrectDocumentStructureException">
      <summary>
            Thrown if a user created document has incorrect structure.
            </summary>
    </member>
    <member name="M:Aspose.Note.IncorrectDocumentStructureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.IncorrectDocumentStructureException" /> class.
            </summary>
      <param name="serializationInfo">
            The serialization info.
            </param>
      <param name="synchronizationContext">
            The synchronization context.
            </param>
    </member>
    <member name="T:Aspose.Note.IncorrectPasswordException">
      <summary>
            Thrown if a document is encrypted with a password and the password specified when opening the document is incorrect or missing.
            </summary>
    </member>
    <member name="M:Aspose.Note.IncorrectPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.IncorrectPasswordException" /> class.
            </summary>
      <param name="serializationInfo">
            The serialization info.
            </param>
      <param name="synchronizationContext">
            The synchronization context.
            </param>
    </member>
    <member name="T:Aspose.Note.PageSizeType">
      <summary>
            Specifies the size of the page node type.
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.SizeByContent">
      <summary>
            The page does not have a fixed size. It resizes automatically to fit all of the content within it.
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.USStatement">
      <summary>
            U.S. statement (5.5" x 8.5").
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.ANSILetter">
      <summary>
            ANSI letter (8.5" x 11").
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.ANSITabloid">
      <summary>
            ANSI tabloid (11" x 17").
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.USLegal">
      <summary>
            U.S. legal (8.5" x 14").
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.ISOA3">
      <summary>
            ISO A3 (297mm x 420mm).
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.ISOA4">
      <summary>
            ISO A4 (210mm x 297mm).
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.ISOA5">
      <summary>
            ISO A5 (148mm x 210mm).
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.ISOA6">
      <summary>
            ISO A6 (105mm x 148mm).
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.JISB4">
      <summary>
            JIS B4 (257mm x 364mm).
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.JISB5">
      <summary>
            JIS B5 (182mm x 257mm).
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.JISB6">
      <summary>
            JIS B6 (128mm x 182mm).
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.JapanesePostcard">
      <summary>
            Japanese postcard (100mm x 148mm).
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.IndexCard">
      <summary>
            Index card (3" x 5").
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.Billfold">
      <summary>
            Billfold (3.75" x 6.75").
            </summary>
    </member>
    <member name="F:Aspose.Note.PageSizeType.Custom">
      <summary>
            Custom size.
            </summary>
    </member>
    <member name="T:Aspose.Note.TagIcon">
      <summary>
            Specifies the icon of tag or task icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.NoIcon">
      <summary>
            Icon isn't specified icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenCheckBox">
      <summary>
            Green check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowCheckBox">
      <summary>
            Yellow check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueCheckBox">
      <summary>
            Blue check box icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenStarCheckBox">
      <summary>
            Green-star check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowStarCheckBox">
      <summary>
            Yellow-star check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueStarCheckBox">
      <summary>
            Blue-star check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenExclamationCheckBox">
      <summary>
            Green-exclamation check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowExclamationCheckBox">
      <summary>
            Yellow-exclamation check box icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueExclamationCheckBox">
      <summary>
            Blue-exclamation check box icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenRightArrowCheckBox">
      <summary>
            Green, right-arrow check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowRightArrowCheckBox">
      <summary>
            Yellow, right-arrow check box icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueRightArrowCheckBox">
      <summary>
            Blue, right-arrow check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowStar">
      <summary>
            Yellow star icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueFollowUpFlag">
      <summary>
            Blue follow-up flag icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.QuestionMark">
      <summary>
            Question mark icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueRightArrow">
      <summary>
            Blue right arrow icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.HighPriority">
      <summary>
            High priority (red exclamation mark) icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.ContactInformation">
      <summary>
            Contact information icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Meeting">
      <summary>
            Meeting (calendar) icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.TimeSensitive">
      <summary>
            Time-sensitive icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.LightBulb">
      <summary>
            Light bulb icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Pushpin">
      <summary>
            Pushpin icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Home">
      <summary>
            Home icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.CommentBubble">
      <summary>
            Comment bubble icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.SmilingFace">
      <summary>
            Smiling face icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.AwardRibbon">
      <summary>
            Award ribbon icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowKey">
      <summary>
            Yellow key icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueCheckBox1">
      <summary>
            Blue check box 1 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueCircle1">
      <summary>
            Blue circle 1 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueCheckBox2">
      <summary>
            Blue check box 2 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueCircle2">
      <summary>
            Blue circle 2 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueCheckBox3">
      <summary>
            Blue check box 3 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueCircle3">
      <summary>
            Blue circle 3 icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueEightPointStar">
      <summary>
            Blue, eight-point star icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueCheckMark">
      <summary>
            Blue check mark icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueCircle">
      <summary>
            Blue circle icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueDownArrow">
      <summary>
            Blue down arrow icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueLeftArrow">
      <summary>
            Blue left arrow icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueSolidTarget">
      <summary>
            Blue solid target icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueStar">
      <summary>
            Blue star icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueSun">
      <summary>
            Blue sun icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueTarget">
      <summary>
            Blue target icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueTriangle">
      <summary>
            Blue triangle icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueUmbrella">
      <summary>
            Blue umbrella icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueUpArrow">
      <summary>
            Blue up arrow icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueXWithDots">
      <summary>
            Blue "X" with dots icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueXNo">
      <summary>
            Blue "X" icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenCheckBox1">
      <summary>
            Green check box 1 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenCircle1">
      <summary>
            Green circle 1 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenCheckBox2">
      <summary>
            Green check box 2 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenCircle2">
      <summary>
            Green circle 2 icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenCheckBox3">
      <summary>
            Green check box 3 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenCircle3">
      <summary>
            Green circle 3 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenEightPointStar">
      <summary>
            Green, eight-point star icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenCheckMark">
      <summary>
            Green check mark icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenCircle">
      <summary>
            Green circle icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenDownArrow">
      <summary>
            Green down arrow icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenLeftArrow">
      <summary>
            Green left arrow icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenRightArrow">
      <summary>
            Green right arrow icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenSolidArrow">
      <summary>
            Green solid arrow icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenStar">
      <summary>
            Green star icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenSun">
      <summary>
            Green sun icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenTarget">
      <summary>
            Green target icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenTriangle">
      <summary>
            Green triangle icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenUmbrella">
      <summary>
            Green umbrella icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenUpArrow">
      <summary>
            Green up arrow icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenXWithDots">
      <summary>
            Green "X" with dots icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenXNo">
      <summary>
            Green "X" icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowCheckBox1">
      <summary>
            Yellow check box 1 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowCircle1">
      <summary>
            Yellow circle 1 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowCheckBox2">
      <summary>
            Yellow check box 2 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowCircle2">
      <summary>
            Yellow circle 2 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowCheckBox3">
      <summary>
            Yellow check box 3 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowCircle3">
      <summary>
            Yellow circle 3 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowEightPointStar">
      <summary>
            Yellow, eight-point star icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowCheckMark">
      <summary>
            Yellow check mark icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowCircle">
      <summary>
            Yellow circle icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowDownArrow">
      <summary>
            Yellow down arrow icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowLeftArrow">
      <summary>
            Yellow left arrow icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowRightArrow">
      <summary>
            Yellow right arrow icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowSolidTarget">
      <summary>
            Yellow solid target icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowSun">
      <summary>
            Yellow sun icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowTarget">
      <summary>
            Yellow target icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowTriangle">
      <summary>
            Yellow triangle icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowUmbrella">
      <summary>
            Yellow umbrella icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowUpArrow">
      <summary>
            Yellow up arrow icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowXWithDots">
      <summary>
            Yellow "X" with dots icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowX">
      <summary>
            Yellow "X" icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.FollowUpTodayFlag">
      <summary>
            Follow up today flag icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.FollowUpTomorrowFlag">
      <summary>
            Follow up tomorrow flag icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.FollowUpThisWeekFlag">
      <summary>
            Follow up this week flag icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.FollowUpNextWeekFlag">
      <summary>
            Follow up next week flag icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.NoFollowUpDateFlag">
      <summary>
            No follow-up date flag icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BluePersonCheckBox">
      <summary>
            Blue person check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowPersonCheckBox">
      <summary>
            Yellow person check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenPersonCheckBox">
      <summary>
            Green person check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueFlagCheckBox">
      <summary>
            Blue flag check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.RedFlagCheckBox">
      <summary>
            Red flag check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenFlagCheckBox">
      <summary>
            Green flag check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.RedSquare">
      <summary>
            Red square icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowSquare">
      <summary>
            Yellow square icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueSquare">
      <summary>
            Blue square icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenSquare">
      <summary>
            Green square icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.OrangeSquare">
      <summary>
            Orange square icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.PinkSquare">
      <summary>
            Pink square icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.EMailMessage">
      <summary>
            E-mail message icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.ClosedEnvelope">
      <summary>
            Closed envelope icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.OpenEnvelope">
      <summary>
            Open envelope icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.MobilePhone">
      <summary>
            Mobile phone icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.TelephoneWithClock">
      <summary>
            Telephone with clock icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.QuestionBalloon">
      <summary>
            Question balloon icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.PaperClip">
      <summary>
            Paper clip icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.FrowningFace">
      <summary>
            Frowning face icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.InstantMessagingContactPerson">
      <summary>
            Instant messaging (IM) contact person icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.PersonWithExclamationMark">
      <summary>
            Person with exclamation mark icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.TwoPeople">
      <summary>
            Two people icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.ReminderBell">
      <summary>
            Reminder bell icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.ContactPersonOnCard">
      <summary>
            Contact (person on a card) icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.RoseOnStem">
      <summary>
            Rose on a stem icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.CalendarDateWithClock">
      <summary>
            Calendar date with clock icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.MusicalNote">
      <summary>
            Musical note icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.MovieClip">
      <summary>
            Movie clip icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.QuotationMark">
      <summary>
            Quotation mark icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Globe">
      <summary>
            Globe icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.HyperlinkGlobe">
      <summary>
            Hyperlink globe icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Laptop">
      <summary>
            Laptop icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Plane">
      <summary>
            Plane icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Car">
      <summary>
            Icon with a car.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Binoculars">
      <summary>
            Binoculars icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.PresentationSlide">
      <summary>
            Presentation slide icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Padlock">
      <summary>
            Padlock icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.OpenBook">
      <summary>
            Open book icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.NotebookWithClock">
      <summary>
            Notebook with clock icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlankPaperWithLines">
      <summary>
            Blank paper with lines icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Research">
      <summary>
            Research (books with a magnifying glass) icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Pen">
      <summary>
            Icon with a pen.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.DollarSign">
      <summary>
            Dollar sign ($) icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.CoinsWithWindowBackdrop">
      <summary>
            Coins with a window backdrop icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.ScheduledTask">
      <summary>
            Scheduled task (form with a clock) icon. 
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.LightningBolt">
      <summary>
            Lightning bolt icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Cloud">
      <summary>
            Cloud icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Heart">
      <summary>
            Heart icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.Sunflower">
      <summary>
            Sunflower icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueCheckBox1Empty">
      <summary>
            Blue empty check box1 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueCheckBox2Empty">
      <summary>
            Blue empty check box2 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueCheckBox3Empty">
      <summary>
            Blue empty check box3 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueCheckBoxEmpty">
      <summary>
            Blue empty check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueExclamationCheckBoxEmpty">
      <summary>
            Blue exclamation check box empty icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueFlagCheckBoxEmpty">
      <summary>
            Blue flag check box empty icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BluePersonCheckBoxEmpty">
      <summary>
            Blue person check box empty icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueRightArrowCheckBoxEmpty">
      <summary>
            Blue right arrow check box empty icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.BlueStarCheckBoxEmpty">
      <summary>
            Blue star check box empty icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenCheckBox1Empty">
      <summary>
            Green empty check box1 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenCheckBox2Empty">
      <summary>
            Green empty check box2 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenCheckBox3Empty">
      <summary>
            Green empty check box3 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenCheckBoxEmpty">
      <summary>
            Green empty check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenExclamationCheckBoxEmpty">
      <summary>
            Green exclamation empty check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenFlagCheckBoxEmpty">
      <summary>
            Green flag empty check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenPersonCheckBoxEmpty">
      <summary>
            Green person empty check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenRightArrowCheckBoxEmpty">
      <summary>
            Green right empty arrow check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.GreenStarCheckBoxEmpty">
      <summary>
            Green star empty check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.RedFlagCheckBoxEmpty">
      <summary>
            Red empty flag check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowCheckBox1Empty">
      <summary>
            Yellow empty check box1 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowCheckBox2Empty">
      <summary>
            Yellow empty check box2 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowCheckBox3Empty">
      <summary>
            Yellow empty check box3 icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowCheckBoxEmpty">
      <summary>
            Yellow empty check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowExclamationCheckBoxEmpty">
      <summary>
            Yellow empty exclamation check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowPersonCheckBoxEmpty">
      <summary>
            Yellow empty person check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowRightArrowCheckBoxEmpty">
      <summary>
            Yellow empty right arrow check box icon.
            </summary>
    </member>
    <member name="F:Aspose.Note.TagIcon.YellowStarCheckBoxEmpty">
      <summary>
            Yellow empty star check box icon.
            </summary>
    </member>
    <member name="T:Aspose.Note.UnsupportedFileFormatException">
      <summary>
            Thrown during document load, when the file format is not recognized or not supported by Aspose.Note.
            </summary>
      <example>Shows how to check if a document load is failed because OneNote 2007 format is not supported.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "OneNote2007.one");

try
{
    new Document(fileName);
}
catch (UnsupportedFileFormatException e)
{
    if (e.FileFormat == FileFormat.OneNote2007)
    {
        Console.WriteLine("It looks like the provided file is in OneNote 2007 format that is not supported.");
    }
    else
        throw;
}</code></example>
    </member>
    <member name="M:Aspose.Note.UnsupportedFileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.UnsupportedFileFormatException" /> class.
            </summary>
      <param name="serializationInfo">
            The serialization info.
            </param>
      <param name="synchronizationContext">
            The synchronization context.
            </param>
    </member>
    <member name="P:Aspose.Note.UnsupportedFileFormatException.FileFormat">
      <summary>
            Gets the file format of passed data if detected.
            </summary>
      <example>Shows how to check if a document load is failed because OneNote 2007 format is not supported.<code>
// The path to the documents directory.
string dataDir = RunExamples.GetDataDir_LoadingAndSaving();
string fileName = Path.Combine(dataDir, "OneNote2007.one");

try
{
    new Document(fileName);
}
catch (UnsupportedFileFormatException e)
{
    if (e.FileFormat == FileFormat.OneNote2007)
    {
        Console.WriteLine("It looks like the provided file is in OneNote 2007 format that is not supported.");
    }
    else
        throw;
}</code></example>
    </member>
    <member name="T:Aspose.Note.UnsupportedSaveFormatException">
      <summary>
            Thrown if requested save format is not supported.
            </summary>
    </member>
    <member name="M:Aspose.Note.UnsupportedSaveFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.UnsupportedSaveFormatException" /> class.
            </summary>
      <param name="serializationInfo">
            The serialization info.
            </param>
      <param name="synchronizationContext">
            The synchronization context.
            </param>
    </member>
    <member name="T:Aspose.Note.Fonts.FontsSubsystem">
      <summary>
            Base class implementing Aspose.Note.Fonts.IFontsSubsystem interface.
            Provides functionality for default font and font's substitutions.
            Override Aspose.Note.Fonts.FontsSubsystem.FetchFontFamily protected member function in a derived class to implement logic for retrieving of <see cref="T:System.Drawing.FontFamily" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Note.Fonts.FontsSubsystem.#ctor(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Fonts.FontsSubsystem" /> class.
            </summary>
      <param name="defaultFont">
            The stream containing default Font.
            </param>
      <param name="fontsSubstitutions">
            The fonts substitutions.
            </param>
    </member>
    <member name="M:Aspose.Note.Fonts.FontsSubsystem.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Fonts.FontsSubsystem" /> class.
            </summary>
      <param name="defaultFontFile">
            The stream containing default Font.
            </param>
      <param name="fontsSubstitutions">
            The fonts substitutions.
            </param>
    </member>
    <member name="M:Aspose.Note.Fonts.FontsSubsystem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Note.Fonts.FontsSubsystem" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Note.Fonts.FontsSubsystem.DefaultFont">
      <summary>
            Gets or sets default font.
            </summary>
    </member>
    <member name="M:Aspose.Note.Fonts.FontsSubsystem.AddFontSubstitution(System.String,System.String)">
      <summary>
            Adds font substitution.
            </summary>
      <param name="substituted">
            The substituted font name.
            </param>
      <param name="substitution">
            The substitution font name.
            </param>
    </member>
    <member name="M:Aspose.Note.Fonts.FontsSubsystem.AddFont(System.IO.Stream,System.String)">
      <summary>
            Add the font.
            </summary>
      <param name="stream">
            The stream containing the font.
            </param>
      <param name="tempFolder">
            The temp Folder.
            </param>
    </member>
    <member name="M:Aspose.Note.Fonts.FontsSubsystem.AddFont(System.IO.Stream)">
      <summary>
            Add the font.
            </summary>
      <param name="stream">
            The stream containing the font.
            </param>
    </member>
    <member name="M:Aspose.Note.Fonts.FontsSubsystem.AddFont(System.String)">
      <summary>
            Add the font.
            </summary>
      <param name="file">
            The path to the file containing the font.
            </param>
    </member>
    <member name="M:Aspose.Note.Fonts.FontsSubsystem.LoadFontsFromFolder(System.String)">
      <summary>
            Loads all TrueType fonts from specified folder to internal collection.
            </summary>
      <param name="folder">
            The folder containing fonts.
            </param>
      <exception cref="T:System.NullReferenceException">
            Parameter 'folder' is null or empty.
            </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
            There directory specified by folder does not exist.
            </exception>
      <exception cref="T:System.IO.InvalidDataException">
            The file from folder does not contain TrueType font.
            </exception>
    </member>
    <member name="M:Aspose.Note.Fonts.FontsSubsystem.GetFontFamily(System.String)">
      <summary>
            Gets font family.
            </summary>
      <param name="fontName">
            The font name.
            </param>
      <returns>
            The <see cref="T:System.Drawing.FontFamily" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.Fonts.FontsSubsystem.TranslateFontName(System.String)">
      <summary>
            Tries to translate font name to its substitution via internal table.
            </summary>
      <param name="fontName">
            The font name.
            </param>
      <returns>
            The name of substitution font if it is specified otherwise the specified font name itself.
            </returns>
    </member>
    <member name="M:Aspose.Note.Fonts.FontsSubsystem.FetchFontFamily(System.String)">
      <summary>
            Fetches font family as a candidate for GetFontFamily.
            </summary>
      <param name="fontName">
            The font name.
            </param>
      <returns>
            The <see cref="T:System.Drawing.FontFamily" />.
            </returns>
    </member>
    <member name="M:Aspose.Note.Fonts.FontsSubsystem.FindFontFamilyInInternalCollection(System.String)">
      <summary>
            Tries to find font family in internal collection of GDI fonts.
            </summary>
      <param name="fontFamilyName">
            The font family name.
            </param>
      <returns>
            The <see cref="T:System.Drawing.FontFamily" />.
            </returns>
    </member>
    <member name="T:Aspose.Note.Fonts.IFontsSubsystem">
      <summary>
            Implement this interface if you want to control how Aspose.Note retrieves fonts when saving a document.
            </summary>
    </member>
    <member name="M:Aspose.Note.Fonts.IFontsSubsystem.GetFontFamily(System.String)">
      <summary>
            Gets font family.
            </summary>
      <param name="fontName">
            The font name.
            </param>
      <returns>
            The <see cref="T:System.Drawing.FontFamily" />.
            </returns>
    </member>
  </members>
</doc>